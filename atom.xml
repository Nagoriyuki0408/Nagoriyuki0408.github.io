<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柳瀬しおこうの夢</title>
  
  
  <link href="https://nagoriyuki0408.github.io/atom.xml" rel="self"/>
  
  <link href="https://nagoriyuki0408.github.io/"/>
  <updated>2025-05-12T13:47:37.128Z</updated>
  <id>https://nagoriyuki0408.github.io/</id>
  
  <author>
    <name>SHIOKOU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《死月妖花/剧透》：月冷樱如梦，孤影隐荒田（一）</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E3%80%8A%E6%AD%BB%E6%9C%88%E5%A6%96%E8%8A%B1-%E5%89%A7%E9%80%8F%E3%80%8B%EF%BC%9A%E6%9C%88%E5%86%B7%E6%A8%B1%E5%A6%82%E6%A2%A6%EF%BC%8C%E5%AD%A4%E5%BD%B1%E9%9A%90%E8%8D%92%E7%94%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E3%80%8A%E6%AD%BB%E6%9C%88%E5%A6%96%E8%8A%B1-%E5%89%A7%E9%80%8F%E3%80%8B%EF%BC%9A%E6%9C%88%E5%86%B7%E6%A8%B1%E5%A6%82%E6%A2%A6%EF%BC%8C%E5%AD%A4%E5%BD%B1%E9%9A%90%E8%8D%92%E7%94%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2025-05-12T13:47:00.000Z</published>
    <updated>2025-05-12T13:47:37.128Z</updated>
    
    <content type="html"><![CDATA[<p>——死月妖花中血脉相连的情感</p><p>引言：</p><p><strong>风寒霜凝枕夜月，血月孤悬影暗边。鬼涕孤灯惹人怜，妖花乱吐赤魂烟。青石苔深起鬼怨。彼影倏匿绝此迹，徒余残泪染荒田。轮回已定终抵至，月冷樱寒能面见。此身归兮是何所？但蕴妖气潜幽泉。</strong></p><p>​记忆的残片宛若轮转的万花镜，让思绪的航迹抵至花信随风至，樱魂染春晴的场景。在樱意盎然的景观背后，悲剧与幸福相互纠缠，作为大写的真实显现。每每谈及《死月妖花》这部作品，脑海中都会映显此前描绘的图景，这图景在脑海中弥久不散，乃至于愈发得明晰，此感直与梦境仿佛，在梦中，窥视到了一面镜子，镜子映照的故事与此界无关，伫立于此，只为见证彼岸的世界中的悲剧逐渐消散后，守望她们最终那幸福之模样。</p><p>​本文侧重点在于《死月妖花》中真咒杀篇的第一个剧本，含有一定程度的剧透，请慎重决定是否查看。另外，著文部分内容含带笔者的一些联想，请谨慎批判。</p><p><img src="https://pic4.zhimg.com/v2-b7c9b934b13ebf78b2d56475afff1917_1440w.jpg" alt="img"></p><h2 id="血月映残卷，妖风折旧笺"><a href="#血月映残卷，妖风折旧笺" class="headerlink" title="血月映残卷，妖风折旧笺"></a>血月映残卷，妖风折旧笺</h2><p>​《死月妖花》作为一部同人作品，它的系统设计值得观众去品味一番，妖花的主线剧情是依附于树状图之上呈现给观众的，因此它的剧本是碎片化的。此外，妖花还自带剧本完成进度显示和游戏时间统计，这些要素使得观众可以对游戏剧本有更立体化、多元化的把握。</p><p>​妖花系统中值得一提的内容不止于此，<strong>リファレンス（参考资料）</strong>、<strong>事典</strong>、<strong>ドキュメント（文件）</strong>，值得一提的是<strong>ドキュメント（文件）</strong>中还有<strong>メモ（笔记）</strong>功能，观众可以在这里记下自己游玩作品时的所思所想，然后比较惊艳的便是<strong>リファレンス（参考资料）</strong>当中的卷轴和拼图，两者的有序结构化依托于妖花设置的<strong>ポイント（点数）</strong>机制，<strong>ポイント（点数）</strong>的获得途径是阅读剧本和游戏内的资料，前者的解锁只需要一定数额的<strong>ポイント（点数）</strong>，后者<strong>ポイント（点数）</strong>只能换取拼图碎片，需要自己来完成拼图的过程，而且随着拼图的逐步完成，拼图的难度也会加大，还是有一定挑战性的。而拼图和卷轴在游戏中比较特别，它们的信息在时间上往往先于游戏剧情，如果有足够的<strong>ポイント（点数）</strong>就可以通过卷轴和拼图来“预知未来”，游玩过程中，游戏剧情和卷轴和拼图只言片语的暗示相互印证的感觉是极佳的。</p><p><img src="https://pic4.zhimg.com/v2-33f6a858de27fca5c6439a0f72444f73_1440w.jpg" alt="img"></p><p>死月妖花的卷轴</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="回忆追寻旧梦，忧思泪染故土——キオク"><a href="#回忆追寻旧梦，忧思泪染故土——キオク" class="headerlink" title="回忆追寻旧梦，忧思泪染故土——キオク"></a>回忆追寻旧梦，忧思泪染故土——キオク</h2><p>​对于你来说，最早的记忆是什么呢？人在与母体分离时，会不可避免地获得一份对于残缺的焦虑，而“分离的焦虑”不仅源于与母体的分离，还在于主体对“完整性”的执念与无法达到理想自我的矛盾。姐姐在这一情境中，或许也会体验到一种隐秘的缺失感，桃子曾经是父母唯一的关注中心，这种独特地位的丧失与妹妹的到来交织在一起，使她的情感更为复杂。但是绘梨奈诞生过后，桃子对于“分离的焦虑”与原先呈现出来的样态相悖。</p><p>​哀伤仿若缕缕丝线，而认同则是编织细线的银针，随着银针的跃动，丝线汇聚成了新的东西。桃子由“独特”转为“分享”，虽然自己不再是唯一，但是“独特”的残余物却以丝线编织的补块的形态出现。妹妹的依赖让桃子的单一价值来源成功实现多元化，原本姐姐的情感价值完全来源于父母的认可，在父母眼中扮演那个镜像中的理想自我，如今却是增添了一份血浓于水的亲情。</p><p>​在妹妹的天才光环的映照下，桃子貌似找寻了一份“引导者”的位置。扮演镜像里的理想自我已然失去意义，桃子遂放弃对于“完整性”的执着，在与妹妹的朝夕相处之下，也能学会逐渐接受自己的残缺，残缺并不意味着不幸，相反，它还能成为一种动力，为超越残缺的形态。多源之渠汇聚一流，在这里，桃子选择用爱和陪伴为妹妹的舞台增光添彩。</p><p>“姐姐，姐姐，你看我画得好不好？”她拿着自己的画，满脸期待地望着我。</p><p>我点头，眼角却有些湿润。</p><p>她不知道，我在她的目光里看到了当年的自己。</p><p>可是，当她莞尔一笑，朝我投射过来的笑容的时候，我都没办法拒绝。我抱起她，发现她的小手软软的，暖暖的，像一只小猫用尾巴拂过心底。她深邃的瞳孔，像无尽的海洋想要将我吞没。那一刻，某处有一个想法倏忽浮现在了我的面前，我明白了，我也是她的中心。她的信任、依赖，是一种沉甸甸的礼物。</p><p>她是个天才。她刚涉及，我就知道，她身上有一种光芒，连父母的眼神都随之改变。</p><p>我不是嫉妒，也许吧，我是有些不甘——明明我也努力过，拼命想要做好一切，为什么还是不由自主地感到难过？</p><p>“最早的记忆，似乎就是母亲抱着我，轻轻哼着歌。”</p><p>“那时，我是世界的唯一，是父母目光的中心。”</p><p>“一切都因妹妹的到来而改变……”</p><p>“她第一次啼哭时，我站在房门外.”</p><p>她那啼泣之声，仿若轻羽，却深入地坠入我的心田。</p><h2 id="血泪浸荒田地，怨念皆得所释——復讐"><a href="#血泪浸荒田地，怨念皆得所释——復讐" class="headerlink" title="血泪浸荒田地，怨念皆得所释——復讐"></a>血泪浸荒田地，怨念皆得所释——復讐</h2><p>**”复仇并非带来解脱，反而使人更加沉沦。”**— 《罪与罚》。妹妹死去过后，桃子在这世界上的唯一支撑似乎也随之消散，理性告诉桃子要逐渐放下絵梨奈已经死去这个事实，但是当桃子生活下去的唯一支撑消失过后，她还能保持沉默吗？答案是显然的，称之为仇恨的种子在她的心中成长，直至化为一颗难以割舍的肿瘤。花光积蓄购置了枪械和弹药过后，桃子孤身一人踏上了前往荒田集落的复仇之路，仇恨的火焰日渐攀升，仿佛想要将桃子和她周围的一切都吞没。</p><p>​荒田集落是一个民风淳朴的村落，在这里，桃子对于复仇的决心曾多次发生动摇，称之为良心的事物在与复仇的冲动相互拮抗。桃子的真心究竟为何会如此矛盾？所谓的复仇，对于她来说，更多的是在试图恢复失去的依靠和情感支撑，她的内心对妹妹的去世充满了深深的痛苦与绝望，复仇的冲动如今几乎是生存的全部动力。但在与村民的接触过程中，又隐隐察觉到复仇不能带来真正的安慰，在这之后只有更深的孤独和空虚在等待着，良心的感召与复仇的欲望之间的冲突愈发尖锐。</p><p>​在最后虽然完成了复仇，但这貌似并不出于自己的意志。在良心与复仇的冲突面前，她甚至失去了自助选择的权力，在面临自己的无意识的暴力造成的结果时，内心定然是充满了无尽的痛苦与懊悔，但是这个结局和她预料之中的情景完全符合，虽又些许的自责但是宿命就是如此，以至于后面自主杀死了依旧活着的美冬，最后终于了结了自己。这里的复仇有让桃子获得解脱和救赎吗？答案是否定的，她的自杀是对无能为力的绝望反应，最后的她也只是变得更加迷失和痛苦，唯一不变的或许只有她对絵梨奈永恒不变的爱。</p><h2 id="泪眼模糊旧恩怨，何时得见月如潮——腫瘍"><a href="#泪眼模糊旧恩怨，何时得见月如潮——腫瘍" class="headerlink" title="泪眼模糊旧恩怨，何时得见月如潮——腫瘍"></a>泪眼模糊旧恩怨，何时得见月如潮——腫瘍</h2><p>​“良心告诉我宽恕，但愤怒要求我复仇。两者在我的胸中不断冲突。”复仇在个人层面具有相当的合理性，其是对不公的回应，但它本身或许会违反一定道德准则，而违反了道德准则正是桃子良心和复仇冲突的主要诱导因素，在实行复仇计划的过程中，桃子多次感受到内心的愧疚与自责，在杀死母熊和夏菜的道歉的情节中，桃子都出现了复仇心思的动摇。</p><p><img src="https://pic3.zhimg.com/v2-e635bc3d00667f59d303e6644d20e6fc_1440w.jpg" alt="img"></p><p>腫瘍的多相位</p><p>​在面对伤害的时候，宽恕和复仇往往是两种对立的选择，宽恕通常被认为具有更高的道德标准，复仇则可能带来内心的冲突和道德上的困扰，甚至让复仇者在“正义”的名义下迷失自我。而宽恕正是良心的体现，桃子良心与复仇的矛盾体现在心理层面，在一开始，桃子只觉得复仇是对伤害的正当回应，但随着报复的深入，桃子逐渐感到愧疚、内疚和空虚。辩证的看待复仇的心理需求与此处良心的反弹呢，桃子的复仇是出于对去世的绘梨奈的悲伤情感的宣泄，在良心反弹的时候复仇满足的所谓心理需求并不会得到真正的满足，相反只会带来更多的心理负担。</p><p>​复仇只会带来短期的情感释放，却会让人背负上长期的心理负担。桃子最后选择结束生命，这不仅仅是对自己无可奈何的一种放手，更是对自身担负的罪行的赎罪，对于桃子这样一个人，在成功复仇过后，必然会产生这样的困惑与自我批判，她的良心告诉她说要宽恕，可是愤怒却强迫她进行复仇，这两者在桃子的内心种不断冲突。</p><h2 id="碎碎念："><a href="#碎碎念：" class="headerlink" title="碎碎念："></a>碎碎念：</h2><p>​称之为世界的这面镜子，逐渐破裂，往昔美好的记忆化作碎片，散落满地。追寻回忆所在之处，跌入无尽幻梦。虽抵至奈落境地，但爱意于心中永存，在等待着某一时刻带来新的生机。</p><p><strong>“远去的，我再见不到的，啊，我知道：你是我所不知的灵魂，</strong></p><p><strong>我爱你！我知道，我们的眼光的火焰在瞬间交换了一种再生的力量。”</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;——死月妖花中血脉相连的情感&lt;/p&gt;
&lt;p&gt;引言：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;风寒霜凝枕夜月，血月孤悬影暗边。鬼涕孤灯惹人怜，妖花乱吐赤魂烟。青石苔深起鬼怨。彼影倏匿绝此迹，徒余残泪染荒田。轮回已定终抵至，月冷樱寒能面见。此身归兮是何所？但蕴妖气潜幽泉。&lt;/strong</summary>
      
    
    
    
    
    <category term="Galgame" scheme="https://nagoriyuki0408.github.io/tags/Galgame/"/>
    
  </entry>
  
  <entry>
    <title>Gal:Musicus~从摇滚当中寻求存在的价值</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/Gal-Music-%E4%BB%8E%E6%91%87%E6%BB%9A%E5%BD%93%E4%B8%AD%E5%AF%BB%E6%B1%82%E5%AD%98%E5%9C%A8%E7%9A%84%E4%BB%B7%E5%80%BC/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/Gal-Music-%E4%BB%8E%E6%91%87%E6%BB%9A%E5%BD%93%E4%B8%AD%E5%AF%BB%E6%B1%82%E5%AD%98%E5%9C%A8%E7%9A%84%E4%BB%B7%E5%80%BC/</id>
    <published>2025-05-12T13:45:25.000Z</published>
    <updated>2025-05-12T13:45:44.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h2><blockquote><p>《MUSICUS！》是由OVERDRIVE于2019年12月20日发售的一部摇滚ADV游戏，其剧本由我们熟知的<a href="https://bangumi.tv/person/5787" title="濑户口廉也">瀬戸口廉也</a>负责创作，濑户口的文风相比大家早有所耳闻，早期的濑户口是进行小说创作的，他的作品大中鲜有救赎，大都颓丧沉郁，他那文本编织出来的黝黑巨毯，不意间将读者吞没，只有等到由点燃故事线而产生的烛光熄灭时，读者才能暂时从故事中脱身。他所做的事情便是用看似不经意的笔触，将人性中丑恶黑暗的一面抽丝剥茧，从而展示在观众面前。而《MUSICUS！》也属于这样的作品，作为OVERDRIVE最后一部音乐摇滚类型的作品，它的行文充斥着大片的长文字，在对话中亦或是描写中，濑户口都选择使用大量的文字敲击玩家的心灵，在流程的前期，往往会陈列出现实的种种残酷情形，进而压得玩家喘不过气。《MUSICUS！》算的上是一部非常濑户口的作品，濑户口的核心粉丝肯定不能错过。话虽是如此，但本作值得诟病的点也不少，首屈一指的便是：濑户口本人并不懂音乐，懂摇滚的玩家的就能发现游戏中的端倪。</p></blockquote><p>![[QQ_1739950638780.png]]<br>我坚持音乐的理由是什么？蝉鸣声萦绕在我的耳畔，终端中逐渐播放的音乐，仿佛是从老旧八音盒中浸染出来的一般。称之为死的深渊在背后凝视着孱弱的生命，向前亦是无尽的深渊，无力的双手敲击着键盘，将自我蕴含的所有生命力全部注入到音符当中，形成音乐之河，观众的神思被蒸馏，徘徊于音乐编织的梦之幻境。<br>而音乐本身又为何物，探寻着回忆中的音乐旅途，如果说对音乐的喜爱能打动<br>“今が一番しあわせ”</p><h2 id="2-既定尘心犹未改，风云百变待新篇——尾琦弥子线"><a href="#2-既定尘心犹未改，风云百变待新篇——尾琦弥子线" class="headerlink" title="2. 既定尘心犹未改，风云百变待新篇——尾琦弥子线"></a>2. 既定尘心犹未改，风云百变待新篇——尾琦弥子线</h2><p>尾琦弥子线的结局是充满既知感的，用未来的不确定性换取既知的平淡生活也是能够获得幸福的。但是事实真的如此吗？生活在既知的平淡生活中，往往就会迷失自我的存在，从而失去主体性。男主来到当前的定时制学校本身就令人难以理解，但要说是打破既知感重新夺回自己的主体性，就能解释男主的怪异行为，试想一下，顶尖中学的一位学霸，放弃自己的前程，不顾家里人对他未来的期望，转而来到一所会给自己人生蒙上一层灰尘的定时制学校，这是一种怎样的落差啊。就在这样的一个背景中，对马馨遇到了花井是清，花鸟风月乐队绝妙的表演（不如说是花井是清的ぐらぐら）将对马馨拉入了音乐的世界。<br>这条线最令人感到惊讶的还是在定时制学校的大家，居然为了学院祭，自发组建了Night Schooler乐队，定时制的大家都是因为各种各样的原因来到了这里，从哪个角度来讲都不会将他们与青春四溢的学院祭联系在一起。这样反差的剧情，或许正是在宣告濑户口式的另类青春校园故事，定时制学校中的小川，对自我存在进行的探寻。已经偏离了正常轨道的人生，还有必要去拼命逆转吗？而人在任何地方都需要一些依靠才能够存活下去，小川的精神支柱是贝斯，其实也可以说是她深爱的音乐，音乐能给予迷茫的她一些力量，在小川辍学的时候，偶然接触了摇滚乐。在对马馨的一行人的劝导下，小川得以重返学校。</p><!--![[QQ_1740019243548.png]]--><p><img src="https://i.imgur.com/67ER8aW.png"></p><!--![[QQ_1740191702365.png]]--><p><img src="https://i.imgur.com/1TrqH3V.jpeg"></p><p>在夜校的乐队的各位的进程都一切顺利的时刻，小川将自己编写的曲子拿给对马馨鉴赏，不希望将不上不下的劣质作品带入文化祭当中。小川想创作的是世界上最好的音乐，虽然这显得比较夸张，但是也从侧面说明她是在认真创作音乐，并且对音乐有着非同寻常的热情。她对音乐包含的热爱也在有形无形之间打动了对马馨。金田在乐队当中学会了自己一直不会弹奏的一个音节，然而是依靠对吉他本身的改装，这其实也带来了另外的一个思考问题，如果我们只是想演奏出好的音乐，那么将乐器本身进行改装，让原本复杂的弹奏变得简单，这样是否正确呢？我个人认为音乐的演奏环节当中，演奏者拼命的演奏是很重要的一环，因为我们可以从中感受到演奏者在特定场所下的情感还有生命力，这毫无疑问是演奏的灵魂，是不可以被割舍的，单纯的机械化，满是技巧的演奏方式，会淡化音乐所想传达的力量。</p><!--![[QQ_1740192155014.png]]--><p><img src="https://i.imgur.com/qBxjtwC.jpeg"></p><!--![[QQ_1740192263274.png]]--><p><img src="https://i.imgur.com/Scjp4vZ.png"></p><p>出现了一个在思考的问题，为何金田会如此痴迷于摇滚乐呢？几乎在每条线都会出现他的身影，他身上是否具有摇滚乐人具有的某些特诊？<br>金田这一个角色的设计，在平衡现实与理想之间起了一个参照物的作用。金田的身世相比于乐队中的其他人来说，都会更加凄惨，但是在各条线路当中，他都能获得较好的结局。他与对马馨的关系像是大哥与小弟一样，金田本身要钱没钱，要能力没能力，在各条线路当中，能获得当时的身份地位大部分都是靠对马馨的帮助，而对马馨与金田的最大区别就在于魔怔程度上，金田是纯粹的，在摇滚道路上不会展现出对马馨的那种迷茫，对金田来说，音乐就是汲取精神力量的一种工具，此外他通过与乐队当中其他人的相处，满足了他作为人的需求。而对马馨就不一样了，在各条线路的轮换当中，我们能很明显地注意到对马馨的迷茫，也可以说是称之为花井是清的灵魂一直萦绕在对马馨的左右，从花井是清那里继承得来的关于音乐的一切都成为了对马馨前行的包袱，花井是清可以说激活了对马馨体内的自灭因子，导致对马馨无论何时都有精神危机爆发的可能性。</p><!--![[QQ_1740194228509.png]]--><p><img src="https://i.imgur.com/s8p3PBZ.png"></p><p>对马馨此时还在迷茫之中的原因是什么？<br>此时的对马馨认为，如果要舍弃音乐的话，那就相当于将自己最重要的东西舍弃了。但是转念一想，自己手中的吉他是从花井是清那里继承而来的，而自己弹奏吉他的技巧也接受了他的点拨。那么对马馨对音乐的喜爱究竟是出自于内心更多一点呢，还是为了花井是清更多一点呢？这样的疑问久久徘徊在对马馨的脑花中，但是世间没有双全法，如果自己选择了“正确的人生”，那就意味着会失去音乐，反之亦然，对马馨在与弥子的画家父亲交谈的时候，便已经能预见自己选择音乐之后可能经历的未来。但是光是在脑海中想象的话，最终是得不来任何结局的，未来本质上还是不可预知的，所以用当下的感觉来评判自己究竟该如何是好，这场迷茫的终结答案还是得交给最后的这场ライブ。</p><!--![[QQ_1740194495873.png]]--><p><img src="https://i.imgur.com/Nrry3U3.png"></p><p>这条线路当中，对马馨为什么会重新去准备考试，走上世人所认为的正轨呢？<br>在与自己热爱的音乐做了最后的告别过后，对马馨的生活回到了正轨，回到那个被规划好的人生。音乐究竟是为什么被演奏的呢？在这里的对马馨想的大概是，音乐是为了重要的人而演奏的，音乐仅仅是自我满足与向他人传递力量和情绪，而人的需求不只是力量和情绪那么简单，音乐或许是曾经的自己做过的一个虚无缥缈的梦，但是现在却不一样了，眼下他拥有了自己需要照顾的人，产生了真正的感情，而这份感情与音乐无关，所以已经不需要音乐来作为自我慰藉的工具了，也可以用这个观念来解释为什么在三日月线他和ミカ的婚约取消，在用文化祭的表演作为与音乐做最后的话别之后，对马馨已经对音乐本身没有执念了，他选择回归日常，作为一个普通的人活着，现在的他</p><!--<!--<!--![[QQ_17401956537-->36.p-->ng]]--><p><img src="https://i.imgur.com/DCzEbBa.png"></p><p><img src="https://i.imgur.com/7dFIpWt.png"></p><p><img src="https://i.imgur.com/r4cjCgg.png"></p><p>与自己曾经热爱的音乐说再见，“今が一番しあわせ”在此时具象化。</p><h2 id="3-花井是清的自杀，自我存在的探寻——来岛澄线"><a href="#3-花井是清的自杀，自我存在的探寻——来岛澄线" class="headerlink" title="3. 花井是清的自杀，自我存在的探寻——来岛澄线"></a>3. 花井是清的自杀，自我存在的探寻——来岛澄线</h2><!--![[QQ_1740015967571.png]]--><p><img src="https://i.imgur.com/nH6QXx0.png"></p><p>伪造成垂危少女燃烧生命的低水平演奏却能打动人心，这是为何呢？究竟是音乐本身更能打动观众，还是观众欣赏的是音乐本身蕴含的叙事。</p><!--![[QQ_1740190769814.png]]--><p><img src="https://i.imgur.com/osgPcwL.png"></p><!--![[QQ_1740281448727.png]]--><p><img src="https://i.imgur.com/knrEdoi.jpeg"></p><!--![[QQ_1740281495055.png]]--><p><img src="https://i.imgur.com/J5pNOBd.png"></p><!--![[QQ_1740281578944.png]]--><p><img src="https://i.imgur.com/axOUVgJ.png"></p><p>为什么风雅会说自己和对马馨的sense不一样呢？</p><h2 id="4-音之所蕴不思量，仰而视之别无它——花井三日月线"><a href="#4-音之所蕴不思量，仰而视之别无它——花井三日月线" class="headerlink" title="4. 音之所蕴不思量，仰而视之别无它——花井三日月线"></a>4. 音之所蕴不思量，仰而视之别无它——花井三日月线</h2><h2 id="5-死之难避众人晓，及时行乐尚为佳——めぐる线"><a href="#5-死之难避众人晓，及时行乐尚为佳——めぐる线" class="headerlink" title="5. 死之难避众人晓，及时行乐尚为佳——めぐる线"></a>5. 死之难避众人晓，及时行乐尚为佳——めぐる线</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-引入&quot;&gt;&lt;a href=&quot;#1-引入&quot; class=&quot;headerlink&quot; title=&quot;1. 引入&quot;&gt;&lt;/a&gt;1. 引入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;《MUSICUS！》是由OVERDRIVE于2019年12月20日发售的一部摇滚ADV游戏，其</summary>
      
    
    
    
    
    <category term="Galgame" scheme="https://nagoriyuki0408.github.io/tags/Galgame/"/>
    
  </entry>
  
  <entry>
    <title>第三章：Pandas</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9APandas/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9APandas/</id>
    <published>2025-05-12T13:38:56.000Z</published>
    <updated>2025-05-12T13:40:11.737Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2F;Pandas 是一个强大的 Python 数据分析和处理库。它提供了快速、灵活和富有表现力的数据结构，旨在使处理结构化（表格化、多维数组、时间序列）和非结构化数据变得简单直观。</p><p><strong>Pandas 的核心数据结构：</strong></p><ol><li><p><strong>Series（序列）</strong></p><ul><li>Series 是一种一维带标签的数组，可以存储任何数据类型（整数、浮点数、字符串、Python 对象等）。</li><li>它类似于 NumPy 的一维数组，但多了标签（索引）功能。</li><li>索引可以是数字、字符串或任何其他不可变对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表创建 Series</span></span><br><span class="line">data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">s = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 0    10</span></span><br><span class="line"><span class="comment"># 1    20</span></span><br><span class="line"><span class="comment"># 2    30</span></span><br><span class="line"><span class="comment"># 3    40</span></span><br><span class="line"><span class="comment"># 4    50</span></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字典创建 Series (键变为索引)</span></span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line">s = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># a    10</span></span><br><span class="line"><span class="comment"># b    20</span></span><br><span class="line"><span class="comment"># c    30</span></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line">s = pd.Series(data, index=[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># b    20.0</span></span><br><span class="line"><span class="comment"># c    30.0</span></span><br><span class="line"><span class="comment"># d     NaN</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure></li><li><p><strong>DataFrame（数据框）</strong></p><ul><li>DataFrame 是一个二维带标签的数据结构，可以看作是 Series 的容器。</li><li>它类似于电子表格或 SQL 表格，由行和列组成。</li><li>每一列可以是不同的数据类型。</li><li>DataFrame 是 Pandas 中最常用的数据结构。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字典创建 DataFrame</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Age&#x27;</span>: [<span class="number">25</span>, <span class="number">30</span>, <span class="number">28</span>],</span><br><span class="line">    <span class="string">&#x27;City&#x27;</span>: [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;London&#x27;</span>, <span class="string">&#x27;Paris&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment">#        Name  Age      City</span></span><br><span class="line"><span class="comment"># 0     Alice   25  New York</span></span><br><span class="line"><span class="comment"># 1       Bob   30    London</span></span><br><span class="line"><span class="comment"># 2  Charlie   28     Paris</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表的列表创建 DataFrame</span></span><br><span class="line">data = [[<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;New York&#x27;</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;London&#x27;</span>], [<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;Paris&#x27;</span>]]</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;City&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment">#        Name  Age      City</span></span><br><span class="line"><span class="comment"># 0     Alice   25  New York</span></span><br><span class="line"><span class="comment"># 1       Bob   30    London</span></span><br><span class="line"><span class="comment"># 2  Charlie   28     Paris</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>Pandas 的主要功能：</strong></p><ul><li><p><strong>数据导入&#x2F;导出：</strong></p><ul><li>Pandas 可以从各种格式的文件中读取数据，例如 CSV、Excel、SQL 数据库、JSON 等。</li><li>也可以将数据导出到这些格式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 Excel 文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 CSV 文件</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;output.csv&#x27;</span>, index=<span class="literal">False</span>) <span class="comment"># index=False 避免写入索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 Excel 文件</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;output.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件路径，使用原始字符串避免转义问题</span></span><br><span class="line">file_path = <span class="string">r&#x27;F:\PythonProject2\numpy\youtube_video_data\GB_video_data_numbers.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试使用 UTF-8 编码读取 CSV 文件</span></span><br><span class="line">        df = pd.read_csv(file_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 打印 DataFrame 的前几行，用于预览数据</span></span><br><span class="line">        <span class="built_in">print</span>(df.head())</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="comment"># 如果 UTF-8 解码失败，则尝试使用 GBK 编码</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;UTF-8 decoding failed, trying GBK...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试使用 GBK 编码读取 CSV 文件</span></span><br><span class="line">            df = pd.read_csv(file_path, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">            <span class="comment"># 打印 DataFrame 的前几行，用于预览数据</span></span><br><span class="line">            <span class="built_in">print</span>(df.head())</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="comment"># 如果 GBK 解码失败，则尝试使用 Latin-1 编码</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;GBK decoding failed, trying latin1...&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试使用 Latin-1 编码读取 CSV 文件</span></span><br><span class="line">                df = pd.read_csv(file_path, encoding=<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">                <span class="comment"># 打印 DataFrame 的前几行，用于预览数据</span></span><br><span class="line">                <span class="built_in">print</span>(df.head())</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                <span class="comment"># 如果所有解码尝试都失败，则提示用户检查文件编码</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;All decoding attempts failed.  Please check the file encoding.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 捕获其他可能发生的异常，并打印错误信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 如果文件不存在，则打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: File not found at <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>数据清洗：</strong></p><ul><li>处理缺失值（<code>dropna()</code>, <code>fillna()</code>）</li><li>删除重复值（<code>drop_duplicates()</code>）</li><li>数据类型转换（<code>astype()</code>）</li><li>字符串处理（<code>str</code> 属性，例如 <code>str.lower()</code>, <code>str.replace()</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理缺失值</span></span><br><span class="line">df.dropna()  <span class="comment"># 删除包含缺失值的行</span></span><br><span class="line">df.fillna(<span class="number">0</span>) <span class="comment"># 用 0 填充缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重复行</span></span><br><span class="line">df.drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据类型转换</span></span><br><span class="line">df[<span class="string">&#x27;Age&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串处理</span></span><br><span class="line">df[<span class="string">&#x27;Name&#x27;</span>] = df[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.lower() <span class="comment"># 将 Name 列转换为小写</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数据选择和过滤：</strong></p><ul><li>使用标签（<code>loc[]</code>）或位置（<code>iloc[]</code>）选择数据</li><li>使用条件表达式过滤数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用标签选择行和列</span></span><br><span class="line">df.loc[<span class="number">0</span>, <span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 选择第一行 &#x27;Name&#x27; 列的值</span></span><br><span class="line">df.loc[<span class="number">1</span>:<span class="number">3</span>, [<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]] <span class="comment"># 选择 2-4 行的 &#x27;Name&#x27; 和 &#x27;Age&#x27; 列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用位置选择行和列</span></span><br><span class="line">df.iloc[<span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 选择第一行第一列的值</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>, <span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 选择 2-3 行的 1-2 列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用条件表达式过滤数据</span></span><br><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">25</span>] <span class="comment"># 选择 Age 大于 25 的行</span></span><br><span class="line">df[(df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">25</span>) &amp; (df[<span class="string">&#x27;City&#x27;</span>] == <span class="string">&#x27;London&#x27;</span>)] <span class="comment"># 选择 Age 大于 25 且 City 为 London 的行</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数据转换：</strong></p><ul><li>添加&#x2F;删除列（<code>df[&#39;NewColumn&#39;] = ...</code>, <code>df.drop(&#39;Column&#39;, axis=1)</code>）</li><li>排序（<code>sort_values()</code>）</li><li>分组（<code>groupby()</code>）</li><li>聚合（<code>sum()</code>, <code>mean()</code>, <code>count()</code>, <code>min()</code>, <code>max()</code>）</li><li>透视表（<code>pivot_table()</code>）</li><li>应用自定义函数（<code>apply()</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新列</span></span><br><span class="line">df[<span class="string">&#x27;Salary&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>] * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除列</span></span><br><span class="line">df = df.drop(<span class="string">&#x27;City&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;Age&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组和聚合</span></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;City&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].mean() <span class="comment"># 按 City 分组，计算 Age 的平均值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 透视表</span></span><br><span class="line">pivot_table = pd.pivot_table(df, values=<span class="string">&#x27;Age&#x27;</span>, index=<span class="string">&#x27;City&#x27;</span>, columns=<span class="string">&#x27;Name&#x27;</span>, aggfunc=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用自定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categorize_age</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Young&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> age &lt; <span class="number">35</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Adult&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Senior&#x27;</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;AgeCategory&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>].apply(categorize_age)</span><br></pre></td></tr></table></figure></li><li><p><strong>数据合并&#x2F;连接：</strong></p><ul><li><code>concat()</code>：沿轴连接 Pandas 对象</li><li><code>merge()</code>：类似于 SQL 的 JOIN 操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concat</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">5</span>, <span class="number">6</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="number">7</span>, <span class="number">8</span>]&#125;)</span><br><span class="line">df = pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;ID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;ID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], <span class="string">&#x27;Salary&#x27;</span>: [<span class="number">50000</span>, <span class="number">60000</span>, <span class="number">70000</span>]&#125;)</span><br><span class="line">df = pd.merge(df1, df2, on=<span class="string">&#x27;ID&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 左连接</span></span><br></pre></td></tr></table></figure></li><li><p><strong>时间序列分析：</strong></p><ul><li>Pandas 对时间序列数据有很好的支持。</li><li>可以创建时间序列索引，进行时间序列的切片、重采样、移动窗口统计等操作。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建时间序列</span></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;2023-01-01&#x27;</span>, periods=<span class="number">10</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">ts = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>), index=dates)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重采样</span></span><br><span class="line">ts.resample(<span class="string">&#x27;W&#x27;</span>).<span class="built_in">sum</span>() <span class="comment"># 按周重采样，计算每周的总和</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>Pandas 的优势：</strong></p><ul><li><strong>易于使用：</strong> Pandas 提供了简洁直观的 API，使得数据处理变得容易。</li><li><strong>高性能：</strong> Pandas 基于 NumPy 构建，底层使用 C 语言实现，因此具有很高的性能。</li><li><strong>功能强大：</strong> Pandas 提供了丰富的功能，可以满足各种数据分析和处理需求。</li><li><strong>与其他库集成：</strong> Pandas 可以与 NumPy、Matplotlib、Scikit-learn 等其他 Python 库无缝集成。</li></ul><p><strong>学习 Pandas 的建议：</strong></p><ul><li>从 Pandas 的官方文档开始：<a href="https://pandas.pydata.org/docs/">https://pandas.pydata.org/docs/</a></li><li>学习 Pandas 的核心数据结构：Series 和 DataFrame。</li><li>掌握 Pandas 的主要功能：数据导入&#x2F;导出、数据清洗、数据选择和过滤、数据转换、数据合并&#x2F;连接、时间序列分析。</li><li>多做练习，通过实际项目来巩固所学知识。</li></ul><p>Pandas 是数据科学领域中不可或缺的工具。 掌握 Pandas 可以让你更高效地处理和分析数据，从而做出更好的决策。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#x2F;Pandas 是一个强大的 Python 数据分析和处理库。它提供了快速、灵活和富有表现力的数据结构，旨在使处理结构化（表格化、多维数组、时间序列）和非结构化数据变得简单直观。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pandas 的核心数据结构：&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="数据分析" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第二章：Numpy的使用</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9ANumpy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9ANumpy%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2025-05-12T13:38:36.000Z</published>
    <updated>2025-05-12T13:39:55.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="numpy简介"><a href="#numpy简介" class="headerlink" title="numpy简介"></a>numpy简介</h2><p>NumPy（Numerical Python的简称）是 Python 中用于科学计算的一个基础库。它提供了一个强大的 N维数组对象 <code>ndarray</code>，以及用于处理这些数组的各种函数。</p><p>以下是 NumPy 的一些关键特性和功能：</p><ul><li><strong>ndarray (N-dimensional Array Object):</strong> NumPy 的核心是 <code>ndarray</code> 对象，它是一个多维数组，其中的所有元素都具有相同的数据类型。这使得 NumPy 能够高效地存储和操作大量数据。</li><li><strong>矢量化操作：</strong> NumPy 允许你对整个数组执行操作，而无需编写显式的循环。这被称为矢量化，它可以显著提高代码的执行速度。</li><li><strong>广播 (Broadcasting):</strong> NumPy 具有广播功能，允许你在不同形状的数组之间执行操作。例如，你可以将一个标量值加到一个数组的所有元素上。</li><li><strong>数学函数：</strong> NumPy 提供了大量的数学函数，包括三角函数、指数函数、对数函数等，可以用于数组的元素级运算。</li><li><strong>线性代数：</strong> NumPy 包含用于线性代数运算的模块，例如矩阵乘法、求逆、特征值分解等。</li><li><strong>随机数生成：</strong> NumPy 提供了生成各种随机数的函数，可以用于模拟、统计分析等领域。</li><li><strong>傅里叶变换：</strong> NumPy 包含用于执行傅里叶变换的模块，这在信号处理和其他科学领域中非常有用。</li><li><strong>易于与其他语言集成：</strong> NumPy 可以很容易地与用 C、C++ 或 Fortran 编写的代码集成，这使得它成为构建高性能科学计算工具的理想选择。</li></ul><p>总的来说，NumPy 是 Python 中进行数值计算、科学计算和数据分析的重要工具。它的高效数组操作、丰富的数学函数和与其他语言的集成能力，使得它成为许多科学计算库（如 SciPy、Pandas 和 Scikit-learn）的基础。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入numpy库，用于后续创建和操作数组  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个numpy数组t1，包含1到5的整数  </span></span><br><span class="line">t1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 输出数组t1的内容  </span></span><br><span class="line"><span class="built_in">print</span>(t1)  </span><br><span class="line"><span class="comment"># 输出数组t1的数据类型  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个numpy数组t2，包含0到9的整数  </span></span><br><span class="line">t2 = np.array(<span class="built_in">range</span>(<span class="number">10</span>))  </span><br><span class="line"><span class="built_in">print</span>(t2)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用arange函数创建一个numpy数组t3，包含0到9的整数  </span></span><br><span class="line">t3 = np.arange(<span class="number">10</span>)  </span><br><span class="line"><span class="built_in">print</span>(t3)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用arange函数创建一个numpy数组t4，包含1到9的奇数  </span></span><br><span class="line">t4 = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(t4)  </span><br><span class="line"><span class="comment"># 输出数组t4的数据类型  </span></span><br><span class="line"><span class="built_in">print</span>(t4.dtype)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用arange函数创建一个numpy数组t5，包含1到9的奇数，数据类型指定为float32  </span></span><br><span class="line">t5 = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>, dtype=np.float32)  </span><br><span class="line"><span class="built_in">print</span>(t5)  </span><br><span class="line"><span class="built_in">print</span>(t5.dtype)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">t7=t4.astype(<span class="string">&quot;int8&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(t7)  </span><br><span class="line"><span class="built_in">print</span>(t7.dtype)  </span><br><span class="line">  </span><br><span class="line">t8=np.<span class="built_in">round</span>(t5,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(t8)  </span><br><span class="line"><span class="built_in">print</span>(t8.dtype)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/264LbWv.png"></p><h2 id="numpy创建数组-矩阵"><a href="#numpy创建数组-矩阵" class="headerlink" title="numpy创建数组(矩阵)"></a>numpy创建数组(矩阵)</h2><h3 id="numpy重常见的数据类型"><a href="#numpy重常见的数据类型" class="headerlink" title="numpy重常见的数据类型"></a>numpy重常见的数据类型</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>类型代码</strong></td><td><strong>说明</strong></td></tr><tr><td>int8, uint8</td><td>i1, u1</td><td>有符号和无符号的8位 (1个字节) 整型</td></tr><tr><td>int16, uint16</td><td>i2, u2</td><td>有符号和无符号的16位 (2个字节) 整型</td></tr><tr><td>int32, uint32</td><td>i4, u4</td><td>有符号和无符号的32位 (4个字节) 整型</td></tr><tr><td>int64, uint64</td><td>i8, u8</td><td>有符号和无符号的64位 (8个字节) 整型</td></tr><tr><td>float16</td><td>f2</td><td>半精度浮点数</td></tr><tr><td>float32</td><td>f4或f</td><td>标准的单精度浮点数。1与C的float兼容</td></tr><tr><td>float64</td><td>f8或d</td><td>标准的双精度浮点数。与C的double和Python的float对象兼容</td></tr><tr><td>float128</td><td>f16或g</td><td>扩展精度浮点数</td></tr><tr><td>complex64, complex128, complex256</td><td>c8, c16, c32</td><td>分别用两个32位2、64位或128位浮点数表示的复数</td></tr><tr><td>bool</td><td>?</td><td>存储True和Fa3lse值的布尔类型</td></tr></tbody></table><h3 id="广播原则"><a href="#广播原则" class="headerlink" title="广播原则"></a>广播原则</h3><p>NumPy 的广播 (broadcasting) 是一种强大的机制，允许 NumPy 在执行算术运算时处理不同形状的数组。广播解决了在数组形状不完全匹配时如何进行元素级运算的问题。</p><p>以下是 NumPy 广播需要遵循的规则：</p><ol><li><strong>维度对齐：</strong> NumPy 会比较两个数组的形状。从 trailing dimension（即最后一个轴）开始比较，并向后进行。</li><li><strong>兼容性检查：</strong> 对于两个数组的每个维度，它们必须满足以下条件之一才能兼容：<ul><li>维度大小相等。</li><li>其中一个维度的大小为 1。</li></ul></li><li><strong>广播执行：</strong> 如果满足上述兼容性条件，NumPy 会“广播”维度大小为 1 的数组，使其与另一个数组的对应维度大小相匹配。这个过程不会复制数据，而是在逻辑上扩展数组，使其具有相同的形状。</li><li><strong>输出形状：</strong> 最终输出数组的形状是输入数组形状的元素级最大值。也就是说，输出数组的每个维度的大小是输入数组在该维度上的最大大小。</li></ol><p>如果这些规则不满足，NumPy 将抛出一个 <code>ValueError</code>，表明数组的形状不兼容。</p><p><strong>举例说明：</strong></p><p>假设有两个数组 <code>A</code> 和 <code>B</code>：</p><ul><li><code>A</code> 的形状是 <code>(4, 3)</code></li><li><code>B</code> 的形状是 <code>(3,)</code></li></ul><p>在这种情况下，NumPy 会将 <code>B</code> 广播到形状 <code>(4, 3)</code>，然后执行元素级加法。<code>B</code> 实际上并没有被复制 4 次，而是在计算过程中被逻辑地扩展。</p><p>另一个例子：</p><ul><li><code>A</code> 的形状是 <code>(4, 1)</code></li><li><code>B</code> 的形状是 <code>(1, 3)</code></li></ul><p>NumPy 可以将 <code>A</code> 广播到形状 <code>(4, 3)</code>，并将 <code>B</code> 也广播到形状 <code>(4, 3)</code>，然后执行运算。</p><p><strong>总结：</strong></p><p>广播允许 NumPy 在形状不完全匹配的数组之间执行有意义的运算，而无需显式地重塑数组。这使得代码更简洁、更易读，并且通常更高效。理解广播规则对于有效地使用 NumPy 至关重要。</p><p><img src="https://i.imgur.com/zkvBblG.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入numpy库，用于后续的数组操作  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个一维数组t1，包含0到11的整数  </span></span><br><span class="line">t1 = np.arange(<span class="number">12</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t1数组的形状，此处为一维数组  </span></span><br><span class="line"><span class="built_in">print</span>(t1.shape)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t1数组的内容  </span></span><br><span class="line"><span class="built_in">print</span>(t1)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 对t1数组进行形状重塑，转换为3行4列的二维数组，但此处未将重塑后的数组赋值给t1，因此t1的形状不会改变  </span></span><br><span class="line">t2=t1.reshape(<span class="number">3</span>, <span class="number">4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印重塑后的数组，展示3行4列的二维数组形式  </span></span><br><span class="line"><span class="built_in">print</span>(t1.reshape(<span class="number">3</span>, <span class="number">4</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建并打印一个三维数组t5，包含24个元素，形状为2x3x4  </span></span><br><span class="line">t5 = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(t5)  </span><br><span class="line"><span class="built_in">print</span>(t5+<span class="number">2</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建并打印一个形状为24x1的二维数组t6，包含0到23的整数  </span></span><br><span class="line">t6=np.arange(<span class="number">24</span>).reshape(<span class="number">24</span>,<span class="number">1</span>)  </span><br><span class="line"><span class="built_in">print</span>(t6)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将t2数组重塑为一维数组，展示如何通过计算动态确定数组形状  </span></span><br><span class="line">t7=t2.reshape((t2.shape[<span class="number">0</span>]*t2.shape[<span class="number">1</span>],))  </span><br><span class="line"><span class="built_in">print</span>(t7)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t2数组的平铺版本，每个元素增加2，展示数组的flatten方法和元素级运算  </span></span><br><span class="line"><span class="built_in">print</span>(t2.flatten()+<span class="number">2</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建并打印数组t8，形状为3x4，包含64到75的整数，展示如何创建指定范围和形状的数组  </span></span><br><span class="line">t8=np.arange(<span class="number">64</span>,<span class="number">76</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t2和t8数组的元素级乘积，展示数组间的元素级运算  </span></span><br><span class="line"><span class="built_in">print</span>(t2*t8)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建并打印一个包含0到3的整数的一维数组t9  </span></span><br><span class="line">t9=np.arange(<span class="number">4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将t9数组重塑为4x1的二维数组，展示如何改变数组的形状  </span></span><br><span class="line">t10=t9.reshape(<span class="number">4</span>,<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t2和t9数组的元素级乘积，由于t9是一维数组，展示广播机制  </span></span><br><span class="line"><span class="built_in">print</span>(t2*t9)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印t2和t10数组的元素级乘积，由于t10是二维数组，避免了广播  </span></span><br><span class="line"><span class="built_in">print</span>(t2*t10)</span><br></pre></td></tr></table></figure><h2 id="numpy的轴"><a href="#numpy的轴" class="headerlink" title="numpy的轴"></a>numpy的轴</h2><p>在 NumPy 中，“轴”（axis）是多维数组（<code>ndarray</code>）的一个重要概念，它用于描述数组的维度。理解轴的概念对于正确地操作和处理 NumPy 数组至关重要。</p><p><strong>基本概念：</strong></p><ul><li><strong>维度 (Dimension):</strong> 数组的维度是指数组拥有的轴的数量。例如，一个二维数组有两个维度（行和列），一个三维数组有三个维度，以此类推。</li><li><strong>轴 (Axis):</strong> 每个维度对应一个轴。轴的编号从 0 开始。对于一个二维数组，轴 0 通常代表行，轴 1 代表列。对于更高维度的数组，轴的编号依次递增。</li><li><strong>形状 (Shape):</strong> 数组的形状是一个元组，其中包含每个轴的长度（即该轴上的元素数量）。例如，一个形状为 <code>(3, 4)</code> 的二维数组有 3 行和 4 列。</li></ul><p><strong>轴的含义：</strong></p><p>轴的概念主要用于描述 NumPy 中各种操作的方向。例如，在对数组进行求和、平均值、排序等操作时，可以指定沿着哪个轴进行操作。</p><ul><li><strong>二维数组：</strong><ul><li><code>axis=0</code>：沿着行的方向进行操作（即对每一列进行操作）。</li><li><code>axis=1</code>：沿着列的方向进行操作（即对每一行进行操作）。</li></ul></li><li><strong>三维数组：</strong><ul><li><code>axis=0</code>：沿着第一个维度的方向进行操作。</li><li><code>axis=1</code>：沿着第二个维度的方向进行操作。</li><li><code>axis=2</code>：沿着第三个维度的方向进行操作。</li></ul></li></ul><p><strong>举例说明：</strong></p><p>假设有一个二维数组 <code>arr</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><ul><li><code>arr.sum(axis=0)</code>：沿着轴 0（行）求和，结果是 <code>[5, 7, 9]</code> (1+4, 2+5, 3+6)。</li><li><code>arr.sum(axis=1)</code>：沿着轴 1（列）求和，结果是 <code>[6, 15]</code> (1+2+3, 4+5+6)。</li></ul><p><strong>总结：</strong></p><p>理解 NumPy 中轴的概念是进行有效数组操作的关键。通过指定轴，你可以控制 NumPy 函数在哪个维度上执行操作，从而实现各种复杂的计算和数据处理任务。记住，轴的编号从 0 开始，并且轴的方向决定了操作的执行方式。</p><h2 id="numpy的索引和切片"><a href="#numpy的索引和切片" class="headerlink" title="numpy的索引和切片"></a>numpy的索引和切片</h2><p><strong>核心概念：</strong> NumPy 数组的索引和切片操作与 Python 列表的操作非常相似，但更加强大和灵活，尤其是在处理多维数组时。</p><p><strong>基本索引 (获取单个元素)：</strong></p><ul><li><code>a[行索引, 列索引]</code>：用于获取二维 NumPy 数组中的单个元素。<ul><li>例如，对于数组 <code>a = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]</code>：<ul><li><code>a[1]</code>：获取索引为 1 的<strong>行</strong>，结果是 <code>[4, 5, 6, 7]</code>。</li><li><code>a[0, 2]</code>：获取索引为 0 的<strong>行</strong>和索引为 2 的<strong>列</strong>的元素，结果是 <code>2</code>。</li><li><code>a[2, 0]</code>：获取索引为 2 的<strong>行</strong>和索引为 0 的<strong>列</strong>的元素，结果是 <code>8</code>。</li></ul></li></ul></li></ul><p><strong>基本切片 (获取子数组)：</strong></p><ul><li><code>a[start_row:end_row, start_col:end_col]</code>：用于获取二维 NumPy 数组的子数组。<ul><li><code>start</code>：起始索引（包含）。</li><li><code>end</code>：结束索引（不包含）。</li><li>省略 <code>start</code> 表示从头开始，省略 <code>end</code> 表示到末尾。</li><li>冒号 <code>:</code> 表示选择整个维度。</li></ul></li></ul><p><strong>示例：</strong></p><ul><li><p><strong>获取一行：</strong></p><ul><li><code>a[1]</code> 或 <code>a[1, :]</code>：获取索引为 1 的<strong>一行</strong>，结果是 <code>[4, 5, 6, 7]</code>。</li><li><code>a[:, 2]</code>：获取所有行的索引为 2 的<strong>一列</strong>，结果是 <code>[2, 6, 10]</code>。</li></ul></li><li><p><strong>获取多行：</strong></p><ul><li><code>a[1:3]</code> 或 <code>a[1:3, :]</code>：获取索引从 1 到 2 的<strong>多行</strong>，结果是 <code>[[4, 5, 6, 7], [8, 9, 10, 11]]</code>。</li></ul></li><li><p><strong>获取多列：</strong></p><ul><li><code>a[:, 2:4]</code>：获取所有行的索引从 2 到 3 的<strong>多列</strong>，结果是 <code>[[2, 3], [6, 7], [10, 11]]</code>。</li></ul></li><li><p><strong>同时获取多行和多列：</strong></p><ul><li><code>a[1:3, 2:4]</code>：获取索引从 1 到 2 的<strong>行</strong>和索引从 2 到 3 的<strong>列</strong>的子数组，结果是 <code>[[6, 7], [10, 11]]</code>。</li></ul></li></ul><p><strong>步长 (stride) 切片：</strong></p><ul><li><code>a[start:end:step]</code>：可以在切片中指定步长。<ul><li><code>step</code>：步长，表示每隔多少个元素选择一个。</li></ul></li></ul><p><strong>示例 (根据图片中的问题)：</strong></p><ul><li><p><code>a[[1, 3], :]</code>：<strong>（注意：图片中是 <code>a[[1, 3], :]</code>，这实际上是使用花式索引选择行索引为 1 和 3 的行。假设数组 <code>a</code> 至少有 4 行）</strong> 表示选择索引为 1 和 3 的<strong>行</strong>的所有列。</p></li><li><p><code>a[:, 2:4]</code>：表示选择所有<strong>行</strong>的索引从 2 到 3 的<strong>列</strong>。</p></li></ul><p><strong>总结：</strong></p><p>NumPy 的索引和切片功能非常强大，能够灵活地访问和操作数组中的元素和子数组。理解基本的索引和切片语法，以及如何应用于多维数组，是使用 NumPy 进行数据分析的关键。步长切片和花式索引提供了更高级的元素选择方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个包含24个元素的数组，并将其重塑为6行4列的二维数组  </span></span><br><span class="line">t1=np.arange(<span class="number">24</span>).reshape(<span class="number">6</span>,<span class="number">4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印第二行的全部元素  </span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">1</span>])  </span><br><span class="line"><span class="comment"># 打印第二行的全部元素，效果与上一行相同  </span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">1</span>,:])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印前两行的所有元素  </span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">0</span>:<span class="number">2</span>,:])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印所有行的前两列元素  </span></span><br><span class="line"><span class="built_in">print</span>(t1[:,<span class="number">0</span>:<span class="number">2</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印整个数组  </span></span><br><span class="line"><span class="built_in">print</span>(t1)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印第3行到第4行和第2列到第3列的子数组  </span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">2</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">3</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印第2行和第4行的所有元素  </span></span><br><span class="line"><span class="built_in">print</span>(t1[[<span class="number">1</span>,<span class="number">3</span>],:])</span><br></pre></td></tr></table></figure><p>其他操作</p><h3 id="numpy的布尔索引"><a href="#numpy的布尔索引" class="headerlink" title="numpy的布尔索引"></a>numpy的布尔索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印t1数组中索引为1和3的行以及所有列  </span></span><br><span class="line"><span class="built_in">print</span>(t1[[<span class="number">1</span>,<span class="number">3</span>],:])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印一个布尔数组，显示t1数组中每个元素是否小于10  </span></span><br><span class="line"><span class="built_in">print</span>(t1&lt;<span class="number">10</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将t1数组中所有小于10的元素设置为3  </span></span><br><span class="line">t1[t1&lt;<span class="number">10</span>]=<span class="number">3</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印更新后的t1数组  </span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ATrZ5PC.png"></p><h3 id="numpy的三元运算符"><a href="#numpy的三元运算符" class="headerlink" title="numpy的三元运算符"></a>numpy的三元运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印t1数组中元素是否小于10的结果：如果元素小于10，则对应位置输出3；否则输出20</span></span><br><span class="line"><span class="built_in">print</span>(np.where(t1&lt;<span class="number">10</span>,<span class="number">3</span>,<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新t1数组，条件同上</span></span><br><span class="line">t1=np.where(t1&lt;<span class="number">10</span>,<span class="number">3</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印更新后的t1数组</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/foBtTfx.png"></p><h2 id="numpy中的nan和inf"><a href="#numpy中的nan和inf" class="headerlink" title="numpy中的nan和inf"></a>numpy中的nan和inf</h2><h3 id="nan（NAN、Nan）"><a href="#nan（NAN、Nan）" class="headerlink" title="nan（NAN、Nan）"></a><code>nan</code>（<code>NAN</code>、<code>Nan</code>）</h3><ul><li><code>not a number</code>，表示不是一个数字。</li><li><strong>在<code>numpy</code>中出现<code>nan</code>的情况</strong>：<ul><li>读取本地文件为<code>float</code>类型时，若存在缺失值，会出现<code>nan</code>。</li><li>进行不合适的计算时，比如无穷大（<code>inf</code>）减去无穷大。</li></ul></li></ul><h3 id="inf（-inf、inf）"><a href="#inf（-inf、inf）" class="headerlink" title="inf（-inf、inf）"></a><code>inf</code>（<code>-inf</code>、<code>inf</code>）</h3><ul><li><code>infinity</code>，<code>inf</code>表示正无穷，<code>-inf</code>表示负无穷。</li><li><strong>在<code>numpy</code>中出现<code>inf</code>（包括<code>-inf</code>，<code>+inf</code> ）的情况</strong>：<br>  例如一个数字除以 0 ，在<code>python</code>中直接报错，在<code>numpy</code>中会得到一个<code>inf</code>或者<code>-inf</code>。</li></ul><h4 id="指定nan或inf及类型"><a href="#指定nan或inf及类型" class="headerlink" title="指定nan或inf及类型"></a>指定<code>nan</code>或<code>inf</code>及类型</h4><ul><li><strong>指定方法</strong>：在<code>numpy</code>中可使用<code>np.inf</code>指定无穷大，使用<code>np.nan</code>指定非数字。</li><li><strong>类型</strong>：<ul><li><code>In [71]: a = np.inf</code></li><li><code>In [73]: type(a)</code></li><li><code>Out[73]: float</code></li><li><code>In [74]: a = np.nan</code></li><li><code>In [75]: type(a)</code></li><li><code>Out[75]: float</code></li></ul></li></ul><h4 id="nan-的特性及相关操作"><a href="#nan-的特性及相关操作" class="headerlink" title="nan 的特性及相关操作"></a><code>nan</code> 的特性及相关操作</h4><ol><li><strong><code>nan</code> 的不等性</strong><ul><li>两个 <code>nan</code> 是不相等的。示例：<ul><li><code>In [76]: np.nan==np.nan</code></li><li><code>Out[76]: False</code></li></ul></li><li><code>np.nan!=np.nan</code> 结果为 <code>True</code> 。示例：<ul><li><code>In [81]: np.nan!=np.nan</code></li><li><code>Out[81]: True</code></li></ul></li></ul></li><li><strong>判断数组中 <code>nan</code> 的个数</strong><br> 利用 <code>nan</code> 不等于自身的特性，使用 <code>np.count_nonzero()</code> 函数。示例：<ul><li><code>In [86]: t</code></li><li><code>Out[86]: array([ 1., 2., nan])</code></li><li><code>In [87]: np.count_nonzero(t!=t)</code></li><li><code>Out[87]: 1</code></li></ul></li><li><strong>判断单个数字是否为 <code>nan</code></strong><br> 通过 <code>np.isnan(a)</code> 来判断，返回 <code>bool</code> 类型。若要将数组中的 <code>nan</code> 替换为 <code>0</code> ，示例如下：<ul><li><code>In [89]: t</code></li><li><code>Out[89]: array([ 1., 2., nan])</code></li><li><code>In [90]: t[np.isnan(t)]=0</code></li><li><code>In [91]: t</code></li><li><code>Out[91]: array([ 1., 2., 0.])</code></li></ul></li><li><strong><code>nan</code> 的计算特性</strong><br> <code>nan</code> 和任何值计算结果都为 <code>nan</code> 。</li></ol><h2 id="numpy中的常见统计方法"><a href="#numpy中的常见统计方法" class="headerlink" title="numpy中的常见统计方法"></a>numpy中的常见统计方法</h2><ol><li><strong>求和</strong>：<code>t.sum(axis=None)</code></li><li><strong>均值</strong>：<code>t.mean(axis=None)</code> ，受离群点影响较大。</li><li><strong>中值</strong>：<code>np.median(t,axis=None)</code></li><li><strong>最大值</strong>：<code>t.max(axis=None)</code></li><li><strong>最小值</strong>：<code>t.min(axis=None)</code></li><li><strong>极值</strong>：<code>np.ptp(t,axis=None)</code> ，即最大值和最小值只差。</li><li><strong>标准差</strong>：<code>t.std(axis=None)</code> ，公式为 $σ &#x3D; \sqrt{\frac{1}{N}\sum_{i&#x3D;1}^{N}(x_i - μ)^2}$ ，是一组数据平均值分散程度的一种度量。较大标准差代表大部分数值与其平均值差异大；较小标准差代表数值较接近平均值，反映数据波动稳定情况，越大表示波动越大、越不稳定。</li></ol><h3 id="nan（NAN、Nan）-1"><a href="#nan（NAN、Nan）-1" class="headerlink" title="nan（NAN、Nan）"></a>nan（NAN、Nan）</h3><ul><li><strong>含义</strong>：not a number，表示不是一个数字</li><li><strong>在 numpy 中出现的情况</strong>：<ul><li>读取本地文件为 float 时，若有缺失值，会出现 nan</li><li>进行不合适的计算时，如无穷大（inf）减去无穷大</li></ul></li></ul><h3 id="inf（-inf、inf）-1"><a href="#inf（-inf、inf）-1" class="headerlink" title="inf（-inf、inf）"></a>inf（-inf、inf）</h3><ul><li><strong>含义</strong>：infinity，inf 表示正无穷，-inf 表示负无穷</li><li><strong>在 numpy 中出现的情况</strong>：例如一个数字除以 0 （在 python 中直接报错，在 numpy 中得到 inf 或 -inf ）</li></ul><h3 id="指定方法及类型"><a href="#指定方法及类型" class="headerlink" title="指定方法及类型"></a>指定方法及类型</h3><ul><li><strong>指定方法</strong>：<ul><li>使用<code>np.inf</code>指定无穷大（正无穷）</li><li>使用<code>np.nan</code>指定非数字</li></ul></li><li><strong>类型</strong>：<ul><li><code>type(np.inf)</code> 结果为 float</li><li><code>type(np.nan)</code> 结果为 float</li></ul></li></ul><h3 id="关于-numpy-中-nan-处理的要点总结"><a href="#关于-numpy-中-nan-处理的要点总结" class="headerlink" title="关于 numpy 中 nan 处理的要点总结"></a>关于 numpy 中 nan 处理的要点总结</h3><ul><li><strong>单纯替换为 0 的影响</strong>：在一组数据中单纯把 nan 替换为 0 不合适。若原始数据均值大于 0 ，全部替换为 0 后均值会变小 ，改变数据的统计特征。</li><li><strong>更优处理方式</strong>：<ul><li><strong>填充法</strong>：用均值或中值替换缺失数值。均值是数据总和除以数据个数；中值是将数据排序后，位于中间位置的数值（数据个数为奇数时）或中间两个数的平均值（数据个数为偶数时） 。</li><li><strong>删除法</strong>：直接删除有缺失值的行（列），在 pandas 中可进行相关操作。</li></ul></li></ul><h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">180</span>]: t = np.arange (<span class="number">12</span>,<span class="number">24</span>).reshape (<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line">In [<span class="number">181</span>]: t  </span><br><span class="line">Out [<span class="number">181</span>]:  </span><br><span class="line">array ([[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],  </span><br><span class="line">[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],  </span><br><span class="line">[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])  </span><br><span class="line">In [<span class="number">182</span>]: t [[<span class="number">1</span>,<span class="number">2</span>],:] = t [[<span class="number">2</span>,<span class="number">1</span>],:] <span class="comment">#行交换  </span></span><br><span class="line">In [<span class="number">183</span>]: t  </span><br><span class="line">Out [<span class="number">183</span>]:  </span><br><span class="line">array ([[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],  </span><br><span class="line">[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],  </span><br><span class="line">[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])  </span><br><span class="line">In [<span class="number">184</span>]: t [:,[<span class="number">0</span>,<span class="number">2</span>]] = t [:,[<span class="number">2</span>,<span class="number">0</span>]] <span class="comment">#列交换  </span></span><br><span class="line">In [<span class="number">185</span>]: t  </span><br><span class="line">Out [<span class="number">185</span>]:  </span><br><span class="line">array ([[<span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">15</span>],  </span><br><span class="line">[<span class="number">22</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">23</span>],  </span><br><span class="line">[<span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/TheisTrue/DataAnalysis%E8%B5%84%E6%96%99">https://github.com/TheisTrue/DataAnalysis资料</a></p><p>实例<br><img src="https://i.imgur.com/gFhPptd.png"><br><img src="https://i.imgur.com/zABRVU1.png"></p><h3 id="numpy-生成随机数"><a href="#numpy-生成随机数" class="headerlink" title="numpy 生成随机数"></a>numpy 生成随机数</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>.rand(d0,d1,...dn)</code></td><td>创建 d0 - dn 维度的均匀分布随机数组，元素为浮点数，范围 0 - 1</td></tr><tr><td><code>.randn(d0,d1,...dn)</code></td><td>创建 d0 - dn 维度的标准正态分布随机数，元素为浮点数，平均数 0，标准差 1</td></tr><tr><td><code>.randint(low,high,(shape))</code></td><td>从给定上下限范围（low - high）选取随机整数，数组形状由 shape 指定</td></tr><tr><td><code>.uniform(low,high,(size))</code></td><td>产生具有均匀分布的数组，low 为起始值，high 为结束值，size 指定形状</td></tr><tr><td><code>.normal(loc,scale,(size))</code></td><td>从指定正态分布中随机抽取样本，分布中心为 loc（均值），标准差为 scale，size 指定形状</td></tr><tr><td><code>.seed(s)</code></td><td>随机数种子，s 为给定种子值。计算机生成伪随机数，设定相同种子可每次生成相同随机数</td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义美国youtube视频数据文件路径</span></span><br><span class="line">us_file_path = <span class="string">&quot;./youtube_video_data/US_video_data_numbers.csv&quot;</span></span><br><span class="line"><span class="comment"># 定义英国youtube视频数据文件路径</span></span><br><span class="line">uk_file_path = <span class="string">&quot;./youtube_video_data/GB_video_data_numbers.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用loadtxt读取美国youtube视频数据，delimiter指定分隔符为逗号，dtype指定数据类型为整数</span></span><br><span class="line"><span class="comment"># unpack=True会将数据进行转置，这里注释掉了，所以不转置</span></span><br><span class="line"><span class="comment"># t1 = np.loadtxt(us_file_path,delimiter=&quot;,&quot;,dtype=&quot;int&quot;,unpack=True)</span></span><br><span class="line">t2 = np.loadtxt(us_file_path,delimiter=<span class="string">&quot;,&quot;</span>,dtype=<span class="string">&quot;int&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印t1，这里注释掉了</span></span><br><span class="line"><span class="comment"># print(t1)</span></span><br><span class="line"><span class="comment"># 打印t2，t2是读取的美国youtube视频数据</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取行</span></span><br><span class="line"><span class="comment"># 打印t2的第3行（索引为2）</span></span><br><span class="line"><span class="comment"># print(t2[2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取连续的多行</span></span><br><span class="line"><span class="comment"># 打印t2的第3行到最后一行（索引为2到结尾）</span></span><br><span class="line"><span class="comment"># print(t2[2:])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取不连续的多行</span></span><br><span class="line"><span class="comment"># 打印t2的第3行、第9行和第11行（索引为2, 8, 10）</span></span><br><span class="line"><span class="comment"># print(t2[[2,8,10]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印t2的第2行（索引为1）的所有列</span></span><br><span class="line"><span class="comment"># print(t2[1,:])</span></span><br><span class="line"><span class="comment"># 打印t2的第3行到最后一行（索引为2到结尾）的所有列</span></span><br><span class="line"><span class="comment"># print(t2[2:,:])</span></span><br><span class="line"><span class="comment"># 打印t2的第3行、第11行和第4行（索引为2, 10, 3）的所有列</span></span><br><span class="line"><span class="comment"># print(t2[[2,10,3],:])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取列</span></span><br><span class="line"><span class="comment"># 打印t2的第一列（索引为0）的所有行</span></span><br><span class="line"><span class="comment"># print(t2[:,0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取连续的多列</span></span><br><span class="line"><span class="comment"># 打印t2的第3列到最后一列（索引为2到结尾）的所有行</span></span><br><span class="line"><span class="comment"># print(t2[:,2:])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取不连续的多列</span></span><br><span class="line"><span class="comment"># 打印t2的第一列和第三列（索引为0, 2）的所有行</span></span><br><span class="line"><span class="comment"># print(t2[:,[0,2]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去行和列，取第3行，第四列的值</span></span><br><span class="line"><span class="comment"># a = t2[2,3]</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># print(type(a))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取多行和多列，取第3行到第五行，第2列到第4列的结果</span></span><br><span class="line"><span class="comment"># 去的是行和列交叉点的位置</span></span><br><span class="line">b = t2[<span class="number">2</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment"># print(b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取多个不相邻的点</span></span><br><span class="line"><span class="comment"># 选出来的结果是（0，0） （2，1） （2，3）</span></span><br><span class="line">c = t2[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding for</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line">  </span><br><span class="line">us_file_path = <span class="string">&quot;./youtube_video_data/US_video_data_numbers.csv&quot;</span>  </span><br><span class="line">uk_file_path = <span class="string">&quot;./youtube_video_data/GB_video_data_numbers.csv&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># t1 = np.loadtxt(us_file_path,delimiter=&quot;,&quot;,dtype=&quot;int&quot;,unpack=True)</span></span><br><span class="line"><span class="comment"># 使用 numpy 加载美国 youtube 视频数据，数据类型为 int</span></span><br><span class="line">t_us = np.loadtxt(us_file_path,delimiter=<span class="string">&quot;,&quot;</span>,dtype=<span class="string">&quot;int&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从加载的数据中提取评论数（最后一列）</span></span><br><span class="line">t_us_comments= t_us[:,-<span class="number">1</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 过滤评论数，只保留小于等于 5000 的数据，去除异常值</span></span><br><span class="line">t_us_comments = t_us_comments[t_us_comments&lt;=<span class="number">5000</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印过滤后的评论数的最大值和最小值</span></span><br><span class="line"><span class="built_in">print</span>(t_us_comments.<span class="built_in">max</span>(),t_us_comments.<span class="built_in">min</span>())  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义组距为 250</span></span><br><span class="line">d=<span class="number">250</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 计算组数，用最大值减去最小值，然后除以组距</span></span><br><span class="line">bin_nums =(t_us_comments.<span class="built_in">max</span>()-t_us_comments.<span class="built_in">min</span>())//d  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个图形，设置大小和分辨率</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绘制直方图，使用过滤后的评论数数据和计算出的组数</span></span><br><span class="line">plt.hist(t_us_comments,bin_nums)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/XZ5nUf0.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding for  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义美国视频数据文件的路径</span></span><br><span class="line">us_file_path = <span class="string">&quot;./youtube_video_data/US_video_data_numbers.csv&quot;</span></span><br><span class="line"><span class="comment"># 定义英国视频数据文件的路径</span></span><br><span class="line">uk_file_path = <span class="string">&quot;./youtube_video_data/GB_video_data_numbers.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 numpy 的 loadtxt 函数加载英国视频数据，指定分隔符为逗号，数据类型为整数</span></span><br><span class="line"><span class="comment"># t_uk 是一个 numpy 数组，每一行代表一个视频的数据</span></span><br><span class="line">t_uk = np.loadtxt(uk_file_path, delimiter=<span class="string">&quot;,&quot;</span>, dtype=<span class="string">&quot;int&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤数据：只保留点赞数小于等于 500000 的视频数据</span></span><br><span class="line"><span class="comment"># t_uk[:, 1] 表示 t_uk 数组的所有行的第二列（点赞数）</span></span><br><span class="line"><span class="comment"># t_uk[t_uk[:, 1] &lt;= 500000] 表示选取 t_uk 数组中第二列小于等于 500000 的所有行</span></span><br><span class="line">t_uk = t_uk[t_uk[:, <span class="number">1</span>] &lt;= <span class="number">500000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从过滤后的数据中提取评论数和点赞数</span></span><br><span class="line"><span class="comment"># t_uk[:, -1] 表示 t_uk 数组的所有行的最后一列（评论数）</span></span><br><span class="line">t_uk_comments = t_uk[:, -<span class="number">1</span>]</span><br><span class="line"><span class="comment"># t_uk[:, 1] 表示 t_uk 数组的所有行的第二列（点赞数）</span></span><br><span class="line">t_uk_like = t_uk[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个图形，并设置大小和分辨率</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建散点图，x 轴为点赞数，y 轴为评论数</span></span><br><span class="line">plt.scatter(t_uk_like, t_uk_comments)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1uGzzex.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;numpy简介&quot;&gt;&lt;a href=&quot;#numpy简介&quot; class=&quot;headerlink&quot; title=&quot;numpy简介&quot;&gt;&lt;/a&gt;numpy简介&lt;/h2&gt;&lt;p&gt;NumPy（Numerical Python的简称）是 Python 中用于科学计算的一个基础库。它</summary>
      
    
    
    
    
    <category term="数据分析" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第一章：环境安装</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2025-05-12T13:38:15.000Z</published>
    <updated>2025-05-12T13:39:33.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-CONDA环境安装"><a href="#1-1-CONDA环境安装" class="headerlink" title="1.1 CONDA环境安装"></a>1.1 CONDA环境安装</h2><h3 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h3><ul><li><strong>定义</strong>：data science package &amp; environment manager（数据科学包和环境管理器 ）</li><li><strong>创建环境</strong><ul><li>命令：<code>conda create --name python3 python=3</code></li></ul></li><li><strong>切换环境</strong><ul><li><strong>Windows</strong>：<code>activate python3</code></li><li><strong>Linux&#x2F;macOS</strong>：<code>source activate python3</code></li></ul></li><li><strong>官方地址</strong>：<a href="https://www.anaconda.com/download/">https://www.anaconda.com/download/</a><br><img src="https://i.imgur.com/1SMCfgh.png"></li></ul><p>Anaconda 作为一款流行的 Python 发行版，拥有诸多优势，使其在数据科学、机器学习等领域备受欢迎：</p><ol><li><p><strong>包管理</strong>: Anaconda 最大的优势之一是其强大的包管理功能。它使用 conda 作为包管理器，可以轻松地安装、更新、卸载和管理各种 Python 包及其依赖项。Conda 能够很好地处理包之间的依赖关系，避免版本冲突，这对于复杂的项目来说非常重要。</p></li><li><p><strong>环境管理</strong>: Anaconda 允许你创建独立的虚拟环境，每个环境都可以有自己独立的 Python 版本和软件包。这使得你可以在同一台机器上同时运行多个项目，而不用担心它们之间的依赖关系冲突。</p></li><li><p><strong>预装常用包</strong>: Anaconda 预装了大量常用的数据科学和机器学习包，例如 NumPy、Pandas、Scikit-learn、Matplotlib 等。这意味着你安装 Anaconda 后，就可以立即开始进行数据分析和建模工作，而无需手动安装这些包。</p></li><li><p><strong>跨平台</strong>: Anaconda 支持 Windows、macOS 和 Linux 等多种操作系统，这使得你可以在不同的平台上使用相同的工具和环境。</p></li><li><p><strong>开源免费</strong>: Anaconda 是开源的，并且提供了免费的社区版，这使得任何人都可以免费使用它。</p></li><li><p><strong>Anaconda Navigator</strong>: Anaconda 提供了一个图形用户界面（GUI）工具 Anaconda Navigator，可以让你更方便地管理环境、安装包和启动应用程序，例如 Jupyter Notebook、Spyder 等。</p></li><li><p><strong>社区支持</strong>: Anaconda 拥有庞大的用户社区，你可以很容易地找到相关的文档、教程和支持。</p></li></ol><p>总而言之，Anaconda 的优势在于其强大的包管理、环境管理功能，以及预装的常用包，使得数据科学家和机器学习工程师可以更高效地进行开发和实验。</p><h2 id="1-2-JupyterBook"><a href="#1-2-JupyterBook" class="headerlink" title="1.2 JupyterBook"></a>1.2 JupyterBook</h2><p><img src="https://i.imgur.com/Vv3lu7L.png"><br><img src="https://i.imgur.com/9BzCU7e.png"><br><img src="https://i.imgur.com/KK7cR3F.png"><br><img src="https://i.imgur.com/pChJgaI.png"><br><img src="https://i.imgur.com/RJkkwFV.png"><br>markdown</p><!--⚠️Imgur upload failed, check dev console--><p>![[Pasted image 20250420062609.png]]</p><h2 id="1-3-matplotlib"><a href="#1-3-matplotlib" class="headerlink" title="1.3 matplotlib"></a>1.3 matplotlib</h2><p>Matplotlib 是 Python 中一个非常流行和强大的绘图库，主要用于创建静态、交互式和动画可视化的图表。它可以生成各种类型的图表，包括折线图、散点图、柱状图、饼图、直方图、等高线图、3D 图形等等。</p><p>以下是 Matplotlib 的一些关键特性和优点：</p><ul><li><strong>灵活性</strong>: Matplotlib 提供了丰富的绘图选项，可以让你高度定制图表的外观，包括颜色、线条样式、字体、标签、标题等等。</li><li><strong>多种输出格式</strong>: Matplotlib 可以将图表保存为多种格式，包括 PNG、JPG、PDF、SVG 等，方便你在不同的场景中使用。</li><li><strong>与 NumPy 和 Pandas 集成</strong>: Matplotlib 可以很好地与 NumPy 和 Pandas 集成，可以直接使用 NumPy 数组和 Pandas DataFrame 中的数据进行绘图。</li><li><strong>易于使用</strong>: Matplotlib 提供了简单易用的 API，可以让你快速创建基本的图表。</li><li><strong>交互式绘图</strong>: Matplotlib 支持交互式绘图，可以在图表中进行缩放、平移、旋转等操作。</li><li><strong>广泛的应用</strong>: Matplotlib 被广泛应用于数据分析、科学研究、工程计算等领域。</li></ul><p>以下是一些 Matplotlib 的常用模块：</p><ul><li><code>matplotlib.pyplot</code>: 提供了类似于 MATLAB 的绘图接口，是 Matplotlib 最常用的模块。</li><li><code>matplotlib.axes</code>: 提供了 Axes 类，用于创建和管理图表中的坐标轴。</li><li><code>matplotlib.figure</code>: 提供了 Figure 类，用于创建和管理图表中的图形。</li><li><code>matplotlib.cm</code>: 提供了颜色映射表，用于将数据值映射到颜色。</li></ul><p>总而言之，Matplotlib 是 Python 中一个非常重要的绘图库，可以帮助你将数据可视化，从而更好地理解数据和发现数据中的规律。</p><h3 id="Matplotlib-绘图基础"><a href="#Matplotlib-绘图基础" class="headerlink" title="Matplotlib 绘图基础"></a>Matplotlib 绘图基础</h3><ol><li><strong>导入模块</strong><ul><li><code>from matplotlib import pyplot as plt</code> ：导入 <code>pyplot</code> 模块并简写为 <code>plt</code> ，方便后续调用。</li></ul></li><li><strong>数据准备</strong><ul><li><code>x = range(2,26,2)</code> ：表示数据在 x 轴的位置，是可迭代对象，生成从 2 开始到 26（不包含 26），步长为 2 的整数序列。</li><li><code>y = [15,13,14.5,17,20,25,26,26,24,22,18,15]</code> ：表示数据在 y 轴的位置，是可迭代对象。x 轴和 y 轴的数据一起组成要绘制的坐标，如 <code>(2,15)</code> 、<code>(4,13)</code> 等。</li></ul></li><li><strong>绘图与展示</strong><ul><li><code>plt.plot(x,y)</code> ：传入 x 和 y 数据，通过 <code>plot</code> 函数绘制折线图。</li><li><code>plt.show()</code> ：在程序执行时展示绘制好的图形。<br> <img src="https://i.imgur.com/nAyMMyW.png"><br> x轴没有刻度<a href="%E6%8F%92%E5%85%A5x%E7%9A%84%E5%88%BB%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A">^1</a></li></ul></li></ol><h3 id="Matplotlib绘图待解决问题"><a href="#Matplotlib绘图待解决问题" class="headerlink" title="Matplotlib绘图待解决问题"></a>Matplotlib绘图待解决问题</h3><ol><li><strong>图片大小</strong>：设置合适尺寸以获取高清大图。</li><li><strong>保存本地</strong>：掌握保存绘图到本地的方法。 </li><li><strong>描述信息</strong>：标注 x 轴、y 轴含义及图形意义。 </li><li><strong>刻度间距</strong>：调整 x 轴或 y 轴刻度间距。 </li><li><strong>线条样式</strong>：设定线条颜色、透明度等样式。 </li><li><strong>标记特殊点</strong>：标记图形最高点、最低点等特殊点。 </li><li><strong>添加水印</strong>：添加水印防伪防盗用。</li></ol><h3 id="Python使用Matplotlib绘图笔记"><a href="#Python使用Matplotlib绘图笔记" class="headerlink" title="Python使用Matplotlib绘图笔记"></a>Python使用Matplotlib绘图笔记</h3><ol><li><strong>导入模块</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure></li></ol><ul><li>导入<code>matplotlib.pyplot</code>模块并起别名<code>plt</code>，方便后续调用函数。</li></ul><ol start="2"><li><strong>创建Figure对象</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>figure</code>：图形图标的意思，这里指绘制的图。</li><li>通过实例化一个<code>figure</code>并传递参数，能在后台自动使用该<code>figure</code>实例。</li><li><code>dpi</code>参数：在图像模糊时传入，可让图片更清晰 。<code>dpi</code>即每英寸点数（dots per inch），值越大图像越清晰。</li></ul><ol start="3"><li><strong>准备数据</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line">y = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>x</code>：使用<code>range</code>函数生成从2开始，到26结束（不包含26），步长为2的整数序列，作为横坐标数据。</li><li><code>y</code>：手动定义的列表，作为纵坐标数据。</li></ul><ol start="4"><li><strong>绘制图形</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure></li></ol><ul><li>使用<code>plot</code>函数绘制折线图，传入<code>x</code>和<code>y</code>数据。</li></ul><ol start="5"><li><strong>保存图形</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">&quot;./sig_size.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>savefig</code>函数用于保存图片。</li><li>可以保存为<code>svg</code>这种矢量图格式，矢量图放大不会有锯齿 。</li></ul><ol start="6"><li><strong>显示图形</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>show</code>函数用于在运行脚本或交互式环境中显示绘制的图形。</li></ul><p><img src="https://i.imgur.com/gVSs6zh.png"><br>输出图像<br><img src="https://i.imgur.com/8Nuy101.png"><br><img src="https://i.imgur.com/aBv8zSD.png"><br>生成图片<br><img src="https://i.imgur.com/j2XIwOT.png"><br>调整y的刻度</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://i.imgur.com/U82vqXZ.png"><br>一个语法<br><img src="https://i.imgur.com/qJ9Yr0d.png"></p><h3 id="Matplotlib-设置中文显示笔记"><a href="#Matplotlib-设置中文显示笔记" class="headerlink" title="Matplotlib 设置中文显示笔记"></a>Matplotlib 设置中文显示笔记</h3><p><img src="https://i.imgur.com/M8gyjJv.png"></p><h4 id="一、无法显示中文原因"><a href="#一、无法显示中文原因" class="headerlink" title="一、无法显示中文原因"></a>一、无法显示中文原因</h4><p>matplotlib 默认不支持中文字符，因为其默认英文字体无法显示汉字。</p><h4 id="二、查看-Linux-Mac-支持字体方法"><a href="#二、查看-Linux-Mac-支持字体方法" class="headerlink" title="二、查看 Linux&#x2F;Mac 支持字体方法"></a>二、查看 Linux&#x2F;Mac 支持字体方法</h4><ol><li><strong>查看所有支持字体</strong>  <a href="windows%E7%9A%84%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%EF%BC%9A">^2</a><br> 使用命令<code>fc - list</code> 。</li><li><strong>查看支持的中文字体</strong><br> 使用命令<code>fc - list :lang=zh</code>（冒号前面有空格） 。<br> <img src="https://i.imgur.com/sxdWAgI.png"></li></ol><h4 id="三、修改-matplotlib-默认字体方法"><a href="#三、修改-matplotlib-默认字体方法" class="headerlink" title="三、修改 matplotlib 默认字体方法"></a>三、修改 matplotlib 默认字体方法</h4><ol><li><strong>通过 matplotlib.rc 修改</strong><br> 具体方法需参见源码（适用于 windows&#x2F;linux 系统）。</li><li><strong>通过 font_manager 修改</strong><br> 利用 matplotlib 下的 font_manager，适用于 windows、linux、mac 系统。<br> <img src="https://i.imgur.com/EXiaQ9z.png"><br> 点击F12，查看rc函数的源码</li></ol><p>查看当前电脑中文字体路径的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import os  </span><br><span class="line">from fontTools.ttLib import TTFont  </span><br><span class="line">  </span><br><span class="line"># Windows 字体目录  </span><br><span class="line">font_dir = r&#x27;C:\Windows\Fonts&#x27;  </span><br><span class="line">  </span><br><span class="line"># 列出字体文件  </span><br><span class="line">for font_file in os.listdir(font_dir):  </span><br><span class="line">    if font_file.endswith((&#x27;.ttf&#x27;, &#x27;.otf&#x27;)):  </span><br><span class="line">        font_path = os.path.join(font_dir, font_file)  </span><br><span class="line">        try:  </span><br><span class="line">            # 打开字体文件  </span><br><span class="line">            font = TTFont(font_path)  </span><br><span class="line">  </span><br><span class="line">            # 检查字体是否支持中文字符  </span><br><span class="line">            cmap = font[&#x27;cmap&#x27;].getcmap(3, 1)  # 获取 Unicode BMP 平面映射  </span><br><span class="line">            if cmap:  </span><br><span class="line">                chars = cmap.cmap.keys()  </span><br><span class="line">                # 检查是否存在中文字符（Unicode 范围：0x4E00-0x9FFF）  </span><br><span class="line">                if any(0x4E00 &lt;= char &lt;= 0x9FFF for char in chars):  </span><br><span class="line">                    print(font_path)  </span><br><span class="line">        except Exception as e:  </span><br><span class="line">            print(f&quot;Error processing &#123;font_path&#125;: &#123;e&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">![](https://i.imgur.com/iLt2pAs.png)</span><br><span class="line">添加图形的描述信息</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/F2v4rxT.png)</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/0jvAbPQ.png)</span><br><span class="line">绘制网格</span><br><span class="line"></span><br><span class="line">&lt;!--⚠️Imgur upload failed, check dev console--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![[Pasted image <span class="number">20250420171454.</span>png]]</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 数据准备  </span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]  </span><br><span class="line">b = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]  </span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">11</span>, <span class="number">31</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 字体设置  </span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建图形  </span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>), dpi=<span class="number">80</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绘制折线图  </span></span><br><span class="line">plt.plot(x, a, label=<span class="string">&quot;我自己&quot;</span>, marker=<span class="string">&#x27;o&#x27;</span>)  <span class="comment"># 自己的数据  </span></span><br><span class="line">plt.plot(x, b, label=<span class="string">&quot;我同桌&quot;</span>, marker=<span class="string">&#x27;s&#x27;</span>)  <span class="comment"># 同桌的数据  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置x轴刻度和标签  </span></span><br><span class="line">_xtick_labels = [<span class="string">&quot;&#123;&#125;岁&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]  </span><br><span class="line">plt.xticks(<span class="built_in">list</span>(x), _xtick_labels, rotation=<span class="number">45</span>, fontproperties=my_font)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置y轴刻度  </span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加网格  </span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加描述性信息  </span></span><br><span class="line">plt.xlabel(<span class="string">&quot;岁数/岁&quot;</span>, fontproperties=my_font)  </span><br><span class="line">plt.ylabel(<span class="string">&quot;个数/个&quot;</span>, fontproperties=my_font)  </span><br><span class="line">plt.title(<span class="string">&quot;不同岁数的男女朋友数量对比&quot;</span>, fontproperties=my_font)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加图例  </span></span><br><span class="line">plt.legend(prop=my_font)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 保存并显示图表  </span></span><br><span class="line">plt.savefig(<span class="string">&quot;./friends_comparison.svg&quot;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/J1T1ioG.png"></p><h2 id="🎨-自定义绘制图形的风格（Matplotlib）"><a href="#🎨-自定义绘制图形的风格（Matplotlib）" class="headerlink" title="🎨 自定义绘制图形的风格（Matplotlib）"></a>🎨 自定义绘制图形的风格（Matplotlib）</h2><p>在使用 <code>plt.plot()</code> 绘图时，可以通过参数设置线条的颜色、风格、粗细和透明度，实现风格自定义。</p><h3 id="📌-示例代码："><a href="#📌-示例代码：" class="headerlink" title="📌 示例代码："></a>📌 示例代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(</span><br><span class="line">    x,  <span class="comment"># 横坐标数据</span></span><br><span class="line">    y,  <span class="comment"># 纵坐标数据</span></span><br><span class="line">    color=<span class="string">&#x27;r&#x27;</span>,        <span class="comment"># 线条颜色（红色）</span></span><br><span class="line">    linestyle=<span class="string">&#x27;--&#x27;</span>,   <span class="comment"># 线条风格（虚线）</span></span><br><span class="line">    linewidth=<span class="number">5</span>,      <span class="comment"># 线条粗细</span></span><br><span class="line">    alpha=<span class="number">0.5</span>         <span class="comment"># 透明度（0~1之间）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="🎨-颜色字符速查表："><a href="#🎨-颜色字符速查表：" class="headerlink" title="🎨 颜色字符速查表："></a>🎨 颜色字符速查表：</h3><table><thead><tr><th>字符</th><th>颜色</th></tr></thead><tbody><tr><td><code>r</code></td><td>红色</td></tr><tr><td><code>g</code></td><td>绿色</td></tr><tr><td><code>b</code></td><td>蓝色</td></tr><tr><td><code>w</code></td><td>白色</td></tr><tr><td><code>c</code></td><td>青色</td></tr><tr><td><code>m</code></td><td>洋红</td></tr><tr><td><code>y</code></td><td>黄色</td></tr><tr><td><code>k</code></td><td>黑色</td></tr></tbody></table><p><em>也可使用 16 进制颜色（如：<code>#00ff00</code>）或灰度值字符串（如：<code>0.8</code>）</em></p><hr><h3 id="✨-线条风格字符："><a href="#✨-线条风格字符：" class="headerlink" title="✨ 线条风格字符："></a>✨ 线条风格字符：</h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>-</code></td><td>实线</td></tr><tr><td><code>--</code></td><td>虚线、破折线</td></tr><tr><td><code>-.</code></td><td>点划线</td></tr><tr><td><code>:</code></td><td>点线（虚线）</td></tr><tr><td><code>&#39;&#39;</code></td><td>空字符串表示无线条</td></tr></tbody></table><hr><p>需要的时候直接在 <code>plt.plot()</code> 里加上这些参数就能控制线的样式啦~<br>是不是超方便呢？✧<em>｡٩(ˊᗜˋ</em>)و✧*｡</p><p>如果你还有别的绘图问题，也可以继续问小汐喔！</p><h3 id="一个好用的网站"><a href="#一个好用的网站" class="headerlink" title="一个好用的网站"></a>一个好用的网站</h3><p><a href="https://matplotlib.org/stable/gallery/index">https://matplotlib.org/stable/gallery/index</a><br><img src="https://i.imgur.com/FNMzhX5.png"></p><h3 id="对比常用统计图"><a href="#对比常用统计图" class="headerlink" title="对比常用统计图"></a>对比常用统计图</h3><ol><li><strong>折线图</strong><ul><li><strong>定义</strong>：以折线的上升或下降来表示统计数量增减变化的统计图。</li><li><strong>特点</strong>：能够显示数据的变化趋势，反映事物的变化情况。关键词：变化</li></ul></li><li><strong>直方图</strong><ul><li><strong>定义</strong>：由一系列高度不等的纵向条纹或线段表示数据分布的情况，一般用横轴表示数据范围，纵轴表示分布情况 。</li><li><strong>特点</strong>：绘制连续性的数据，展示一组或多组数据的分布状况。关键词：统计、连续性</li></ul></li><li><strong>条形图</strong><ul><li><strong>定义</strong>：排列在工作表的列或行中的数据可绘制到条形图中。 </li><li><strong>特点</strong>：绘制离散的数据，能一眼看出各个数据的大小，便于比较数据之间的差别。关键词：统计、离散</li></ul></li><li><strong>散点图</strong><ul><li><strong>定义</strong>：用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。</li><li><strong>特点</strong>：判断变量之间是否存在数量关联趋势，展示离群点。关键词：分布规律</li></ul></li></ol><pre><code>plt.eticks(x)</code></pre><pre><code>     Add-Type -AssemblyName System.Drawing     [System.Drawing.FontFamily]::Families | Select-Object Name</code></pre><h2 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h2><p><img src="https://i.imgur.com/5RSqq6W.png"><br><img src="https://i.imgur.com/YRvtT1M.png"><br>import matplotlib.pyplot as plt<br>from matplotlib import font_manager</p><h3 id="初始化数据列表a和b，分别代表两个数据序列"><a href="#初始化数据列表a和b，分别代表两个数据序列" class="headerlink" title="初始化数据列表a和b，分别代表两个数据序列"></a>初始化数据列表a和b，分别代表两个数据序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">11</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">b =[<span class="number">26</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">6</span>]</span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>)</span><br><span class="line">x_2=<span class="built_in">range</span>(<span class="number">40</span>,<span class="number">71</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地字体文件，用于支持中文显示</span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的图像对象，指定图像大小和分辨率</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图，红色标记数据序列a</span></span><br><span class="line">plt.scatter(x,a,s=<span class="number">50</span>,c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;point&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制散点图，蓝色标记数据序列b</span></span><br><span class="line">plt.scatter(x_2,b,s=<span class="number">50</span>,c=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;point&#x27;</span>)</span><br><span class="line"></span><br><span class="line">_x=<span class="built_in">list</span>(x)+<span class="built_in">list</span>(x_2)</span><br><span class="line"><span class="comment"># 生成x轴标签，表示月份</span></span><br><span class="line">_xtick_labels = [<span class="string">&quot;10月&#123;&#125;日&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> _x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴标签，旋转45度，使用自定义字体</span></span><br><span class="line">plt.xticks(_x[::<span class="number">3</span>],_xtick_labels[::<span class="number">3</span>],rotation=<span class="number">45</span>,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line">plt.yticks(a)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>,prop=my_font)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;十月/日&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度/摄氏度&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.title(<span class="string">&quot;温度变化&quot;</span>,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图像为SVG格式文件</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;points.svg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制柱状图，x轴为电影索引，y轴为票房数据  </span></span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),b,height=<span class="number">0.5</span>)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h2><p><img src="https://i.imgur.com/XSBid9n.png"></p><p><img src="https://i.imgur.com/3RSjJdh.png"><br>竖着的条形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 导入绘图库和字体管理器</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载自定义字体文件</span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备电影名称和对应的票房数据</span></span><br><span class="line">a = [<span class="string">&quot;战狼2&quot;</span>,<span class="string">&quot;速度与激情8&quot;</span>,<span class="string">&quot;功夫瑜伽&quot;</span>,<span class="string">&quot;西游伏妖篇&quot;</span>,<span class="string">&quot;变形金刚5：最后的骑士&quot;</span>,<span class="string">&quot;摔跤吧！爸爸&quot;</span>,<span class="string">&quot;加勒比海盗5：死无对证&quot;</span>,<span class="string">&quot;金刚：骷髅岛&quot;</span>,<span class="string">&quot;极限特工：终极回归&quot;</span>,<span class="string">&quot;生化危机6：终章&quot;</span>,<span class="string">&quot;乘风破浪&quot;</span>,<span class="string">&quot;神偷奶爸3&quot;</span>,<span class="string">&quot;智取威虎山&quot;</span>,<span class="string">&quot;大闹天竺&quot;</span>,<span class="string">&quot;金刚狼3：殊死一战&quot;</span>,<span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>,<span class="string">&quot;悟空传&quot;</span>,<span class="string">&quot;银河护卫队2&quot;</span>,<span class="string">&quot;情圣&quot;</span>,<span class="string">&quot;新木乃伊&quot;</span>]</span><br><span class="line">b = [<span class="number">56.02</span>, <span class="number">26.94</span>, <span class="number">17.53</span>, <span class="number">16.49</span>, <span class="number">15.45</span>, <span class="number">12.96</span>, <span class="number">11.8</span>, <span class="number">11.61</span>, <span class="number">11.28</span>, <span class="number">11.12</span>, <span class="number">10.49</span>, <span class="number">10.3</span>, <span class="number">8.75</span>, <span class="number">7.55</span>, <span class="number">7.32</span>, <span class="number">6.99</span>, <span class="number">6.88</span>, <span class="number">6.86</span>, <span class="number">6.58</span>, <span class="number">6.23</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的图形对象，并设置图形的大小和分辨率</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">15</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图，x轴为电影索引，y轴为票房数据</span></span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴标签，使用自定义字体并旋转90度以适应长文本</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),a,fontproperties=my_font,rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图形到文件</span></span><br><span class="line">plt.savefig(<span class="string">&quot;./test1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>横的条形图<br><img src="https://i.imgur.com/KWacwnN.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入绘图库和字体管理器  </span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 加载自定义字体文件  </span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 准备电影名称和对应的票房数据  </span></span><br><span class="line">a = [<span class="string">&quot;战狼2&quot;</span>,<span class="string">&quot;速度与激情8&quot;</span>,<span class="string">&quot;功夫瑜伽&quot;</span>,<span class="string">&quot;西游伏妖篇&quot;</span>,<span class="string">&quot;变形金刚5：最后的骑士&quot;</span>,<span class="string">&quot;摔跤吧！爸爸&quot;</span>,<span class="string">&quot;加勒比海盗5：死无对证&quot;</span>,<span class="string">&quot;金刚：骷髅岛&quot;</span>,<span class="string">&quot;极限特工：终极回归&quot;</span>,<span class="string">&quot;生化危机6：终章&quot;</span>,<span class="string">&quot;乘风破浪&quot;</span>,<span class="string">&quot;神偷奶爸3&quot;</span>,<span class="string">&quot;智取威虎山&quot;</span>,<span class="string">&quot;大闹天竺&quot;</span>,<span class="string">&quot;金刚狼3：殊死一战&quot;</span>,<span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>,<span class="string">&quot;悟空传&quot;</span>,<span class="string">&quot;银河护卫队2&quot;</span>,<span class="string">&quot;情圣&quot;</span>,<span class="string">&quot;新木乃伊&quot;</span>]  </span><br><span class="line">b = [<span class="number">56.02</span>, <span class="number">26.94</span>, <span class="number">17.53</span>, <span class="number">16.49</span>, <span class="number">15.45</span>, <span class="number">12.96</span>, <span class="number">11.8</span>, <span class="number">11.61</span>, <span class="number">11.28</span>, <span class="number">11.12</span>, <span class="number">10.49</span>, <span class="number">10.3</span>, <span class="number">8.75</span>, <span class="number">7.55</span>, <span class="number">7.32</span>, <span class="number">6.99</span>, <span class="number">6.88</span>, <span class="number">6.86</span>, <span class="number">6.58</span>, <span class="number">6.23</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个新的图形对象，并设置图形的大小和分辨率  </span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绘制柱状图，x轴为电影索引，y轴为票房数据  </span></span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),b,height=<span class="number">0.5</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置x轴标签，使用自定义字体并旋转90度以适应长文本  </span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),a,fontproperties=my_font,rotation=<span class="number">0</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 保存图形到文件  </span></span><br><span class="line">plt.savefig(<span class="string">&quot;./test1.png&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示图形  </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Bg0KpVn.png"></p><h2 id="绘制多重条形图"><a href="#绘制多重条形图" class="headerlink" title="绘制多重条形图"></a>绘制多重条形图</h2><p><img src="https://i.imgur.com/xWxn5Y2.png"></p><p><img src="https://i.imgur.com/5HStiWy.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入绘图库和字体管理器  </span></span><br><span class="line">x_14=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(a)))  </span><br><span class="line">x_15=[i+bar_height <span class="keyword">for</span> i <span class="keyword">in</span> x_14]  </span><br><span class="line">x_16=[i+bar_height*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_14]  </span><br></pre></td></tr></table></figure><h2 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h2><p><img src="https://i.imgur.com/vWzAaG8.png"></p><h1 id="绘制直方图学习笔记"><a href="#绘制直方图学习笔记" class="headerlink" title="绘制直方图学习笔记"></a>绘制直方图学习笔记</h1><h2 id="一、直方图展示示例"><a href="#一、直方图展示示例" class="headerlink" title="一、直方图展示示例"></a>一、直方图展示示例</h2><p>图中展示了 [具体数量] 部电影的时长分布直方图，横坐标为电影时长，纵坐标为数量，直观呈现电影时长在不同区间的分布情况。</p><h2 id="二、关键概念"><a href="#二、关键概念" class="headerlink" title="二、关键概念"></a>二、关键概念</h2><h3 id="（一）组数"><a href="#（一）组数" class="headerlink" title="（一）组数"></a>（一）组数</h3><ul><li><strong>定义</strong>：将数据分组的数量。</li><li><strong>分组原则</strong>：当数据在 100 个以内时，一般按数据多少分 5 - 12 组 。组数要适当，太少会有较大统计误差，太多则规律不明显。</li><li><strong>计算方法</strong>：通过数据的极差（最大值 - 最小值）除以组距得到。</li></ul><h3 id="（二）组距"><a href="#（二）组距" class="headerlink" title="（二）组距"></a>（二）组距</h3><ul><li><strong>定义</strong>：每个小组的两个端点的距离。</li><li><strong>公式</strong>：组距 &#x3D; 极差 &#x2F; 组数 。</li></ul><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><h3 id="（一）参数设置"><a href="#（一）参数设置" class="headerlink" title="（一）参数设置"></a>（一）参数设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin_width = <span class="number">3</span>  <span class="comment"># 设置组距为 3</span></span><br><span class="line">num_bins = <span class="built_in">int</span>((<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) / bin_width)  <span class="comment"># 根据极差和组距计算分为多少组</span></span><br></pre></td></tr></table></figure><h3 id="（二）绘制直方图"><a href="#（二）绘制直方图" class="headerlink" title="（二）绘制直方图"></a>（二）绘制直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(a, num_bins) </span><br><span class="line"><span class="comment"># 传入需要统计的数据 a 以及计算得到的组数 num_bins</span></span><br><span class="line"><span class="comment"># 若想传入自定义分组依据（用于组距不均匀时），可使用</span></span><br><span class="line"><span class="comment"># plt.hist(a, [min(a)+i*bin_width for i in range(num_bins)]) </span></span><br><span class="line"><span class="comment"># normed 参数：bool 类型，设置是否绘制频率分布直方图，默认绘制频数直方图，如需绘制频率分布直方图，可设为 normed=1</span></span><br></pre></td></tr></table></figure><h3 id="（三）坐标轴刻度设置"><a href="#（三）坐标轴刻度设置" class="headerlink" title="（三）坐标轴刻度设置"></a>（三）坐标轴刻度设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">min</span>(a), <span class="built_in">max</span>(a))[::bin_width]), rotation=<span class="number">45</span>) </span><br><span class="line"><span class="comment"># 设置 x 轴刻度，从数据最小值到最大值，按组距选取刻度值，并将刻度标签旋转 45 度</span></span><br></pre></td></tr></table></figure><h3 id="（四）显示网格"><a href="#（四）显示网格" class="headerlink" title="（四）显示网格"></a>（四）显示网格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>, linestyle = <span class="string">&quot;-.&quot;</span>, alpha=<span class="number">0.5</span>) </span><br><span class="line"><span class="comment"># 显示网格，linestyle 设置网格线样式为点划线，alpha 设置透明度为 0.5</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/O0C5ugX.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 加载自定义字体  </span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 数据样本，用于绘制直方图  </span></span><br><span class="line">a = [<span class="number">131</span>, <span class="number">98</span>, <span class="number">125</span>, <span class="number">131</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">108</span>, <span class="number">135</span>, <span class="number">138</span>, <span class="number">131</span>, <span class="number">102</span>, <span class="number">107</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">128</span>, <span class="number">121</span>, <span class="number">142</span>, <span class="number">127</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">115</span>, <span class="number">99</span>, <span class="number">136</span>, <span class="number">126</span>, <span class="number">134</span>, <span class="number">95</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">111</span>, <span class="number">78</span>, <span class="number">132</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">150</span>, <span class="number">110</span>, <span class="number">117</span>, <span class="number">86</span>, <span class="number">95</span>, <span class="number">144</span>, <span class="number">105</span>, <span class="number">126</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">116</span>, <span class="number">123</span>, <span class="number">106</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">123</span>, <span class="number">86</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">136</span>, <span class="number">123</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">137</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">109</span>, <span class="number">134</span>, <span class="number">125</span>, <span class="number">127</span>, <span class="number">105</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">129</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">132</span>, <span class="number">103</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">132</span>, <span class="number">145</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">139</span>, <span class="number">125</span>, <span class="number">138</span>, <span class="number">109</span>, <span class="number">132</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">106</span>, <span class="number">117</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">139</span>, <span class="number">119</span>, <span class="number">140</span>, <span class="number">83</span>, <span class="number">110</span>, <span class="number">102</span>, <span class="number">123</span>, <span class="number">107</span>, <span class="number">143</span>, <span class="number">115</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">139</span>, <span class="number">123</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">119</span>, <span class="number">133</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">131</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">135</span>, <span class="number">115</span>, <span class="number">146</span>, <span class="number">137</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">144</span>, <span class="number">83</span>, <span class="number">123</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">154</span>, <span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">129</span>, <span class="number">126</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">122</span>, <span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>, <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">114</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">133</span>, <span class="number">137</span>, <span class="number">92</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">146</span>, <span class="number">97</span>, <span class="number">137</span>, <span class="number">105</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">81</span>, <span class="number">97</span>, <span class="number">139</span>, <span class="number">113</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">117</span>, <span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">129</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">133</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">94</span>, <span class="number">146</span>, <span class="number">133</span>, <span class="number">101</span>, <span class="number">131</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">84</span>, <span class="number">137</span>, <span class="number">115</span>, <span class="number">122</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">133</span>, <span class="number">150</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建图形，设置图形大小和分辨率  </span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), dpi=<span class="number">80</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 计算直方图的分组间隔  </span></span><br><span class="line">lim = (<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) / <span class="number">10</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 初始化分组宽度，并寻找合适的分组宽度  </span></span><br><span class="line">d = <span class="number">2</span>  </span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) % d != <span class="number">0</span> <span class="keyword">or</span> d &lt;= lim:  </span><br><span class="line">    d += <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 根据分组宽度计算分组数  </span></span><br><span class="line">num_bins = (<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) // d  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 输出数据范围  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绘制直方图  </span></span><br><span class="line">plt.hist(a, num_bins, rwidth=<span class="number">0.9</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 输出分组宽度  </span></span><br><span class="line"><span class="built_in">print</span>(d)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置x轴标签，使用自定义字体  </span></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>, fontproperties=my_font)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置x轴刻度，使用自定义字体并旋转45度  </span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">min</span>(a), <span class="built_in">max</span>(a) + d, d), rotation=<span class="number">45</span>, fontproperties=my_font)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加网格，设置透明度  </span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示图形  </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>缺数字的<br><img src="https://i.imgur.com/f4kGuTt.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 字体设置  </span></span><br><span class="line"><span class="comment"># 加载本地字体文件，用于图形中的中文显示  </span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\Deng.ttf&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义区间、宽度和数量列表  </span></span><br><span class="line"><span class="comment"># interval代表数据区间的上限值  </span></span><br><span class="line">interval = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">90</span>, <span class="number">150</span>]  </span><br><span class="line"><span class="comment"># width代表每个区间的数据宽度，大部分区间宽度为5，部分区间较宽  </span></span><br><span class="line">width = [<span class="number">5</span>] * <span class="number">10</span> + [<span class="number">15</span>, <span class="number">30</span>, <span class="number">60</span>]  </span><br><span class="line"><span class="comment"># quantity代表每个区间的数据数量  </span></span><br><span class="line">quantity = [<span class="number">836</span>, <span class="number">2737</span>, <span class="number">3723</span>, <span class="number">3926</span>, <span class="number">3596</span>, <span class="number">1438</span>, <span class="number">3273</span>, <span class="number">642</span>, <span class="number">824</span>, <span class="number">613</span>, <span class="number">215</span>, <span class="number">47</span>, <span class="number">23</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印宽度、数量和区间列表的长度，用于调试  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(width), <span class="built_in">len</span>(quantity),<span class="built_in">len</span>(interval))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建图形，设置图形大小和清晰度  </span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)  </span><br><span class="line"><span class="comment"># 绘制柱状图  </span></span><br><span class="line"><span class="comment"># 使用quantity列表的数据，x轴为quantity列表的索引，y轴为quantity的值，柱子宽度为1  </span></span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(quantity)) ,quantity,width=<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 计算x轴标签位置，标签位于每个区间的中间  </span></span><br><span class="line">_x=[i-<span class="number">0.5</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]  </span><br><span class="line"><span class="comment"># 设置x轴标签，使其显示为定义的区间值  </span></span><br><span class="line">_xtick_labels =interval+[<span class="number">150</span>]  </span><br><span class="line">plt.xticks(_x,_xtick_labels)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加网格，alpha参数设置网格的透明度，便于观察图形细节  </span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)  </span><br><span class="line"><span class="comment"># 显示图形  </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="其他的图形"><a href="#其他的图形" class="headerlink" title="其他的图形"></a>其他的图形</h2><p><a href="https://plotly.com/python/line-and-scatter/">https://plotly.com/python/line-and-scatter/</a><br><a href="https://echarts.apache.org/handbook/zh/get-started/">https://echarts.apache.org/handbook/zh/get-started/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算x轴标签位置，标签位于每个区间的中间  </span></span><br><span class="line">_x=[i-<span class="number">0.5</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]  </span><br><span class="line"><span class="comment"># 设置x轴标签，使其显示为定义的区间值  </span></span><br><span class="line">_xtick_labels =interval+[<span class="number">150</span>]  </span><br><span class="line">plt.xticks(_x,_xtick_labels)  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1-CONDA环境安装&quot;&gt;&lt;a href=&quot;#1-1-CONDA环境安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 CONDA环境安装&quot;&gt;&lt;/a&gt;1.1 CONDA环境安装&lt;/h2&gt;&lt;h3 id=&quot;Conda&quot;&gt;&lt;a href=&quot;#Cond</summary>
      
    
    
    
    
    <category term="数据分析" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第六章：人事管理项目</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E4%BA%BA%E4%BA%8B%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E4%BA%BA%E4%BA%8B%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</id>
    <published>2025-05-12T03:22:48.000Z</published>
    <updated>2025-05-12T03:25:45.831Z</updated>
    
    <content type="html"><![CDATA[<p>结合AI以及一些基本的GUI内容进行人事管理项目的开发。</p><ul><li>第一步：创建一个模块来做这个项目</li><li>第二步：分析项目的业务需求</li></ul><ol><li>提供一个登录和注册用户的界面</li><li>提供一个人事信息管理的界面：展示全部员工信息，提供一个根据名称查询某个员工信息的展示，添加员工信息，删除员工信息，修改员工信息</li><li>分析项目的角色<ul><li>登录用户：登录名称，密码</li><li>员工信息：ID、性别、年龄、电话、职位、入职时间、薪水、部门信息</li></ul></li><li>分析系统的界面：<ul><li>登录界面类：创建登录界面</li><li>信息管理界面类：创建信息管理界面</li></ul></li></ol><ul><li>第三步：结合AI开始开发：Gemini<ul><li>Ai帮我们生成一个登录界面</li><li>AI帮我们生成一个信息管理界面</li></ul></li></ul><h2 id="人事系统-界面获取"><a href="#人事系统-界面获取" class="headerlink" title="人事系统 界面获取"></a>人事系统 界面获取</h2><h2 id="人事系统-界面分析-角色定义"><a href="#人事系统-界面分析-角色定义" class="headerlink" title="人事系统 界面分析 角色定义"></a>人事系统 界面分析 角色定义</h2><h2 id="人事系统-登录功能-AI"><a href="#人事系统-登录功能-AI" class="headerlink" title="人事系统 登录功能 AI"></a>人事系统 登录功能 AI</h2><h3 id="LoginFrame类的源码"><a href="#LoginFrame类的源码" class="headerlink" title="LoginFrame类的源码"></a>LoginFrame类的源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EmptyBorder;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JTextField usernameField;</span><br><span class="line">    <span class="keyword">private</span> JPasswordField passwordField;</span><br><span class="line">    <span class="keyword">private</span> JButton loginButton;</span><br><span class="line">    <span class="keyword">private</span> JButton registerButton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;登录界面&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>); <span class="comment">// 稍微增大窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        createAndShowGUI(); <span class="comment">// 调用 createAndShowGUI 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createAndShowGUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建主面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">mainPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>()); <span class="comment">// 使用 BorderLayout</span></span><br><span class="line">        mainPanel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)); <span class="comment">// 浅灰色背景</span></span><br><span class="line">        mainPanel.setBorder(<span class="keyword">new</span> <span class="title class_">EmptyBorder</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)); <span class="comment">// 设置边距</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        <span class="type">Font</span> <span class="variable">chineseFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">18</span>); <span class="comment">// 使用宋体，增大字号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建顶部面板，包含标题</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">titlePanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        titlePanel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)); <span class="comment">// 浅灰色背景</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">titleLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;用户登录&quot;</span>); <span class="comment">// 更友好的标题</span></span><br><span class="line">        titleLabel.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">24</span>)); <span class="comment">// 更现代的字体</span></span><br><span class="line">        titlePanel.add(titleLabel);</span><br><span class="line">        mainPanel.add(titlePanel, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建中心面板，包含用户名和密码输入框</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">centerPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 使用 GridLayout，增加间距</span></span><br><span class="line">        centerPanel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)); <span class="comment">// 浅灰色背景</span></span><br><span class="line">        centerPanel.setBorder(<span class="keyword">new</span> <span class="title class_">EmptyBorder</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>)); <span class="comment">// 设置内部边距</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">usernameLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;用户名:&quot;</span>);</span><br><span class="line">        usernameLabel.setFont(chineseFont);</span><br><span class="line">        centerPanel.add(usernameLabel);</span><br><span class="line"></span><br><span class="line">        usernameField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        usernameField.setFont(chineseFont);</span><br><span class="line">        centerPanel.add(usernameField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">passwordLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;密码:&quot;</span>);</span><br><span class="line">        passwordLabel.setFont(chineseFont);</span><br><span class="line">        centerPanel.add(passwordLabel);</span><br><span class="line"></span><br><span class="line">        passwordField = <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();</span><br><span class="line">        passwordField.setFont(chineseFont);</span><br><span class="line">        centerPanel.add(passwordField);</span><br><span class="line">        mainPanel.add(centerPanel, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建底部面板，包含登录和注册按钮</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">buttonPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.CENTER, <span class="number">20</span>, <span class="number">0</span>)); <span class="comment">// 使用 FlowLayout, 增加按钮间距</span></span><br><span class="line">        buttonPanel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)); <span class="comment">// 浅灰色背景</span></span><br><span class="line"></span><br><span class="line">        loginButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">        loginButton.setFont(chineseFont);</span><br><span class="line">        loginButton.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">59</span>, <span class="number">89</span>, <span class="number">182</span>)); <span class="comment">// 更醒目的颜色</span></span><br><span class="line">        loginButton.setForeground(Color.WHITE);</span><br><span class="line">        loginButton.setFocusPainted(<span class="literal">false</span>); <span class="comment">// 移除焦点边框</span></span><br><span class="line">        buttonPanel.add(loginButton);</span><br><span class="line"></span><br><span class="line">        registerButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">        registerButton.setFont(chineseFont);</span><br><span class="line">        registerButton.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">59</span>, <span class="number">89</span>, <span class="number">182</span>)); <span class="comment">// 更醒目的颜色</span></span><br><span class="line">        registerButton.setForeground(Color.WHITE);</span><br><span class="line">        registerButton.setFocusPainted(<span class="literal">false</span>); <span class="comment">// 移除焦点边框</span></span><br><span class="line">        buttonPanel.add(registerButton);</span><br><span class="line">        mainPanel.add(buttonPanel, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加事件监听器</span></span><br><span class="line">        loginButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里添加登录逻辑</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> usernameField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(passwordField.getPassword()); <span class="comment">// 获取密码</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span>  验证用户名和密码</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;password&quot;</span>.equals(password)) &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">                    <span class="comment">// 登录成功后，创建并显示员工信息管理界面</span></span><br><span class="line">                    SwingUtilities.invokeLater(() -&gt; &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">EmployeeManagementFrame</span>().setVisible(<span class="literal">true</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    LoginFrame.<span class="built_in">this</span>.dispose(); <span class="comment">// 关闭登录界面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;用户名或密码错误!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        registerButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 在这里添加注册逻辑</span></span><br><span class="line">                JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;注册功能尚未实现!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加面板到窗体</span></span><br><span class="line">        <span class="built_in">this</span>.add(mainPanel);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SwingUtilities.invokeLater(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LoginFrame</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独立的继承内容"><a href="#独立的继承内容" class="headerlink" title="独立的继承内容"></a>独立的继承内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LoginFrame</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;登录界面&quot;</span>);  </span><br><span class="line">    <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>); <span class="comment">// 稍微增大窗口  </span></span><br><span class="line">    <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  </span><br><span class="line">    <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);  </span><br><span class="line">    createAndShowGUI(); <span class="comment">// 调用 createAndShowGUI 方法  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="人事系统-弹出添加员工信息的界面-AI"><a href="#人事系统-弹出添加员工信息的界面-AI" class="headerlink" title="人事系统 弹出添加员工信息的界面 AI"></a>人事系统 弹出添加员工信息的界面 AI</h2><h3 id="员工信息类EmployeeManagementFrame源码"><a href="#员工信息类EmployeeManagementFrame源码" class="headerlink" title="员工信息类EmployeeManagementFrame源码"></a>员工信息类EmployeeManagementFrame源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EmptyBorder;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeManagementFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JTextField idField, genderField, ageField, phoneField, positionField, hireDateField, salaryField, departmentField;</span><br><span class="line">    <span class="keyword">private</span> JButton addButton, deleteButton, updateButton;</span><br><span class="line">    <span class="keyword">private</span> JTextArea displayArea;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Employee&gt; employeeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 存储员工信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EmployeeManagementFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;员工信息管理&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); <span class="comment">// 关闭窗口时只关闭当前窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        createAndShowGUI();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createAndShowGUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 主面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">mainPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        mainPanel.setBorder(<span class="keyword">new</span> <span class="title class_">EmptyBorder</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顶部面板，用于输入员工信息</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">inputPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">8</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">        inputPanel.setBorder(BorderFactory.createTitledBorder(<span class="string">&quot;员工信息&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Font</span> <span class="variable">labelFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">16</span>);</span><br><span class="line">        <span class="type">Font</span> <span class="variable">fieldFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">idLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;ID:&quot;</span>);</span><br><span class="line">        idLabel.setFont(labelFont);</span><br><span class="line">        idField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        idField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(idLabel);</span><br><span class="line">        inputPanel.add(idField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">genderLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;性别:&quot;</span>);</span><br><span class="line">        genderLabel.setFont(labelFont);</span><br><span class="line">        genderField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        genderField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(genderLabel);</span><br><span class="line">        inputPanel.add(genderField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">ageLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;年龄:&quot;</span>);</span><br><span class="line">        ageLabel.setFont(labelFont);</span><br><span class="line">        ageField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        ageField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(ageLabel);</span><br><span class="line">        inputPanel.add(ageField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">phoneLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;电话:&quot;</span>);</span><br><span class="line">        phoneLabel.setFont(labelFont);</span><br><span class="line">        phoneField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        phoneField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(phoneLabel);</span><br><span class="line">        inputPanel.add(phoneField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">positionLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;职位:&quot;</span>);</span><br><span class="line">        positionLabel.setFont(labelFont);</span><br><span class="line">        positionField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        positionField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(positionLabel);</span><br><span class="line">        inputPanel.add(positionField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">hireDateLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;入职时间:&quot;</span>);</span><br><span class="line">        hireDateLabel.setFont(labelFont);</span><br><span class="line">        hireDateField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        hireDateField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(hireDateLabel);</span><br><span class="line">        inputPanel.add(hireDateField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">salaryLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;薪水:&quot;</span>);</span><br><span class="line">        salaryLabel.setFont(labelFont);</span><br><span class="line">        salaryField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        salaryField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(salaryLabel);</span><br><span class="line">        inputPanel.add(salaryField);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">departmentLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;部门信息:&quot;</span>);</span><br><span class="line">        departmentLabel.setFont(labelFont);</span><br><span class="line">        departmentField = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        departmentField.setFont(fieldFont);</span><br><span class="line">        inputPanel.add(departmentLabel);</span><br><span class="line">        inputPanel.add(departmentField);</span><br><span class="line"></span><br><span class="line">        mainPanel.add(inputPanel, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中心面板，用于显示员工信息</span></span><br><span class="line">        displayArea = <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">        displayArea.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Monospaced&quot;</span>, Font.PLAIN, <span class="number">14</span>));</span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(displayArea);</span><br><span class="line">        mainPanel.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 底部面板，包含添加、删除和修改按钮</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">buttonPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.CENTER, <span class="number">20</span>, <span class="number">0</span>));</span><br><span class="line">        addButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">        deleteButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">        updateButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">        buttonPanel.add(addButton);</span><br><span class="line">        buttonPanel.add(deleteButton);</span><br><span class="line">        buttonPanel.add(updateButton);</span><br><span class="line"></span><br><span class="line">        mainPanel.add(buttonPanel, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加事件监听器</span></span><br><span class="line">        addButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 添加员工信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> idField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> genderField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> ageField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> phoneField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">position</span> <span class="operator">=</span> positionField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">hireDate</span> <span class="operator">=</span> hireDateField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">salary</span> <span class="operator">=</span> salaryField.getText();</span><br><span class="line">                <span class="type">String</span> <span class="variable">department</span> <span class="operator">=</span> departmentField.getText();</span><br><span class="line"></span><br><span class="line">                <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(id, gender, age, phone, position, hireDate, salary, department);</span><br><span class="line">                employeeList.add(employee);</span><br><span class="line"></span><br><span class="line">                updateDisplayArea(); <span class="comment">// 更新显示区域</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 清空输入框</span></span><br><span class="line">                idField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                genderField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                ageField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                phoneField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                positionField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                hireDateField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                salaryField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                departmentField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        deleteButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 删除员工信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">idToDelete</span> <span class="operator">=</span> JOptionPane.showInputDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;请输入要删除的员工ID:&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (idToDelete != <span class="literal">null</span> &amp;&amp; !idToDelete.isEmpty()) &#123;</span><br><span class="line">                    Iterator&lt;Employee&gt; iterator = employeeList.iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                        <span class="keyword">if</span> (employee.getId().equals(idToDelete)) &#123;</span><br><span class="line">                            iterator.remove(); <span class="comment">// 使用迭代器删除元素</span></span><br><span class="line">                            updateDisplayArea(); <span class="comment">// 更新显示区域</span></span><br><span class="line">                            JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;员工信息删除成功!&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;未找到该ID的员工!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        updateButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 修改员工信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">idToUpdate</span> <span class="operator">=</span> JOptionPane.showInputDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;请输入要修改的员工ID:&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (idToUpdate != <span class="literal">null</span> &amp;&amp; !idToUpdate.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (employee.getId().equals(idToUpdate)) &#123;</span><br><span class="line">                            <span class="comment">// 弹出修改信息的对话框</span></span><br><span class="line">                            <span class="type">JPanel</span> <span class="variable">updatePanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">genderFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getGender());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">ageFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getAge());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">phoneFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getPhone());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">positionFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getPosition());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">hireDateFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getHireDate());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">salaryFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getSalary());</span><br><span class="line">                            <span class="type">JTextField</span> <span class="variable">departmentFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getDepartment());</span><br><span class="line"></span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;性别:&quot;</span>));</span><br><span class="line">                            updatePanel.add(genderFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;年龄:&quot;</span>));</span><br><span class="line">                            updatePanel.add(ageFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;电话:&quot;</span>));</span><br><span class="line">                            updatePanel.add(phoneFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;职位:&quot;</span>));</span><br><span class="line">                            updatePanel.add(positionFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;入职时间:&quot;</span>));</span><br><span class="line">                            updatePanel.add(hireDateFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;薪水:&quot;</span>));</span><br><span class="line">                            updatePanel.add(salaryFieldUpdate);</span><br><span class="line">                            updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;部门:&quot;</span>));</span><br><span class="line">                            updatePanel.add(departmentFieldUpdate);</span><br><span class="line"></span><br><span class="line">                            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(EmployeeManagementFrame.<span class="built_in">this</span>, updatePanel, <span class="string">&quot;修改员工信息&quot;</span>, JOptionPane.OK_CANCEL_OPTION);</span><br><span class="line">                            <span class="keyword">if</span> (result == JOptionPane.OK_OPTION) &#123;</span><br><span class="line">                                <span class="comment">// 更新员工信息</span></span><br><span class="line">                                employee.setGender(genderFieldUpdate.getText());</span><br><span class="line">                                employee.setAge(ageFieldUpdate.getText());</span><br><span class="line">                                employee.setPhone(phoneFieldUpdate.getText());</span><br><span class="line">                                employee.setPosition(positionFieldUpdate.getText());</span><br><span class="line">                                employee.setHireDate(hireDateFieldUpdate.getText());</span><br><span class="line">                                employee.setSalary(salaryFieldUpdate.getText());</span><br><span class="line">                                employee.setDepartment(departmentFieldUpdate.getText());</span><br><span class="line"></span><br><span class="line">                                updateDisplayArea(); <span class="comment">// 更新显示区域</span></span><br><span class="line">                                JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;员工信息修改成功!&quot;</span>);</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;未找到该ID的员工!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.add(mainPanel);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新显示区域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateDisplayArea</span><span class="params">()</span> &#123;</span><br><span class="line">        displayArea.setText(<span class="string">&quot;&quot;</span>); <span class="comment">// 清空显示区域</span></span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">employeeInfo</span> <span class="operator">=</span> String.format(<span class="string">&quot;ID: %s, 性别: %s, 年龄: %s, 电话: %s, 职位: %s, 入职时间: %s, 薪水: %s, 部门: %s\n&quot;</span>,</span><br><span class="line">                    employee.getId(), employee.getGender(), employee.getAge(), employee.getPhone(), employee.getPosition(), employee.getHireDate(), employee.getSalary(), employee.getDepartment());</span><br><span class="line">            displayArea.append(employeeInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SwingUtilities.invokeLater(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">EmployeeManagementFrame</span>().setVisible(<span class="literal">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;```</span><br><span class="line">### Employee类</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line">    <span class="keyword">private</span> String hireDate;</span><br><span class="line">    <span class="keyword">private</span> String salary;</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String gender, String age, String phone, String position, String hireDate, String salary, String department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">        <span class="built_in">this</span>.position = position;</span><br><span class="line">        <span class="built_in">this</span>.hireDate = hireDate;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPosition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(String position)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHireDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hireDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHireDate</span><span class="params">(String hireDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hireDate = hireDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(String salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDepartment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDepartment</span><span class="params">(String department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义管理窗口"><a href="#自定义管理窗口" class="headerlink" title="自定义管理窗口"></a>自定义管理窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">EmployeeManagementFrame</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;员工信息管理&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.setSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); <span class="comment">// 关闭窗口时只关闭当前窗口</span></span><br><span class="line">    <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">    createAndShowGUI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将相关的数据全部放到类的前面，作为全局变量</span></span><br></pre></td></tr></table></figure><h2 id="人事系统-登录功能-人工"><a href="#人事系统-登录功能-人工" class="headerlink" title="人事系统 登录功能 人工"></a>人事系统 登录功能 人工</h2><p>系统中需要存储用户信息，我们可以先开发注册功能，注册一些用户信息，为了简化操作，我们可以直接在系统当中存放一些用户信息。<br>准备一个集合容器，存储系统中全部的用户信息</p><h3 id="用户信息集合容器"><a href="#用户信息集合容器" class="headerlink" title="用户信息集合容器"></a>用户信息集合容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();  </span><br><span class="line"><span class="comment">//初始化几个测试用户对象信息，作为登录用  </span></span><br><span class="line"><span class="keyword">static</span> &#123;  </span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Shiokou&quot;</span>, <span class="string">&quot;Shiokou&quot;</span>));  </span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Shiokou1&quot;</span>, <span class="string">&quot;Shiokou1&quot;</span>));  </span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Shiokou2&quot;</span>, <span class="string">&quot;Shiokou2&quot;</span>));  </span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Shiokou3&quot;</span>, <span class="string">&quot;Shiokou3&quot;</span>));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ul><li>给登录按钮绑定一个点击事件监听器</li><li>一旦点击登录按钮，就拿到输入框输入用户名和密码</li><li>去集合当中查看是否存在这个用户对象，如果通过认证，则跳转到信息管理界面，登录失败就弹出提示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">loginButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;  </span><br><span class="line">        <span class="comment">// 在这里添加登录逻辑  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> usernameField.getText();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(passwordField.getPassword()); <span class="comment">// 获取密码  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 验证用户名和密码  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (user.getUsername().equals(username) &amp;&amp; user.getPassword().equals(password)) &#123;  </span><br><span class="line">                authenticated = <span class="literal">true</span>;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (authenticated) &#123;  </span><br><span class="line">            JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;登录成功!&quot;</span>);  </span><br><span class="line">            <span class="comment">// 登录成功后，创建并显示员工信息管理界面  </span></span><br><span class="line">            SwingUtilities.invokeLater(() -&gt; &#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">EmployeeManagementFrame</span>().setVisible(<span class="literal">true</span>);  </span><br><span class="line">            &#125;);  </span><br><span class="line">            LoginFrame.<span class="built_in">this</span>.dispose(); <span class="comment">// 关闭登录界面  </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;用户名或密码错误!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="注册功能追加"><a href="#注册功能追加" class="headerlink" title="注册功能追加"></a>注册功能追加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">registerButton.addActionListener(e -&gt; &#123;  </span><br><span class="line">    <span class="comment">// 创建注册界面  </span></span><br><span class="line">    <span class="type">JPanel</span> <span class="variable">registerPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>));  </span><br><span class="line">    <span class="type">JTextField</span> <span class="variable">registerUsernameField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>();  </span><br><span class="line">    <span class="type">JPasswordField</span> <span class="variable">registerPasswordField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();  </span><br><span class="line">    <span class="type">JPasswordField</span> <span class="variable">confirmPasswordField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();  </span><br><span class="line">  </span><br><span class="line">    registerPanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;用户名:&quot;</span>));  </span><br><span class="line">    registerPanel.add(registerUsernameField);  </span><br><span class="line">    registerPanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;密码:&quot;</span>));  </span><br><span class="line">    registerPanel.add(registerPasswordField);  </span><br><span class="line">    registerPanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;确认密码:&quot;</span>));  </span><br><span class="line">    registerPanel.add(confirmPasswordField);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(LoginFrame.<span class="built_in">this</span>, registerPanel, <span class="string">&quot;注册&quot;</span>, JOptionPane.OK_CANCEL_OPTION);  </span><br><span class="line">    <span class="keyword">if</span> (result == JOptionPane.OK_OPTION) &#123;  </span><br><span class="line">        <span class="comment">// 获取注册信息  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> registerUsernameField.getText();  </span><br><span class="line">        <span class="type">char</span>[] password = registerPasswordField.getPassword();  </span><br><span class="line">        <span class="type">char</span>[] confirmPassword = confirmPasswordField.getPassword();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 验证用户名是否已存在  </span></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (user.getUsername().equals(username)) &#123;  </span><br><span class="line">                JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;用户名已存在!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 验证密码和确认密码是否一致  </span></span><br><span class="line">        <span class="keyword">if</span> (!Arrays.equals(password, confirmPassword)) &#123;  </span><br><span class="line">            JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;密码和确认密码不一致!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建新用户  </span></span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="keyword">new</span> <span class="title class_">String</span>(password));  </span><br><span class="line">        users.add(newUser);  </span><br><span class="line">  </span><br><span class="line">        JOptionPane.showMessageDialog(LoginFrame.<span class="built_in">this</span>, <span class="string">&quot;注册成功!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="完成信息管理界面的核心开发"><a href="#完成信息管理界面的核心开发" class="headerlink" title="完成信息管理界面的核心开发"></a>完成信息管理界面的核心开发</h2><h3 id="界面的用户信息"><a href="#界面的用户信息" class="headerlink" title="界面的用户信息"></a>界面的用户信息</h3><h4 id="有参构造器"><a href="#有参构造器" class="headerlink" title="有参构造器"></a>有参构造器</h4><ul><li>登录成功后将登录信息传给信息管理界面</li><li>通过有参构造器的使用，调用的时候传入用户的姓名信息。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">EmployeeManagementFrame</span><span class="params">(String username)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;欢迎，&quot;</span>+username+<span class="string">&quot;进入人事信息管理界面&quot;</span>);  </span><br><span class="line">    <span class="built_in">this</span>.username = username;  </span><br><span class="line">    frame =<span class="built_in">this</span>;  </span><br><span class="line">    createAndShowGUI();  </span><br><span class="line">    <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加员工信息的功能<ul><li>准备一个静态的集合，存储系统中的所有员工信息</li><li>给添加事件绑定事件</li><li>点击添加按钮后，弹出一个添加员工信息的输入框</li><li>把员工信息封装成一个员工对象，存到系统当中去，然后刷新表格，展示最新添加的数据</li></ul></li></ul><h4 id="信息表现形式"><a href="#信息表现形式" class="headerlink" title="信息表现形式"></a>信息表现形式</h4><ul><li>用表格来表示用户的各种信息</li><li>修改的事件监听器</li><li>删除的事件监听器</li><li>添加的事件监听器</li></ul><h5 id="表格的表现形式"><a href="#表格的表现形式" class="headerlink" title="表格的表现形式"></a>表格的表现形式</h5><h5 id="添加的事件监听器"><a href="#添加的事件监听器" class="headerlink" title="添加的事件监听器"></a>添加的事件监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">addButton.addActionListener(e -&gt; &#123;  </span><br><span class="line">    <span class="comment">// 添加员工信息  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> idField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> genderField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> ageField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> phoneField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">position</span> <span class="operator">=</span> positionField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">hireDate</span> <span class="operator">=</span> hireDateField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">salary</span> <span class="operator">=</span> salaryField.getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">department</span> <span class="operator">=</span> departmentField.getText();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(id, gender, age, phone, position, hireDate, salary, department);  </span><br><span class="line">    employeeList.add(employee);  </span><br><span class="line">    employees.add(employee); <span class="comment">// 添加到静态集合  </span></span><br><span class="line">  </span><br><span class="line">    updateDisplayArea(); <span class="comment">// 更新显示区域  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 清空输入框  </span></span><br><span class="line">    idField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    genderField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    ageField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    phoneField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    positionField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    hireDateField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    salaryField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    departmentField.setText(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="删除的事件监听器"><a href="#删除的事件监听器" class="headerlink" title="删除的事件监听器"></a>删除的事件监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eleteMenuItem.addActionListener(e -&gt; &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">selectedRow</span> <span class="operator">=</span> employeeTable.getSelectedRow();  </span><br><span class="line">    <span class="keyword">if</span> (selectedRow != -<span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employeeToDelete</span> <span class="operator">=</span> employees.get(selectedRow);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;确定要删除员工 &quot;</span> + employeeToDelete.getId() + <span class="string">&quot; 吗?&quot;</span>, <span class="string">&quot;删除确认&quot;</span>, JOptionPane.YES_NO_OPTION);  </span><br><span class="line">        <span class="keyword">if</span> (result == JOptionPane.YES_OPTION) &#123;  </span><br><span class="line">            employees.remove(selectedRow);  </span><br><span class="line">            updateDisplayArea(); <span class="comment">// 更新显示区域  </span></span><br><span class="line">            JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;员工信息删除成功!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;请选择要删除的员工!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="修改的事件监听器"><a href="#修改的事件监听器" class="headerlink" title="修改的事件监听器"></a>修改的事件监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">updateMenuItem.addActionListener(e -&gt; &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">selectedRow</span> <span class="operator">=</span> employeeTable.getSelectedRow();  </span><br><span class="line">    <span class="keyword">if</span> (selectedRow != -<span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employees.get(selectedRow);  </span><br><span class="line">        <span class="comment">// 弹出修改信息的对话框  </span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">updatePanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>));  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">genderFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getGender());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">ageFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getAge());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">phoneFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getPhone());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">positionFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getPosition());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">hireDateFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getHireDate());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">salaryFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getSalary());  </span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">departmentFieldUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(employee.getDepartment());  </span><br><span class="line">  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;性别:&quot;</span>));  </span><br><span class="line">        updatePanel.add(genderFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;年龄:&quot;</span>));  </span><br><span class="line">        updatePanel.add(ageFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;电话:&quot;</span>));  </span><br><span class="line">        updatePanel.add(phoneFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;职位:&quot;</span>));  </span><br><span class="line">        updatePanel.add(positionFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;入职时间:&quot;</span>));  </span><br><span class="line">        updatePanel.add(hireDateFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;薪水:&quot;</span>));  </span><br><span class="line">        updatePanel.add(salaryFieldUpdate);  </span><br><span class="line">        updatePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;部门:&quot;</span>));  </span><br><span class="line">        updatePanel.add(departmentFieldUpdate);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(EmployeeManagementFrame.<span class="built_in">this</span>, updatePanel, <span class="string">&quot;修改员工信息&quot;</span>, JOptionPane.OK_CANCEL_OPTION);  </span><br><span class="line">        <span class="keyword">if</span> (result == JOptionPane.OK_OPTION) &#123;  </span><br><span class="line">            <span class="comment">// 更新员工信息  </span></span><br><span class="line">            employee.setGender(genderFieldUpdate.getText());  </span><br><span class="line">            employee.setAge(ageFieldUpdate.getText());  </span><br><span class="line">            employee.setPhone(phoneFieldUpdate.getText());  </span><br><span class="line">            employee.setPosition(positionFieldUpdate.getText());  </span><br><span class="line">            employee.setHireDate(hireDateFieldUpdate.getText());  </span><br><span class="line">            employee.setSalary(salaryFieldUpdate.getText());  </span><br><span class="line">            employee.setDepartment(departmentFieldUpdate.getText());  </span><br><span class="line">  </span><br><span class="line">            updateDisplayArea(); <span class="comment">// 更新显示区域  </span></span><br><span class="line">            JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;员工信息修改成功!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        JOptionPane.showMessageDialog(EmployeeManagementFrame.<span class="built_in">this</span>, <span class="string">&quot;请选择要修改的员工!&quot;</span>, <span class="string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="鼠标行动监听器"><a href="#鼠标行动监听器" class="headerlink" title="鼠标行动监听器"></a>鼠标行动监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">employeeTable.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (e.isPopupTrigger()) &#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> employeeTable.rowAtPoint(e.getPoint());  </span><br><span class="line">                <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; employeeTable.getRowCount()) &#123;  </span><br><span class="line">                    employeeTable.setRowSelectionInterval(row, row);  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    employeeTable.clearSelection();  </span><br><span class="line">                &#125;  </span><br><span class="line">                popupMenu.show(e.getComponent(), e.getX(), e.getY());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">this</span>.add(mainPanel);  </span><br><span class="line">    <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化表格数据  </span></span><br><span class="line">    updateDisplayArea();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="美化GUI界面"><a href="#美化GUI界面" class="headerlink" title="美化GUI界面"></a>美化GUI界面</h3><h4 id="ImagePanel类"><a href="#ImagePanel类" class="headerlink" title="ImagePanel类"></a>ImagePanel类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiokou.HM.ui;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.*;  </span><br><span class="line"><span class="keyword">import</span> java.awt.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImagePanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Image image;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImagePanel</span><span class="params">(String imagePath)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getResourceAsStream(imagePath);  </span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;  </span><br><span class="line">                image = ImageIO.read(inputStream);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                System.err.println(<span class="string">&quot;找不到图片: &quot;</span> + imagePath);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;  </span><br><span class="line">            ex.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.paintComponent(g);  </span><br><span class="line">        <span class="keyword">if</span> (image != <span class="literal">null</span>) &#123;  </span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.getWidth(), <span class="built_in">this</span>.getHeight(), <span class="built_in">this</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;结合AI以及一些基本的GUI内容进行人事管理项目的开发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步：创建一个模块来做这个项目&lt;/li&gt;
&lt;li&gt;第二步：分析项目的业务需求&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;提供一个登录和注册用户的界面&lt;/li&gt;
&lt;li&gt;提供一个人事信息管理的</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第五章：面向对象编程</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2025-05-12T03:22:33.000Z</published>
    <updated>2025-05-12T03:24:47.108Z</updated>
    
    <content type="html"><![CDATA[<p>好的，我们用 Java 语言来详细说明面向对象编程 (OOP) 的概念、原则和实践。</p><h2 id="1-类-Class-和对象-Object"><a href="#1-类-Class-和对象-Object" class="headerlink" title="1. 类 (Class) 和对象 (Object)"></a><strong>1. 类 (Class) 和对象 (Object)</strong></h2><p>在 Java 中，类是创建对象的蓝图。 它定义了对象的属性（数据）和方法（行为）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 Dog 的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="comment">// 属性（成员变量）</span></span><br><span class="line">    String name;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法（成员函数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Breed: &quot;</span> + breed);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Dog 类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个名为 myDog 的 Dog 对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 myDog 对象的属性</span></span><br><span class="line">        myDog.name = <span class="string">&quot;Buddy&quot;</span>;</span><br><span class="line">        myDog.breed = <span class="string">&quot;Golden Retriever&quot;</span>;</span><br><span class="line">        myDog.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 myDog 对象的方法</span></span><br><span class="line">        myDog.bark(); <span class="comment">// 输出：Woof!</span></span><br><span class="line">        myDog.displayInfo();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Name: Buddy</span></span><br><span class="line">        <span class="comment">// Breed: Golden Retriever</span></span><br><span class="line">        <span class="comment">// Age: 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建另一个 Dog 对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">anotherDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        anotherDog.name = <span class="string">&quot;Lucy&quot;</span>;</span><br><span class="line">        anotherDog.breed = <span class="string">&quot;Poodle&quot;</span>;</span><br><span class="line">        anotherDog.age = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        anotherDog.displayInfo();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Name: Lucy</span></span><br><span class="line">        <span class="comment">// Breed: Poodle</span></span><br><span class="line">        <span class="comment">// Age: 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Dog</code> 类定义了狗的通用属性（<code>name</code>、<code>breed</code>、<code>age</code>）和行为（<code>bark</code>、<code>displayInfo</code>）。</li><li><code>myDog</code> 和 <code>anotherDog</code> 是 <code>Dog</code> 类的两个不同的对象，它们拥有各自的属性值。</li></ul><h2 id="2-封装-Encapsulation"><a href="#2-封装-Encapsulation" class="headerlink" title="2. 封装 (Encapsulation)"></a><strong>2. 封装 (Encapsulation)</strong></h2><p>在 Java 中，封装通过将属性声明为 <code>private</code>，并提供 <code>public</code> 的 getter 和 setter 方法来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBreed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBreed</span><span class="params">(String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Age cannot be negative.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Breed: &quot;</span> + breed);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 setter 方法设置属性</span></span><br><span class="line">        myDog.setName(<span class="string">&quot;Buddy&quot;</span>);</span><br><span class="line">        myDog.setBreed(<span class="string">&quot;Golden Retriever&quot;</span>);</span><br><span class="line">        myDog.setAge(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 getter 方法获取属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + myDog.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Breed: &quot;</span> + myDog.getBreed());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + myDog.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>、<code>breed</code> 和 <code>age</code> 属性被声明为 <code>private</code>，这意味着它们只能在 <code>Dog</code> 类内部访问。</li><li><code>getName</code>、<code>getBreed</code>、<code>getAge</code> 方法是 getter 方法，用于获取属性的值。</li><li><code>setName</code>、<code>setBreed</code>、<code>setAge</code> 方法是 setter 方法，用于设置属性的值。</li><li>setter 方法可以包含逻辑，例如，验证输入值的有效性（如 <code>setAge</code> 方法中的年龄验证）。</li></ul><h2 id="3-继承-Inheritance"><a href="#3-继承-Inheritance" class="headerlink" title="3. 继承 (Inheritance)"></a><strong>3. 继承 (Inheritance)</strong></h2><p>在 Java 中，使用 <code>extends</code> 关键字来实现继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 Animal 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 Dog 类，继承自 Animal 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String breed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的 eat 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>, <span class="string">&quot;Golden Retriever&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + myDog.name); <span class="comment">// 访问父类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Breed: &quot;</span> + myDog.breed); <span class="comment">// 访问子类的属性</span></span><br><span class="line">        myDog.eat(); <span class="comment">// 调用重写后的方法</span></span><br><span class="line">        myDog.bark(); <span class="comment">// 调用子类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Dog</code> 类继承了 <code>Animal</code> 类的 <code>name</code> 属性和 <code>eat</code> 方法。</li><li><code>Dog</code> 类添加了自己的属性 <code>breed</code> 和方法 <code>bark</code>。</li><li><code>Dog</code> 类重写了 <code>eat</code> 方法，提供了自己的实现。</li><li><code>super(name)</code> 用于调用父类的构造方法，初始化父类的属性。</li><li><code>@Override</code> 注解用于表示该方法是重写父类的方法。</li></ul><h2 id="4-多态-Polymorphism"><a href="#4-多态-Polymorphism" class="headerlink" title="4. 多态 (Polymorphism)"></a><strong>4. 多态 (Polymorphism)</strong></h2><p>在 Java 中，多态可以通过方法重写 (method overriding) 和接口 (interface) 来实现。</p><h3 id="1-方法重写-Method-Overriding"><a href="#1-方法重写-Method-Overriding" class="headerlink" title="1.  方法重写 (Method Overriding)"></a>1.  <strong>方法重写 (Method Overriding)</strong></h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Generic animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        animal1.makeSound(); <span class="comment">// 输出：Generic animal sound</span></span><br><span class="line">        animal2.makeSound(); <span class="comment">// 输出：Woof!</span></span><br><span class="line">        animal3.makeSound(); <span class="comment">// 输出：Meow!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>*   `Animal` 类有一个 `makeSound` 方法。*   `Dog` 和 `Cat` 类都继承了 `Animal` 类，并重写了 `makeSound` 方法。*   在 `main` 方法中，使用 `Animal` 类型的引用来引用 `Dog` 和 `Cat` 对象，调用 `makeSound` 方法时，会根据对象的实际类型来执行不同的方法。</code></pre><h3 id="2-接口-Interface"><a href="#2-接口-Interface" class="headerlink" title="2.  接口 (Interface)"></a>2.  <strong>接口 (Interface)</strong></h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        animal1.makeSound(); <span class="comment">// 输出：Woof!</span></span><br><span class="line">        animal2.makeSound(); <span class="comment">// 输出：Meow!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>*   `Animal` 接口定义了一个 `makeSound` 方法。*   `Dog` 和 `Cat` 类都实现了 `Animal` 接口，并提供了 `makeSound` 方法的实现。*   在 `main` 方法中，使用 `Animal` 类型的引用来引用 `Dog` 和 `Cat` 对象，调用 `makeSound` 方法时，会根据对象的实际类型来执行不同的方法。</code></pre><h2 id="5-抽象-Abstraction"><a href="#5-抽象-Abstraction" class="headerlink" title="5. 抽象 (Abstraction)"></a><strong>5. 抽象 (Abstraction)</strong></h2><p>在 Java 中，可以使用抽象类 (abstract class) 和接口 (interface) 来实现抽象。</p><h3 id="1-抽象类-Abstract-Class"><a href="#1-抽象类-Abstract-Class" class="headerlink" title="1.  抽象类 (Abstract Class)"></a>1.  <strong>抽象类 (Abstract Class)</strong></h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，没有具体实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 无法创建抽象类的对象</span></span><br><span class="line">        <span class="comment">// Animal animal = new Animal(&quot;Generic Animal&quot;); // 错误</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>);</span><br><span class="line">        myDog.makeSound(); <span class="comment">// 输出：Woof!</span></span><br><span class="line">        myDog.eat(); <span class="comment">// 输出：Animal is eating.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>*   抽象类使用 `abstract` 关键字声明。*   抽象类可以包含抽象方法（没有具体实现的方法）和普通方法。*   抽象类不能被实例化（不能创建对象）。*   子类必须实现抽象类中的所有抽象方法，除非子类也是抽象类。</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><strong>1. 接口的定义和声明</strong></p><p>接口使用 <code>interface</code> 关键字来声明。接口是一种完全抽象的类型，它定义了一组方法签名，但不提供方法的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 接口的成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 接口的成员</strong></p><ul><li><strong>抽象方法：</strong> 接口中的方法默认是 <code>public abstract</code>，可以省略 <code>public abstract</code> 关键字。这些方法没有方法体，必须由实现该接口的类来提供具体实现。</li><li><strong>常量：</strong> 接口可以包含常量，这些常量默认是 <code>public static final</code>。</li><li><strong>默认方法（Java 8+）：</strong> 接口可以包含默认方法，使用 <code>default</code> 关键字声明。默认方法提供了方法的默认实现，实现类可以选择性地覆盖这些方法。</li><li><strong>静态方法（Java 8+）：</strong> 接口可以包含静态方法，使用 <code>static</code> 关键字声明。静态方法属于接口本身，可以通过接口名直接调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MY_CONSTANT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">myDefaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 实现接口</strong></p><p>一个类使用 <code>implements</code> 关键字来实现一个或多个接口。实现接口的类必须提供接口中所有抽象方法的具体实现，除非该类是抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My method implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 接口的特性</strong></p><ul><li><strong>多重继承：</strong> 一个类可以实现多个接口，从而实现多重继承的效果。这是 Java 中解决多重继承问题的一种方式。</li><li><strong>类型声明：</strong> 接口可以作为一种类型来声明变量，从而实现多态。</li><li><strong>解耦合：</strong> 接口可以降低类之间的耦合度，提高代码的灵活性和可维护性。</li></ul><p><strong>5. 接口的用途</strong></p><ul><li><strong>定义规范：</strong> 接口可以定义一组规范，要求所有实现类都遵循这些规范。</li><li><strong>实现回调：</strong> 接口可以用于实现回调机制，即当某个事件发生时，通过接口调用实现类中的方法。</li><li><strong>实现插件化：</strong> 接口可以用于实现插件化架构，即通过接口定义插件的接口，然后由不同的类来实现这些插件。</li></ul><p><strong>6. 接口 vs 抽象类</strong></p><p>接口和抽象类都是用于实现抽象的机制，但它们之间有一些关键区别：</p><ul><li><strong>成员变量：</strong> 接口通常只有常量（<code>static final</code>），而抽象类可以有成员变量。</li><li><strong>方法实现：</strong> 接口在 Java 8 之前只能有抽象方法，而抽象类可以有已经实现的方法。Java 8 之后，接口可以有默认方法和静态方法。</li><li><strong>继承：</strong> 一个类只能继承一个抽象类，但可以实现多个接口。</li><li><strong>设计理念：</strong> 抽象类通常用于表示 “is-a” 关系，即子类是父类的一种特殊类型。接口通常用于表示 “can-do” 关系，即类可以实现接口中的行为。</li></ul><p><strong>7. 示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>; <span class="comment">// 接口中的方法默认是 public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        myDog.makeSound(); <span class="comment">// 输出：Woof!</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        myCat.makeSound(); <span class="comment">// 输出：Meow!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Animal</code> 是一个接口，它定义了一个 <code>makeSound</code> 抽象方法。<code>Dog</code> 和 <code>Cat</code> 类实现了 <code>Animal</code> 接口，并提供了 <code>makeSound</code> 方法的具体实现。</p><h2 id="什么是构造器？"><a href="#什么是构造器？" class="headerlink" title="什么是构造器？"></a><strong>什么是构造器？</strong></h2><p>构造器是一种特殊的方法，用于创建和初始化类的对象。 构造器的名称必须与类名相同，并且没有返回类型（即使是 <code>void</code> 也不行）。</p><h3 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a><strong>构造器的作用</strong></h3><ul><li><strong>创建对象</strong>：使用 <code>new</code> 关键字调用构造器来创建类的对象。</li><li><strong>初始化对象</strong>：构造器可以初始化对象的属性，设置对象的初始状态。</li></ul><h3 id="构造器的特点"><a href="#构造器的特点" class="headerlink" title="构造器的特点"></a><strong>构造器的特点</strong></h3><ul><li><strong>名称与类名相同</strong>：构造器的名称必须与类名完全相同（包括大小写）。</li><li><strong>没有返回类型</strong>：构造器没有返回类型，即使是 <code>void</code> 也不行。</li><li><strong>可以重载</strong>：一个类可以有多个构造器，只要它们的参数列表不同（参数类型、参数个数或参数顺序不同）。</li><li><strong>默认构造器</strong>：如果一个类没有显式地定义任何构造器，Java 编译器会自动为该类生成一个默认构造器。 默认构造器没有参数，并且不执行任何操作。</li><li><strong>构造器不能被继承</strong>：子类不能继承父类的构造器。</li><li><strong>构造器可以调用其他构造器</strong>：在一个构造器中可以使用 <code>this()</code> 调用同一个类的其他构造器。</li></ul><h3 id="构造器的声明"><a href="#构造器的声明" class="headerlink" title="构造器的声明"></a><strong>构造器的声明</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造器的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器的使用示例"><a href="#构造器的使用示例" class="headerlink" title="构造器的使用示例"></a><strong>构造器的使用示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        breed = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另一个带参数的构造器，调用上面的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, breed, <span class="number">0</span>); <span class="comment">// 调用 Dog(String name, String breed, int age) 构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Breed: &quot;</span> + breed);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用默认构造器创建对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.displayInfo();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Name: Unknown</span></span><br><span class="line">        <span class="comment">// Breed: Unknown</span></span><br><span class="line">        <span class="comment">// Age: 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用带参数的构造器创建对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>, <span class="string">&quot;Golden Retriever&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        dog2.displayInfo();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Name: Buddy</span></span><br><span class="line">        <span class="comment">// Breed: Golden Retriever</span></span><br><span class="line">        <span class="comment">// Age: 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用另一个带参数的构造器创建对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Lucy&quot;</span>, <span class="string">&quot;Poodle&quot;</span>);</span><br><span class="line">        dog3.displayInfo();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Name: Lucy</span></span><br><span class="line">        <span class="comment">// Breed: Poodle</span></span><br><span class="line">        <span class="comment">// Age: 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Dog</code> 类定义了三个构造器：一个默认构造器和两个带参数的构造器。</li><li>默认构造器将 <code>name</code>、<code>breed</code> 和 <code>age</code> 属性设置为默认值。</li><li>带参数的构造器使用传入的参数来初始化对象的属性。</li><li><code>this(name, breed, 0)</code> 用于调用同一个类的其他构造器。</li><li>在 <code>main</code> 方法中，使用不同的构造器来创建 <code>Dog</code> 对象，并调用 <code>displayInfo</code> 方法显示对象的信息。</li></ul><h3 id="构造器的作用-1"><a href="#构造器的作用-1" class="headerlink" title="构造器的作用"></a><strong>构造器的作用</strong></h3><ol><li><strong>初始化对象的状态</strong>：构造器可以设置对象的初始状态，确保对象在创建后处于一个有效的状态。</li><li><strong>强制执行初始化逻辑</strong>：构造器可以强制执行一些初始化逻辑，例如，验证输入参数的有效性，或者加载配置文件。</li><li><strong>简化对象创建</strong>：通过提供不同的构造器，可以方便地创建具有不同初始状态的对象。</li></ol><h3 id="构造器的注意事项"><a href="#构造器的注意事项" class="headerlink" title="构造器的注意事项"></a><strong>构造器的注意事项</strong></h3><ul><li>如果一个类没有显式地定义任何构造器，Java 编译器会自动为该类生成一个默认构造器。</li><li>如果一个类显式地定义了构造器，Java 编译器就不会再自动生成默认构造器。</li><li>子类不能继承父类的构造器，但可以使用 <code>super()</code> 关键字调用父类的构造器。</li><li>构造器应该尽量简单，避免在构造器中执行复杂的逻辑。</li></ul><h2 id="静态变量-Static-Variable"><a href="#静态变量-Static-Variable" class="headerlink" title="静态变量 (Static Variable)"></a><strong>静态变量 (Static Variable)</strong></h2><p>静态变量也称为类变量 (Class Variable)，它属于类，而不是属于类的任何特定对象。 这意味着无论创建多少个类的对象，静态变量在内存中只有一份拷贝。</p><h3 id="静态变量的特点"><a href="#静态变量的特点" class="headerlink" title="静态变量的特点"></a><strong>静态变量的特点</strong></h3><ul><li><strong>属于类</strong>：静态变量属于类，而不是属于类的任何特定对象。</li><li><strong>共享</strong>：所有类的对象共享同一个静态变量。</li><li><strong>内存中只有一份拷贝</strong>：无论创建多少个类的对象，静态变量在内存中只有一份拷贝。</li><li><strong>可以通过类名直接访问</strong>：可以使用 <code>类名.静态变量名</code> 的方式直接访问静态变量，而不需要创建类的对象。</li><li><strong>在类加载时初始化</strong>：静态变量在类加载时被初始化，并且只初始化一次。</li><li><strong>生命周期与类相同</strong>：静态变量的生命周期与类相同，当类被卸载时，静态变量才会被销毁。</li></ul><h3 id="静态变量的声明"><a href="#静态变量的声明" class="headerlink" title="静态变量的声明"></a><strong>静态变量的声明</strong></h3><p>使用 <code>static</code> 关键字来声明一个静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态变量的使用示例"><a href="#静态变量的使用示例" class="headerlink" title="静态变量的使用示例"></a><strong>静态变量的使用示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Counter</span><span class="params">()</span> &#123;</span><br><span class="line">        count++; <span class="comment">// 每次创建对象，count 加 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Number of objects created: &quot;</span> + Counter.count); <span class="comment">// 输出：Number of objects created: 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>count</code> 是一个静态变量，用于记录创建了多少个 <code>Counter</code> 对象。</li><li>每次创建 <code>Counter</code> 对象时，<code>count</code> 的值都会加 1。</li><li>可以使用 <code>Counter.count</code> 的方式直接访问静态变量，而不需要创建 <code>Counter</code> 对象。</li></ul><h3 id="静态方法-Static-Method"><a href="#静态方法-Static-Method" class="headerlink" title="静态方法 (Static Method)"></a><strong>静态方法 (Static Method)</strong></h3><p>静态方法也称为类方法 (Class Method)，它属于类，而不是属于类的任何特定对象。 静态方法只能访问静态变量和调用其他静态方法，不能访问非静态变量和调用非静态方法。</p><h3 id="静态方法的特点"><a href="#静态方法的特点" class="headerlink" title="静态方法的特点"></a><strong>静态方法的特点</strong></h3><ul><li><strong>属于类</strong>：静态方法属于类，而不是属于类的任何特定对象。</li><li><strong>可以通过类名直接调用</strong>：可以使用 <code>类名.静态方法名()</code> 的方式直接调用静态方法，而不需要创建类的对象。</li><li><strong>只能访问静态成员</strong>：静态方法只能访问静态变量和调用其他静态方法，不能访问非静态变量和调用非静态方法。</li><li><strong>不能使用 <code>this</code> 关键字</strong>：静态方法不能使用 <code>this</code> 关键字，因为 <code>this</code> 关键字指向当前对象，而静态方法不属于任何对象。</li></ul><h3 id="静态方法的声明"><a href="#静态方法的声明" class="headerlink" title="静态方法的声明"></a><strong>静态方法的声明</strong></h3><p>使用 <code>static</code> 关键字来声明一个静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法的使用示例"><a href="#静态方法的使用示例" class="headerlink" title="静态方法的使用示例"></a><strong>静态方法的使用示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>; <span class="comment">// 静态常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法，计算圆的面积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculateCircleArea</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">5.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> MathUtils.calculateCircleArea(radius); <span class="comment">// 调用静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Area of circle with radius &quot;</span> + radius + <span class="string">&quot; is: &quot;</span> + area); <span class="comment">// 输出：Area of circle with radius 5.0 is: 78.53975</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>calculateCircleArea</code> 是一个静态方法，用于计算圆的面积。</li><li>可以使用 <code>MathUtils.calculateCircleArea(radius)</code> 的方式直接调用静态方法，而不需要创建 <code>MathUtils</code> 对象。</li><li>静态方法可以访问静态常量 <code>PI</code>。</li></ul><h3 id="静态变量和静态方法的用途"><a href="#静态变量和静态方法的用途" class="headerlink" title="静态变量和静态方法的用途"></a><strong>静态变量和静态方法的用途</strong></h3><ul><li><strong>存储类级别的状态</strong>：静态变量可以用于存储类级别的状态，例如，记录创建了多少个对象，或者存储一些配置信息。</li><li><strong>提供工具方法</strong>：静态方法可以用于提供一些工具方法，例如，数学计算、字符串处理等。</li><li><strong>实现单例模式</strong>：静态变量和静态方法可以用于实现单例模式，确保一个类只有一个实例。</li></ul><h3 id="静态变量和静态方法的注意事项"><a href="#静态变量和静态方法的注意事项" class="headerlink" title="静态变量和静态方法的注意事项"></a><strong>静态变量和静态方法的注意事项</strong></h3><ul><li>静态变量在类加载时被初始化，并且只初始化一次。</li><li>静态方法只能访问静态变量和调用其他静态方法，不能访问非静态变量和调用非静态方法。</li><li>静态方法不能使用 <code>this</code> 关键字。</li><li>过度使用静态变量和静态方法可能会导致代码的耦合度增加，降低代码的可测试性和可维护性。</li></ul><h2 id="1-final-变量"><a href="#1-final-变量" class="headerlink" title="1.  final 变量:"></a>1.  <strong>final 变量</strong>:</h2><pre><code>*   表示常量，一旦被赋值后，其值不能被修改。*   `final` 变量必须在声明时或在类的构造器中初始化。*   对于基本类型，`final` 使数值不变；对于引用类型，`final` 使引用不可变，即不能指向其他对象，但对象自身的内容是可以改变的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// x 的值不能被修改</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// person 不能指向其他 Person 对象</span></span><br><span class="line">person.setName(<span class="string">&quot;Bob&quot;</span>); <span class="comment">// 但是可以修改 person 对象的内容</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="final-方法"><a href="#final-方法" class="headerlink" title="final 方法:"></a><strong>final 方法</strong>:</h3><pre><code>*   表示该方法不能被子类重写 (override)。*   使用 `final` 方法可以防止子类修改父类的行为，保证程序的安全性。*   `private` 方法默认是 `final` 的，因为它们不能在子类中被访问，所以也不能被重写。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a final method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 无法重写 display 方法</span></span><br><span class="line">    <span class="comment">// void display() &#123;&#125; // 编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="final-类"><a href="#final-类" class="headerlink" title="final 类:"></a><strong>final 类</strong>:</h3><pre><code>*   表示该类不能被继承。*   `final` 类通常用于创建不可变的类，例如 `String` 类。*   `final` 类中的所有方法都隐式地是 `final` 的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ImmutableClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImmutableClass</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法继承 ImmutableClass</span></span><br><span class="line"><span class="comment">// class SubClass extends ImmutableClass &#123;&#125; // 编译错误</span></span><br></pre></td></tr></table></figure></code></pre><p>总结：</p><ul><li><code>final</code> 变量：保证变量引用的对象不变。</li><li><code>final</code> 方法：保证方法不被子类重写。</li><li><code>final</code> 类：保证类不被继承。</li></ul><p>使用 <code>final</code> 关键字可以提高代码的健壮性和安全性，但也可能降低代码的灵活性。</p><h2 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h2><h3 id="1-饿汉式（Eager-Initialization）"><a href="#1-饿汉式（Eager-Initialization）" class="headerlink" title="1. 饿汉式（Eager Initialization）"></a><strong>1. 饿汉式（Eager Initialization）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个静态的、final 的实例。</span></span><br><span class="line">    <span class="comment">//    - static 保证该实例在类加载时就被创建，且只有一个。</span></span><br><span class="line">    <span class="comment">//    - final 保证该实例创建后不可被修改。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 私有化构造函数。</span></span><br><span class="line">    <span class="comment">//    - private 关键字确保外部类无法直接通过 new 关键字创建 Singleton 类的实例。</span></span><br><span class="line">    <span class="comment">//    - 这是实现单例模式的关键步骤，防止外部随意创建对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 提供一个公共的静态方法来获取单例实例。</span></span><br><span class="line">    <span class="comment">//    - static 关键字允许直接通过类名调用该方法，无需创建对象。</span></span><br><span class="line">    <span class="comment">//    - 该方法返回上面创建的唯一实例。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点：</strong> 实现简单，线程安全（因为实例在类加载时创建）。</li><li><strong>缺点：</strong> 无论是否使用，实例都会在类加载时创建，可能造成资源浪费。</li></ul><h3 id="2-懒汉式（Lazy-Initialization）"><a href="#2-懒汉式（Lazy-Initialization）" class="headerlink" title="2. 懒汉式（Lazy Initialization）"></a><strong>2. 懒汉式（Lazy Initialization）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 静态私有成员变量，用于存储单例实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部类通过 new 关键字创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 可以在这里添加一些初始化逻辑</span></span><br><span class="line">        <span class="comment">// 例如：初始化一些配置信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态公共方法，用于获取单例实例</span></span><br><span class="line">    <span class="comment">// 使用 synchronized 关键字保证线程安全，防止多线程环境下创建多个实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果实例为空，则创建实例</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回单例实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点：</strong> 延迟加载，只有在第一次调用 <code>getInstance()</code> 方法时才会创建实例。</li><li><strong>缺点：</strong> 线程安全问题。在多线程环境下，可能会创建多个实例。使用 <code>synchronized</code> 关键字可以解决线程安全问题，但会降低性能。</li></ul><h3 id="3-双重检查锁（Double-Checked-Locking）"><a href="#3-双重检查锁（Double-Checked-Locking）" class="headerlink" title="3. 双重检查锁（Double-Checked Locking）"></a><strong>3. 双重检查锁（Double-Checked Locking）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 volatile 关键字确保多线程环境下的可见性</span></span><br><span class="line">    <span class="comment">// 当 instance 被初始化后，所有线程都能立即看到最新的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以添加一些初始化逻辑，例如读取配置文件等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局访问点，获取 Singleton 实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次检查，如果 instance 已经创建，则直接返回，避免进入同步块</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用 synchronized 关键字对 Singleton.class 进行同步</span></span><br><span class="line">            <span class="comment">// 保证只有一个线程可以进入该代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 第二次检查，防止多个线程同时进入同步块后重复创建实例</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 创建 Singleton 实例</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                    <span class="comment">// 这行代码实际上做了三件事：</span></span><br><span class="line">                    <span class="comment">// 1. 分配内存空间</span></span><br><span class="line">                    <span class="comment">// 2. 初始化 Singleton 对象</span></span><br><span class="line">                    <span class="comment">// 3. 将 instance 指向分配的内存地址</span></span><br><span class="line">                    <span class="comment">// 由于指令重排序的存在，可能会导致 1-&gt;3-&gt;2 的执行顺序</span></span><br><span class="line">                    <span class="comment">// 这就是为什么需要 volatile 关键字的原因</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 Singleton 实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点：</strong> 延迟加载，线程安全，性能相对较高。</li><li><strong>缺点：</strong> 实现较为复杂。需要使用 <code>volatile</code> 关键字来防止指令重排序。</li></ul><h3 id="4-静态内部类（Static-Inner-Class）"><a href="#4-静态内部类（Static-Inner-Class）" class="headerlink" title="4. 静态内部类（Static Inner Class）"></a><strong>4. 静态内部类（Static Inner Class）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部类直接实例化该类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 可以添加一些初始化逻辑，如果需要的话</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类，用于延迟加载 Singleton 实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="comment">// 在类加载时就创建 Singleton 实例，保证线程安全</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的静态方法，用于获取 Singleton 实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回内部类持有的唯一实例</span></span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点：</strong> 延迟加载，线程安全，实现简单。</li><li><strong>缺点：</strong> 无。这是推荐的单例模式实现方式。</li></ul><h3 id="5-枚举（Enum）"><a href="#5-枚举（Enum）" class="headerlink" title="5. 枚举（Enum）"></a><strong>5. 枚举（Enum）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点：</strong> 简洁，线程安全，防止反射攻击和序列化问题。</li><li><strong>缺点：</strong> 不能延迟加载，不适用于需要传递参数给构造函数的情况。</li></ul><p><strong>总结：</strong></p><ul><li>如果不需要延迟加载，推荐使用<strong>饿汉式</strong>或<strong>枚举</strong>。</li><li>如果需要延迟加载，推荐使用<strong>静态内部类</strong>。</li><li><strong>双重检查锁</strong>实现较为复杂，需要注意 <code>volatile</code> 关键字的使用。</li><li><strong>懒汉式</strong>在多线程环境下存在线程安全问题，不推荐使用。</li></ul><h2 id="Java-抽象类。"><a href="#Java-抽象类。" class="headerlink" title="Java 抽象类。"></a>Java 抽象类。</h2><h3 id="1-抽象类的定义和声明"><a href="#1-抽象类的定义和声明" class="headerlink" title="1. 抽象类的定义和声明"></a><strong>1. 抽象类的定义和声明</strong></h3><p>抽象类使用 <code>abstract</code> 关键字来声明。一个类被声明为抽象类，意味着它可能包含抽象方法，也可能不包含。关键在于，抽象类不能被直接实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 类的成员变量和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-抽象方法"><a href="#2-抽象方法" class="headerlink" title="2. 抽象方法"></a><strong>2. 抽象方法</strong></h3><p>抽象方法是没有方法体的方法，只有方法签名。它也使用 <code>abstract</code> 关键字声明。抽象方法必须存在于抽象类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法，没有具体实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-抽象类与普通类的区别"><a href="#3-抽象类与普通类的区别" class="headerlink" title="3. 抽象类与普通类的区别"></a><strong>3. 抽象类与普通类的区别</strong></h3><ul><li><strong>实例化：</strong> 抽象类不能被实例化，而普通类可以。</li><li><strong>抽象方法：</strong> 抽象类可以包含抽象方法，而普通类不能。如果一个类包含抽象方法，那么这个类必须声明为抽象类。</li><li><strong>实现：</strong> 抽象类可以包含已经实现的方法（即非抽象方法），而普通类只能包含已经实现的方法。</li></ul><h3 id="4-继承抽象类"><a href="#4-继承抽象类" class="headerlink" title="4. 继承抽象类"></a><strong>4. 继承抽象类</strong></h3><p>当一个类继承抽象类时，它需要遵循以下规则：</p><ul><li><strong>实现所有抽象方法：</strong> 如果子类不是抽象类，那么它必须实现父类中的所有抽象方法。</li><li><strong>声明为抽象类：</strong> 如果子类不想实现父类中的所有抽象方法，那么子类必须声明为抽象类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类 Shape</span></span><br><span class="line"><span class="comment">// 抽象类不能被实例化，只能被继承</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法 getArea()</span></span><br><span class="line">    <span class="comment">// 抽象方法没有具体实现，必须由子类实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非抽象方法 display()</span></span><br><span class="line">    <span class="comment">// 非抽象方法有具体实现，子类可以选择重写或直接继承</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a shape.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Circle 继承自 Shape</span></span><br><span class="line"><span class="comment">// Circle 是一个具体的类，可以被实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 私有成员变量 radius，表示圆的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，用于初始化 Circle 对象的 radius</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的抽象方法 getArea()</span></span><br><span class="line">    <span class="comment">// 实现计算圆的面积的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象子类 Polygon 继承自 Shape</span></span><br><span class="line"><span class="comment">// Polygon 是一个抽象类，不能被实例化</span></span><br><span class="line"><span class="comment">// Polygon 继承了 Shape 的抽象方法 getArea()，但没有实现它，所以 Polygon 仍然是抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Polygon</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法 getNumberOfSides()</span></span><br><span class="line">    <span class="comment">// 抽象方法没有具体实现，必须由子类实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getNumberOfSides</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-构造器"><a href="#5-构造器" class="headerlink" title="5. 构造器"></a><strong>5. 构造器</strong></h3><p>抽象类可以有构造器。虽然不能直接实例化抽象类，但是当创建子类实例时，抽象类的构造器会被调用。构造器通常用于初始化抽象类的成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 动物的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动物类的构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 动物的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 初始化动物的名字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Animal constructor called.&quot;</span>); <span class="comment">// 打印构造器被调用的信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取动物的名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 动物的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name; <span class="comment">// 返回动物的名字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，用于定义动物发出声音的行为。</span></span><br><span class="line"><span class="comment">     * 具体的实现由子类完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dog 类，继承自 Animal 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dog 类的构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 狗的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 调用父类（Animal）的构造器，初始化狗的名字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的 makeSound 方法，实现狗发出声音的行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>); <span class="comment">// 打印狗叫的声音</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主类，包含 main 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法，程序的入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>); <span class="comment">// 创建一个 Dog 对象，名字是 &quot;Buddy&quot;，会调用 Animal 的构造器，输出 &quot;Animal constructor called.&quot;</span></span><br><span class="line">        dog.makeSound(); <span class="comment">// 调用 Dog 对象的 makeSound 方法，输出 &quot;Woof!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-抽象类的用途"><a href="#6-抽象类的用途" class="headerlink" title="6. 抽象类的用途"></a><strong>6. 抽象类的用途</strong></h3><ul><li><strong>定义通用接口：</strong> 抽象类可以定义一组方法，要求所有子类都实现这些方法，从而确保子类具有相同的接口。</li><li><strong>代码复用：</strong> 抽象类可以提供一些通用的实现，子类可以直接继承和使用，避免重复编写代码。</li><li><strong>实现多态：</strong> 通过抽象类，可以实现多态，即使用父类类型的引用来引用子类对象，从而实现灵活的设计。</li></ul><h3 id="7-抽象类-vs-接口"><a href="#7-抽象类-vs-接口" class="headerlink" title="7. 抽象类 vs 接口"></a><strong>7. 抽象类 vs 接口</strong></h3><p>抽象类和接口都是用于实现抽象的机制，但它们之间有一些关键区别：</p><ul><li><strong>成员变量：</strong> 抽象类可以有成员变量，而接口通常只有常量（<code>static final</code>）。</li><li><strong>方法实现：</strong> 抽象类可以有已经实现的方法，而接口在 Java 8 之前只能有抽象方法。Java 8 之后，接口可以有默认方法和静态方法。</li><li><strong>继承：</strong> 一个类只能继承一个抽象类，但可以实现多个接口。</li><li><strong>设计理念：</strong> 抽象类通常用于表示 “is-a” 关系，即子类是父类的一种特殊类型。接口通常用于表示 “can-do” 关系，即类可以实现接口中的行为。</li></ul><h2 id="Java-代码块"><a href="#Java-代码块" class="headerlink" title="**Java 代码块"></a>**Java 代码块</h2><p>Java 代码块的类型</p><p>Java 中主要有四种类型的代码块：</p><ol><li><strong>普通代码块 (Local Block)</strong></li><li><strong>构造代码块 (Instance Initializer Block)</strong></li><li><strong>静态代码块 (Static Initializer Block)</strong></li><li><strong>同步代码块 (Synchronized Block)</strong></li></ol><p>接下来，我们逐一介绍这些代码块。</p><h3 id="1-普通代码块-Local-Block"><a href="#1-普通代码块-Local-Block" class="headerlink" title="1. 普通代码块 (Local Block)"></a><strong>1. 普通代码块 (Local Block)</strong></h3><ul><li><strong>定义：</strong> 位于方法或语句中的代码块，用花括号 <code>&#123;&#125;</code> 包围。</li><li><strong>作用：</strong><ul><li>限制变量的作用域：在代码块中声明的变量只能在该代码块内部访问。</li><li>提高代码的可读性：将相关的代码组织在一起。</li></ul></li><li><strong>执行时机：</strong> 当程序执行到该代码块时，代码块中的代码会被执行。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        &#123; <span class="comment">// 普通代码块</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;x = &quot;</span> + x); <span class="comment">// 输出: x = 10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;x = &quot; + x); // 编译错误：x 在这里不可见</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-构造代码块-Instance-Initializer-Block"><a href="#2-构造代码块-Instance-Initializer-Block" class="headerlink" title="2. 构造代码块 (Instance Initializer Block)"></a><strong>2. 构造代码块 (Instance Initializer Block)</strong></h3><ul><li><strong>定义：</strong> 位于类中，没有 <code>static</code> 关键字的代码块，用花括号 <code>&#123;&#125;</code> 包围。</li><li><strong>作用：</strong><ul><li>在每次创建对象时执行，且在构造方法之前执行。</li><li>可以用来初始化实例变量，或者执行一些需要在每次创建对象时都执行的代码。</li></ul></li><li><strong>执行时机：</strong> 在每次创建对象时，构造方法之前执行。如果类中有多个构造代码块，它们会按照在类中出现的顺序依次执行。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// 构造代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块执行&quot;</span>);</span><br><span class="line">        name = <span class="string">&quot;Unknown&quot;</span>; <span class="comment">// 初始化 name 变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// 构造代码块执行</span></span><br><span class="line">        <span class="comment">// 构造方法执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-静态代码块-Static-Initializer-Block"><a href="#3-静态代码块-Static-Initializer-Block" class="headerlink" title="3. 静态代码块 (Static Initializer Block)"></a><strong>3. 静态代码块 (Static Initializer Block)</strong></h3><ul><li><strong>定义：</strong> 位于类中，使用 <code>static</code> 关键字修饰的代码块，用花括号 <code>&#123;&#125;</code> 包围。</li><li><strong>作用：</strong><ul><li>在类加载时执行，且只执行一次。</li><li>可以用来初始化静态变量，或者执行一些只需要在类加载时执行一次的代码。</li></ul></li><li><strong>执行时机：</strong> 在类加载时执行，且只执行一次。如果类中有多个静态代码块，它们会按照在类中出现的顺序依次执行。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// 静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行&quot;</span>);</span><br><span class="line">        count = <span class="number">0</span>; <span class="comment">// 初始化静态变量 count</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象被创建，count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(); <span class="comment">// 输出: 对象被创建，count = 1</span></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(); <span class="comment">// 输出: 对象被创建，count = 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出:</span></span><br><span class="line">    <span class="comment">// 静态代码块执行 (只执行一次)</span></span><br><span class="line">    <span class="comment">// 对象被创建，count = 1</span></span><br><span class="line">    <span class="comment">// 对象被创建，count = 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-同步代码块-Synchronized-Block"><a href="#4-同步代码块-Synchronized-Block" class="headerlink" title="4. 同步代码块 (Synchronized Block)"></a><strong>4. 同步代码块 (Synchronized Block)</strong></h3><ul><li><strong>定义：</strong> 使用 <code>synchronized</code> 关键字修饰的代码块。</li><li><strong>作用：</strong><ul><li>用于控制多线程对共享资源的并发访问，保证线程安全。</li><li><code>synchronized</code> 关键字可以修饰方法或代码块。修饰代码块时，需要指定一个锁对象。</li></ul></li><li><strong>执行时机：</strong> 当线程尝试进入同步代码块时，会尝试获取锁。如果锁被其他线程占用，则该线程会被阻塞，直到获取到锁。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// 锁对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123; <span class="comment">// 同步代码块</span></span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;Count = &quot;</span> + count + <span class="string">&quot;, Thread = &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                counter.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Final Count = &quot;</span> + counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><strong>普通代码块：</strong> 限制变量作用域，提高代码可读性。</li><li><strong>构造代码块：</strong> 在每次创建对象时执行，用于初始化实例变量。</li><li><strong>静态代码块：</strong> 在类加载时执行，用于初始化静态变量。</li><li><strong>同步代码块：</strong> 用于控制多线程对共享资源的并发访问，保证线程安全。</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><hr><h3 id="一、什么是内部类？"><a href="#一、什么是内部类？" class="headerlink" title="一、什么是内部类？"></a>一、什么是内部类？</h3><p><strong>内部类</strong>是指：<strong>定义在另一个类内部的类</strong>。<br>也就是说，一个类中可以再写一个类，这个“内部的类”就是内部类。</p><p>举个简单例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello from Inner!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、Java-中的四种内部类类型"><a href="#二、Java-中的四种内部类类型" class="headerlink" title="二、Java 中的四种内部类类型"></a>二、Java 中的四种内部类类型</h3><p>Java 内部类有四种类型，每种都有自己的特点和使用场景：</p><table><thead><tr><th>类型</th><th>定义位置</th><th>是否能访问外部类成员</th><th>是否需要外部类对象</th><th>修饰符支持情况</th></tr></thead><tbody><tr><td>成员内部类</td><td>类的成员位置</td><td>✅ 可以</td><td>✅ 需要</td><td>public&#x2F;private 等</td></tr><tr><td>局部内部类</td><td>方法内部</td><td>✅ 可以（有限制）</td><td>✅ 需要</td><td>不允许使用 public 等</td></tr><tr><td>匿名内部类</td><td>没有名字，直接在 new 之后</td><td>✅ 可以</td><td>✅ 需要</td><td>不能有构造函数</td></tr><tr><td>静态内部类（嵌套类）</td><td>类的成员位置，使用 static</td><td>❌ 不能直接访问</td><td>❌ 不需要</td><td>可以是 public&#x2F;private 等</td></tr></tbody></table><hr><h3 id="三、逐个类型详细讲解"><a href="#三、逐个类型详细讲解" class="headerlink" title="三、逐个类型详细讲解"></a>三、逐个类型详细讲解</h3><hr><h4 id="1️⃣-成员内部类"><a href="#1️⃣-成员内部类" class="headerlink" title="1️⃣ 成员内部类"></a>1️⃣ 成员内部类</h4><p>就是定义在另一个类的 <strong>成员位置</strong> 的类（与字段&#x2F;方法平级）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Outer msg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner sees: &quot;</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🧠 <strong>注意</strong>：</p><ul><li><p>成员内部类 <strong>可以访问外部类的私有成员</strong>。</p></li><li><p>创建方式：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">inner.show();</span><br></pre></td></tr></table></figure><hr><h4 id="2️⃣-局部内部类（方法中定义类）"><a href="#2️⃣-局部内部类（方法中定义类）" class="headerlink" title="2️⃣ 局部内部类（方法中定义类）"></a>2️⃣ 局部内部类（方法中定义类）</h4><p>定义在方法、代码块、构造器中的类，作用域只在这个块内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        i.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✨ <strong>特点</strong>：</p><ul><li><p>类似于局部变量，出了方法就不能访问。</p></li><li><p>如果访问外部方法的局部变量，<strong>这个变量必须是 final 或 effectively final</strong>。</p></li></ul><hr><h4 id="3️⃣-匿名内部类"><a href="#3️⃣-匿名内部类" class="headerlink" title="3️⃣ 匿名内部类"></a>3️⃣ 匿名内部类</h4><p>🌟 这是最常见的一种形式，通常用来“临时实现一个接口或类”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名内部类实现的线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br></pre></td></tr></table></figure><p>🔍 特点：</p><ul><li><p><strong>没有类名！</strong>（所以叫“匿名”）</p></li><li><p>直接 new 接口或抽象类。</p></li><li><p>常用于回调、事件处理等场景。</p></li><li><p><strong>不能有构造函数</strong>。</p></li></ul><hr><h4 id="4️⃣-静态内部类（静态嵌套类）"><a href="#4️⃣-静态内部类（静态嵌套类）" class="headerlink" title="4️⃣ 静态内部类（静态嵌套类）"></a>4️⃣ 静态内部类（静态嵌套类）</h4><p>使用 <code>static</code> 修饰的内部类，<strong>它不依赖外部类对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类，不需要外部类对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Outer.<span class="type">StaticInner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.StaticInner();</span><br><span class="line">inner.say();</span><br></pre></td></tr></table></figure><p>⚠️ 它不能访问外部类的非静态成员！</p><hr><h3 id="四、使用场景举例"><a href="#四、使用场景举例" class="headerlink" title="四、使用场景举例"></a>四、使用场景举例</h3><ul><li><p>成员内部类：当内部类需要频繁访问外部类的实例变量或方法时。</p></li><li><p>局部内部类：当一个类只在某个方法中用一次（封装临时逻辑）。</p></li><li><p>匿名内部类：在需要临时实现接口或抽象类时（如事件监听器、Runnable）。</p></li><li><p>静态内部类：用于实现工具类、构建器模式（Builder）、数据封装等。</p></li></ul><hr><h3 id="总结一句话："><a href="#总结一句话：" class="headerlink" title="总结一句话："></a>总结一句话：</h3><blockquote><p>内部类让你可以“把逻辑上相关的类放在一起”，并且可以方便地访问外部类的数据，让代码结构更紧凑，更清晰。</p></blockquote><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><strong>什么是 Lambda 表达式？</strong></p><p>Lambda 表达式是 Java 8 引入的一个重要特性，它本质上是一个匿名函数，可以作为参数传递给方法或存储在变量中。 Lambda 表达式提供了一种简洁而灵活的方式来表示函数式接口（Functional Interface）的实例。</p><p><strong>Lambda 表达式的语法：</strong></p><p>Lambda 表达式的基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>parameters：</strong> 参数列表，可以为空，也可以包含一个或多个参数。参数类型可以显式声明，也可以由编译器推断。</li><li><strong>-&gt;：</strong> Lambda 操作符，用于分隔参数列表和 Lambda 体。</li><li><strong>expression：</strong> 表达式，Lambda 体可以是单个表达式，也可以是代码块。</li><li><strong>statements：</strong> 代码块，如果 Lambda 体包含多个语句，需要用花括号 <code>&#123;&#125;</code> 包围。</li></ul><p><strong>Lambda 表达式的特点：</strong></p><ol><li><strong>匿名性：</strong> Lambda 表达式没有名称，它是一个匿名函数。</li><li><strong>函数式接口：</strong> Lambda 表达式只能用于实现函数式接口。</li><li><strong>类型推断：</strong> 编译器可以根据上下文推断 Lambda 表达式的参数类型。</li><li><strong>简洁性：</strong> Lambda 表达式可以用更少的代码来实现相同的功能。</li></ol><p><strong>函数式接口（Functional Interface）：</strong></p><p>函数式接口是指只包含一个抽象方法的接口。 Java 8 引入了 <code>@FunctionalInterface</code> 注解，用于显式声明一个接口为函数式接口。 如果一个接口被 <code>@FunctionalInterface</code> 注解标记，但实际上包含多个抽象方法，编译器会报错。</p><p><strong>常见的函数式接口：</strong></p><p>Java 8 提供了一些常用的函数式接口，位于 <code>java.util.function</code> 包中，例如：</p><ul><li><code>Predicate&lt;T&gt;</code>：接受一个参数 <code>T</code>，返回一个布尔值。</li><li><code>Consumer&lt;T&gt;</code>：接受一个参数 <code>T</code>，不返回任何值（<code>void</code>）。</li><li><code>Function&lt;T, R&gt;</code>：接受一个参数 <code>T</code>，返回一个结果 <code>R</code>。</li><li><code>Supplier&lt;T&gt;</code>：不接受任何参数，返回一个结果 <code>T</code>。</li><li><code>UnaryOperator&lt;T&gt;</code>：接受一个参数 <code>T</code>，返回一个类型为 <code>T</code> 的结果。</li><li><code>BinaryOperator&lt;T&gt;</code>：接受两个类型为 <code>T</code> 的参数，返回一个类型为 <code>T</code> 的结果。</li></ul><p><strong>Lambda 表达式的示例：</strong></p><ol><li><strong>无参数的 Lambda 表达式：</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个名为 doSomething 的抽象方法。</span></span><br><span class="line"><span class="comment">     * 任何实现 MyInterface 的类或 Lambda 表达式都需要提供此方法的具体实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式实现 MyInterface 接口。</span></span><br><span class="line">        <span class="comment">// Lambda 表达式 () -&gt; System.out.println(&quot;Hello, Lambda!&quot;)  实现了 MyInterface 的 doSomething 方法。</span></span><br><span class="line">        <span class="comment">// () 表示没有参数， -&gt; 分隔参数列表和方法体， System.out.println(&quot;Hello, Lambda!&quot;) 是方法体，打印 &quot;Hello, Lambda!&quot; 到控制台。</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello, Lambda!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 myInterface 对象的 doSomething 方法。</span></span><br><span class="line">        <span class="comment">// 这将执行 Lambda 表达式中定义的代码，即打印 &quot;Hello, Lambda!&quot; 到控制台。</span></span><br><span class="line">        myInterface.doSomething(); <span class="comment">// 输出 Hello, Lambda!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>带一个参数的 Lambda 表达式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式实现 MyInterface</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (message) -&gt; System.out.println(<span class="string">&quot;Message: &quot;</span> + message);</span><br><span class="line">        myInterface.doSomething(<span class="string">&quot;Lambda is awesome!&quot;</span>); <span class="comment">// 输出 Message: Lambda is awesome!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>带多个参数的 Lambda 表达式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式实现 MyInterface</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> myInterface.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + result); <span class="comment">// 输出 Result: 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用代码块的 Lambda 表达式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式实现 MyInterface</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Processing message...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Message: &quot;</span> + message);</span><br><span class="line">        &#125;;</span><br><span class="line">        myInterface.doSomething(<span class="string">&quot;Lambda is powerful!&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// Processing message...</span></span><br><span class="line">        <span class="comment">// Message: Lambda is powerful!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>java.util.function</code> 包中的函数式接口：</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个整数列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个 Predicate，用于判断一个整数是否为偶数</span></span><br><span class="line">        <span class="comment">// Predicate 是一个函数式接口，接受一个参数并返回一个布尔值</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = (number) -&gt; number % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Stream API 过滤列表中的偶数并打印</span></span><br><span class="line">        numbers.stream() <span class="comment">// 将列表转换为 Stream</span></span><br><span class="line">                .filter(isEven) <span class="comment">// 使用 Predicate 过滤 Stream 中的元素，只保留偶数</span></span><br><span class="line">                .forEach(number -&gt; System.out.println(number)); <span class="comment">// 遍历过滤后的 Stream，并打印每个元素</span></span><br><span class="line">                <span class="comment">// 输出 2 4 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lambda 表达式的优点：</strong></p><ul><li><strong>代码简洁：</strong> 可以用更少的代码来实现相同的功能。</li><li><strong>可读性强：</strong> Lambda 表达式使代码更易于理解。</li><li><strong>灵活性高：</strong> 可以将 Lambda 表达式作为参数传递给方法，实现更灵活的编程。</li><li><strong>支持函数式编程：</strong> Lambda 表达式是 Java 支持函数式编程的基础。</li></ul><p><strong>Lambda 表达式的注意事项：</strong></p><ul><li><strong>只能用于函数式接口：</strong> Lambda 表达式只能用于实现函数式接口。</li><li><strong>变量捕获：</strong> Lambda 表达式可以访问外部的 <code>final</code> 或 effectively final 的局部变量。</li><li><strong><code>this</code> 关键字：</strong> 在 Lambda 表达式中，<code>this</code> 关键字指向的是外部类的实例，而不是 Lambda 表达式本身。</li></ul><h2 id="java的方法引用"><a href="#java的方法引用" class="headerlink" title="java的方法引用"></a>java的方法引用</h2><p>方法引用是 Java 8 引入的一个重要特性，它允许你直接引用已经存在的方法或构造器，并将其作为函数式接口的实例来使用。  这使得代码更加简洁易读，也更符合函数式编程的风格。</p><h3 id="基础原理"><a href="#基础原理" class="headerlink" title="基础原理"></a><strong>基础原理</strong></h3><p>方法引用本质上是 Lambda 表达式的一种简化形式。  Lambda 表达式允许你定义匿名函数，而方法引用则允许你直接引用已有的方法，避免编写冗余的 Lambda 表达式。</p><p>Java 中有四种方法引用：</p><ol><li><strong>静态方法引用：</strong>  <code>类名::静态方法名</code></li><li><strong>实例方法引用（特定对象）：</strong>  <code>对象::实例方法名</code></li><li><strong>实例方法引用（类型）：</strong>  <code>类名::实例方法名</code></li><li><strong>构造器引用：</strong>  <code>类名::new</code></li></ol><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a><strong>函数式接口</strong></h3><p>方法引用必须与函数式接口兼容。  函数式接口是只包含一个抽象方法的接口。  Java 8 引入了 <code>@FunctionalInterface</code> 注解，用于显式声明一个接口为函数式接口。  常见的函数式接口包括 <code>Predicate</code>, <code>Consumer</code>, <code>Function</code>, <code>Supplier</code> 等。</p><p><strong>代码示例：静态方法引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethodReference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串转换为大写。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 要转换的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的大写字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toUpperCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个包含小写名字的列表</span></span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式将列表中的每个名字转换为大写</span></span><br><span class="line">        <span class="comment">// .map(s -&gt; toUpperCase(s))：对流中的每个元素应用 Lambda 表达式，将每个字符串 s 转换为 toUpperCase(s) 的结果。</span></span><br><span class="line">        <span class="comment">// .collect(Collectors.toList())：将流中的元素收集到一个新的列表中。</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesLambda = names.stream()</span><br><span class="line">                .map(s -&gt; toUpperCase(s))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda: &quot;</span> + upperCaseNamesLambda);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用静态方法引用将列表中的每个名字转换为大写</span></span><br><span class="line">        <span class="comment">// StaticMethodReference::toUpperCase：这是一个静态方法引用，它引用了 StaticMethodReference 类的 toUpperCase 方法。</span></span><br><span class="line">        <span class="comment">//  它等价于 Lambda 表达式 s -&gt; StaticMethodReference.toUpperCase(s)。</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesMethodReference = names.stream()</span><br><span class="line">                .map(StaticMethodReference::toUpperCase)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Method Reference: &quot;</span> + upperCaseNamesMethodReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>StaticMethodReference::toUpperCase</code>  引用了 <code>StaticMethodReference</code> 类的静态方法 <code>toUpperCase</code>。  <code>map</code> 方法接受一个 <code>Function</code> 函数式接口，该接口的 <code>apply</code> 方法接受一个 <code>String</code> 参数并返回一个 <code>String</code> 结果，这与 <code>toUpperCase</code> 方法的签名相匹配。</p><p><strong>代码示例：实例方法引用（特定对象）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceMethodReferenceObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toUpperCase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InstanceMethodReferenceObject</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceMethodReferenceObject</span>();</span><br><span class="line">        List&lt;InstanceMethodReferenceObject&gt; instances = Arrays.asList(<span class="keyword">new</span> <span class="title class_">InstanceMethodReferenceObject</span>(), <span class="keyword">new</span> <span class="title class_">InstanceMethodReferenceObject</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesLambda = instances.stream()</span><br><span class="line">                .map(i -&gt; instance.toUpperCase())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda: &quot;</span> + upperCaseNamesLambda);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用实例方法引用 (特定对象)</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesMethodReference = instances.stream()</span><br><span class="line">                .map(instance::toUpperCase)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Method Reference: &quot;</span> + upperCaseNamesMethodReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>instance::toUpperCase</code>  引用了 <code>instance</code> 对象的 <code>toUpperCase</code> 实例方法。  <code>map</code> 方法仍然接受一个 <code>Function</code>，但这次 <code>apply</code> 方法的实现是调用 <code>instance</code> 对象的 <code>toUpperCase</code> 方法。</p><p><strong>代码示例：实例方法引用（类型）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceMethodReferenceType</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toUpperCase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;InstanceMethodReferenceType&gt; instances = Arrays.asList(<span class="keyword">new</span> <span class="title class_">InstanceMethodReferenceType</span>(), <span class="keyword">new</span> <span class="title class_">InstanceMethodReferenceType</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesLambda = instances.stream()</span><br><span class="line">                .map(i -&gt; i.toUpperCase())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda: &quot;</span> + upperCaseNamesLambda);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用实例方法引用 (类型)</span></span><br><span class="line">        List&lt;String&gt; upperCaseNamesMethodReference = instances.stream()</span><br><span class="line">                .map(InstanceMethodReferenceType::toUpperCase)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Method Reference: &quot;</span> + upperCaseNamesMethodReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>InstanceMethodReferenceType::toUpperCase</code>  引用了 <code>InstanceMethodReferenceType</code> 类的 <code>toUpperCase</code> 实例方法。  <code>map</code> 方法接受一个 <code>Function</code>，该接口的 <code>apply</code> 方法接受一个 <code>InstanceMethodReferenceType</code> 对象作为参数，并调用该对象的 <code>toUpperCase</code> 方法。  这种方法引用适用于当你需要对流中的每个对象调用相同的方法时。</p><p><strong>代码示例：构造器引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorReference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstructorReference</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Default Name&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstructorReference</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 name 属性的方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式创建 ConstructorReference 对象 (无参构造器)</span></span><br><span class="line">        Supplier&lt;ConstructorReference&gt; constructorLambda = () -&gt; <span class="keyword">new</span> <span class="title class_">ConstructorReference</span>();</span><br><span class="line">        <span class="type">ConstructorReference</span> <span class="variable">instanceLambda</span> <span class="operator">=</span> constructorLambda.get(); <span class="comment">// 调用 get() 方法创建对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda: &quot;</span> + instanceLambda.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用构造器引用创建 ConstructorReference 对象 (无参构造器)</span></span><br><span class="line">        <span class="comment">// ConstructorReference::new 等价于 () -&gt; new ConstructorReference()</span></span><br><span class="line">        Supplier&lt;ConstructorReference&gt; constructorReference = ConstructorReference::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">ConstructorReference</span> <span class="variable">instanceReference</span> <span class="operator">=</span> constructorReference.get(); <span class="comment">// 调用 get() 方法创建对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method Reference (no args): &quot;</span> + instanceReference.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式创建 ConstructorReference 对象列表 (带参数的构造器)</span></span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        List&lt;ConstructorReference&gt; instancesLambda = names.stream()</span><br><span class="line">                .map(name -&gt; <span class="keyword">new</span> <span class="title class_">ConstructorReference</span>(name)) <span class="comment">// 对每个 name 创建一个 ConstructorReference 对象</span></span><br><span class="line">                .collect(Collectors.toList()); <span class="comment">// 将创建的对象收集到 List 中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Lambda (with args): &quot;</span> + instancesLambda.stream().map(ConstructorReference::getName).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用构造器引用创建 ConstructorReference 对象列表 (带参数的构造器)</span></span><br><span class="line">        <span class="comment">// ConstructorReference::new 等价于 name -&gt; new ConstructorReference(name)</span></span><br><span class="line">        List&lt;ConstructorReference&gt; instancesReference = names.stream()</span><br><span class="line">                .map(ConstructorReference::<span class="keyword">new</span>) <span class="comment">// 对每个 name 创建一个 ConstructorReference 对象</span></span><br><span class="line">                .collect(Collectors.toList()); <span class="comment">// 将创建的对象收集到 List 中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method Reference (with args): &quot;</span> + instancesReference.stream().map(ConstructorReference::getName).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConstructorReference::new</code>  引用了 <code>ConstructorReference</code> 类的构造器。  <code>Supplier&lt;ConstructorReference&gt;</code> 函数式接口的 <code>get</code> 方法返回一个新的 <code>ConstructorReference</code> 对象。  如果构造器有参数，<code>map</code> 方法会根据参数类型选择合适的构造器。</p><p><strong>进阶知识</strong></p><ul><li><p><strong>方法引用与泛型：</strong>  方法引用可以与泛型一起使用，以创建更灵活的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericMethodReference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">convertToString</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用泛型方法引用</span></span><br><span class="line">        List&lt;String&gt; stringNumbers = numbers.stream()</span><br><span class="line">                .map(GenericMethodReference::&lt;Integer&gt;convertToString) <span class="comment">// 显式指定类型参数</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(stringNumbers); <span class="comment">// 输出: [1, 2, 3]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法引用与继承：</strong>  方法引用可以引用父类的方法，只要该方法对子类可见。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Generic animal sound&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritanceMethodReference</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Dog&gt; dogs = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Dog</span>(), <span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用父类方法 (如果子类没有重写)</span></span><br><span class="line">        List&lt;String&gt; sounds = dogs.stream()</span><br><span class="line">                .map(Animal::makeSound) <span class="comment">// 即使是Dog对象，也可以通过Animal引用</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(sounds); <span class="comment">// 输出: [Woof!, Woof!]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法引用与接口：</strong>  方法引用可以引用接口的默认方法和静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> String <span class="title function_">getDefaultMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Default message from interface&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">getStaticMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Static message from interface&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 可以选择性地重写接口的默认方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceMethodReference</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用接口的默认方法</span></span><br><span class="line">        Supplier&lt;String&gt; defaultMessageSupplier = myObject::getDefaultMessage;</span><br><span class="line">        System.out.println(defaultMessageSupplier.get()); <span class="comment">// 输出: Default message from interface</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用接口的静态方法</span></span><br><span class="line">        Supplier&lt;String&gt; staticMessageSupplier = MyInterface::getStaticMessage;</span><br><span class="line">        System.out.println(staticMessageSupplier.get()); <span class="comment">// 输出: Static message from interface</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>实际案例</strong></p><ol><li><p><strong>排序：</strong>  可以使用方法引用来简化集合的排序操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortingExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; people = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式排序</span></span><br><span class="line">        people.sort((p1, p2) -&gt; p1.getName().compareTo(p2.getName()));</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorted by name (Lambda): &quot;</span> + people);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用排序</span></span><br><span class="line">        people.sort(Comparator.comparing(Person::getName));</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorted by name (Method Reference): &quot;</span> + people);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用和 reversed() 排序</span></span><br><span class="line">        people.sort(Comparator.comparing(Person::getAge).reversed());</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorted by age (Method Reference, reversed): &quot;</span> + people);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>事件处理：</strong>  在 GUI 编程中，可以使用方法引用来简化事件处理器的注册。  (虽然现在GUI开发更多使用框架，但原理相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设有一个按钮类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ClickHandler clickHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClickHandler</span><span class="params">(ClickHandler clickHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clickHandler = clickHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (clickHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            clickHandler.onClick();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClickHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventHandlingExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleButtonClick</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Button clicked!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">        <span class="type">EventHandlingExample</span> <span class="variable">eventHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventHandlingExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        button.setClickHandler(() -&gt; eventHandler.handleButtonClick());</span><br><span class="line">        button.click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用</span></span><br><span class="line">        button.setClickHandler(eventHandler::handleButtonClick);</span><br><span class="line">        button.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>日志记录：</strong>  可以使用方法引用来简化日志记录器的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(LoggingExample.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        logger.info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LoggingExample</span> <span class="variable">loggingExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">logTaskLambda</span> <span class="operator">=</span> () -&gt; loggingExample.logMessage(<span class="string">&quot;This is a log message (Lambda).&quot;</span>);</span><br><span class="line">        logTaskLambda.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">logTaskReference</span> <span class="operator">=</span> loggingExample::logMessage;</span><br><span class="line">        logTaskReference.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数据验证：</strong>  可以使用方法引用来简化数据验证逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPositive</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        List&lt;Integer&gt; positiveNumbersLambda = numbers.stream()</span><br><span class="line">                .filter(n -&gt; isPositive(n))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Positive numbers (Lambda): &quot;</span> + positiveNumbersLambda);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用</span></span><br><span class="line">        List&lt;Integer&gt; positiveNumbersReference = numbers.stream()</span><br><span class="line">                .filter(ValidationExample::isPositive)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Positive numbers (Method Reference): &quot;</span> + positiveNumbersReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Java常用API"><a href="#Java常用API" class="headerlink" title="Java常用API"></a>Java常用API</h2><h3 id="一、基础原理：API的概念与作用"><a href="#一、基础原理：API的概念与作用" class="headerlink" title="一、基础原理：API的概念与作用"></a><strong>一、基础原理：API的概念与作用</strong></h3><p>API (Application Programming Interface)，即应用程序编程接口，是一组预定义的函数、类、协议和工具，允许软件应用程序之间进行交互。在Java中，API通常以类库的形式提供，开发者可以通过调用这些类库中的方法，来实现各种功能，而无需从头编写代码。</p><p>API的作用：</p><ul><li><strong>代码重用：</strong> 避免重复编写相同功能的代码，提高开发效率。</li><li><strong>简化开发：</strong> 封装复杂的操作，提供简单易用的接口。</li><li><strong>标准化：</strong> 提供统一的接口，方便不同应用程序之间的集成。</li><li><strong>抽象：</strong> 隐藏底层实现细节，使开发者专注于业务逻辑。</li></ul><h3 id="二、常用API分类与详解"><a href="#二、常用API分类与详解" class="headerlink" title="二、常用API分类与详解"></a><strong>二、常用API分类与详解</strong></h3><p>Java API非常庞大，涵盖了各种领域。以下是一些常用的API分类及其详解：</p><h4 id="1-Java核心类库-java-lang-java-util-java-io-java-net-java-text-java-math"><a href="#1-Java核心类库-java-lang-java-util-java-io-java-net-java-text-java-math" class="headerlink" title="1.  Java核心类库 (java.lang, java.util, java.io, java.net, java.text, java.math)"></a>1.  <strong>Java核心类库 (java.lang, java.util, java.io, java.net, java.text, java.math)</strong></h4><pre><code>*   **java.lang:**  Java语言的基础类库，包含Object、String、Math、Thread等核心类。</code></pre><p>使用””创建字符串对象，放在常量池中<br><img src="https://i.imgur.com/tAyOA6B.png"><br>使用字符串创建对象，或者其他的放在常量池中。</p><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h5><ul><li><p><strong><code>length()</code></strong>: 返回字符串的长度（字符数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length(); <span class="comment">// len = 5</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>charAt(int index)</code></strong>: 返回指定索引位置的字符。索引从 0 开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>); <span class="comment">// ch = &#x27;H&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>substring(int beginIndex)</code></strong>: 返回从指定索引开始到字符串末尾的子字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> str.substring(<span class="number">2</span>); <span class="comment">// sub = &quot;llo&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>substring(int beginIndex, int endIndex)</code></strong>: 返回从 <code>beginIndex</code>（包含）到 <code>endIndex</code>（不包含）的子字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> str.substring(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">// sub = &quot;ell&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>比较</strong></p><ul><li><p><strong><code>equals(Object obj)</code></strong>: 比较字符串的内容是否相等（区分大小写）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equals(str2); <span class="comment">// isEqual = false</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>equalsIgnoreCase(String anotherString)</code></strong>: 比较字符串的内容是否相等（忽略大小写）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equalsIgnoreCase(str2); <span class="comment">// isEqual = true</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>compareTo(String anotherString)</code></strong>: 按照字典顺序比较字符串。返回一个整数，如果小于 0，则表示当前字符串小于 <code>anotherString</code>；如果等于 0，则表示相等；如果大于 0，则表示大于 <code>anotherString</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;apple&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;banana&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> str1.compareTo(str2); <span class="comment">// result &lt; 0</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>查找</strong></p><ul><li><p><strong><code>indexOf(int ch)</code></strong>: 返回指定字符在字符串中第一次出现的索引。如果未找到，则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&#x27;l&#x27;</span>); <span class="comment">// index = 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>indexOf(String str)</code></strong>: 返回指定子字符串在字符串中第一次出现的索引。如果未找到，则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;world&quot;</span>); <span class="comment">// index = 6</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>lastIndexOf(int ch)</code></strong>: 返回指定字符在字符串中最后一次出现的索引。如果未找到，则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&#x27;l&#x27;</span>); <span class="comment">// index = 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>lastIndexOf(String str)</code></strong>: 返回指定子字符串在字符串中最后一次出现的索引。如果未找到，则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello world world&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&quot;world&quot;</span>); <span class="comment">// index = 12</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>转换</strong></p><ul><li><p><strong><code>toLowerCase()</code></strong>: 将字符串转换为小写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase(); <span class="comment">// lower = &quot;hello&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>toUpperCase()</code></strong>: 将字符串转换为大写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase(); <span class="comment">// upper = &quot;HELLO&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>trim()</code></strong>: 去除字符串开头和结尾的空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  Hello  &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> str.trim(); <span class="comment">// trimmed = &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>replace(char oldChar, char newChar)</code></strong>: 将字符串中所有出现的 <code>oldChar</code> 替换为 <code>newChar</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> str.replace(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;p&#x27;</span>); <span class="comment">// replaced = &quot;Heppo&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>replace(CharSequence target, CharSequence replacement)</code></strong>: 将字符串中所有出现的 <code>target</code> 替换为 <code>replacement</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> str.replace(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;Java&quot;</span>); <span class="comment">// replaced = &quot;Hello Java&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>split(String regex)</code></strong>: 根据给定的正则表达式将字符串分割成字符串数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;apple,banana,orange&quot;</span>;</span><br><span class="line">String[] parts = str.split(<span class="string">&quot;,&quot;</span>); <span class="comment">// parts = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>toCharArray()</code></strong>: 将字符串转换为字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] chars = str.toCharArray(); <span class="comment">// chars = &#123;&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>其他</strong></p><ul><li><p><strong><code>startsWith(String prefix)</code></strong>: 检查字符串是否以指定的前缀开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">startsWithHello</span> <span class="operator">=</span> str.startsWith(<span class="string">&quot;Hel&quot;</span>); <span class="comment">// startsWithHello = true</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>endsWith(String suffix)</code></strong>: 检查字符串是否以指定的后缀结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">endsWithHello</span> <span class="operator">=</span> str.endsWith(<span class="string">&quot;llo&quot;</span>); <span class="comment">// endsWithHello = true</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>contains(CharSequence s)</code></strong>: 检查字符串是否包含指定的字符序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">containsWorld</span> <span class="operator">=</span> str.contains(<span class="string">&quot;world&quot;</span>); <span class="comment">// containsWorld = true</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>isEmpty()</code></strong>: 检查字符串是否为空（长度为 0）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> str.isEmpty(); <span class="comment">// isEmpty = true</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>valueOf(各种类型)</code></strong>:  这是一个静态方法，可以将各种数据类型转换为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(num); <span class="comment">// str = &quot;123&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object:</strong> 所有类的父类，提供equals()、hashCode()、toString()等通用方法。<ul><li><strong>String:</strong> 字符串类，提供字符串操作方法，如substring()、indexOf()、replace()等。</li><li><strong>Math:</strong> 数学类，提供数学运算方法，如abs()、sqrt()、sin()、cos()等。</li><li><strong>Thread:</strong> 线程类，用于创建和管理线程。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// String示例</span><br><span class="line">String str = &quot;Hello World&quot;;</span><br><span class="line">System.out.println(str.substring(0, 5)); // 输出 Hello</span><br><span class="line">System.out.println(str.indexOf(&quot;World&quot;)); // 输出 6</span><br><span class="line"></span><br><span class="line">// Math示例</span><br><span class="line">System.out.println(Math.abs(-10)); // 输出 10</span><br><span class="line">System.out.println(Math.sqrt(9));  // 输出 3.0</span><br></pre></td></tr></table></figure><ul><li><p><strong>java.util:</strong>  包含集合框架、日期时间、随机数等工具类。</p></li><li><p><strong>List, Set, Map:</strong> 集合框架接口，提供存储和操作数据的容器。<br>*   <strong>ArrayList, LinkedList, HashSet, HashMap:</strong> 集合框架的常用实现类。<br>*   <strong>Date, Calendar:</strong> 日期时间类，用于处理日期和时间。<br>*   <strong>Random:</strong> 随机数生成器。<br>[[集合]]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList示例</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>)); <span class="comment">// 输出 Apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap示例</span></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(map.get(<span class="string">&quot;Apple&quot;</span>)); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Date示例</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(now);</span><br></pre></td></tr></table></figure></li><li><p><strong>java.io:</strong>  输入输出类库，用于读写文件、网络数据等。</p><ul><li><strong>InputStream, OutputStream:</strong> 字节输入输出流的抽象类。<ul><li><strong>Reader, Writer:</strong> 字符输入输出流的抽象类。</li><li><strong>FileInputStream, FileOutputStream:</strong> 文件字节输入输出流。</li><li><strong>FileReader, FileWriter:</strong> 文件字符输入输出流。</li><li><strong>BufferedReader, BufferedWriter:</strong> 带缓冲的字符输入输出流。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"> // 文件读取示例</span><br><span class="line"> try (BufferedReader reader = new BufferedReader(new FileReader(&quot;test.txt&quot;))) &#123;</span><br><span class="line">     String line;</span><br><span class="line">     while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">         System.out.println(line);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 文件写入示例</span><br><span class="line"> try (BufferedWriter writer = new BufferedWriter(new FileWriter(&quot;output.txt&quot;))) &#123;</span><br><span class="line">     writer.write(&quot;Hello, World!&quot;);</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*   **java.net:**  网络编程类库，用于创建网络连接、发送数据等。</span><br><span class="line"></span><br><span class="line">        *   **Socket:** 套接字类，用于建立客户端连接。</span><br><span class="line">        *   **ServerSocket:** 服务器套接字类，用于监听客户端连接。</span><br><span class="line">        *   **URL:** 统一资源定位符类，用于表示网络资源。</span><br><span class="line"></span><br><span class="line">        ```java</span><br><span class="line">        // 客户端示例</span><br><span class="line">        try (Socket socket = new Socket(&quot;localhost&quot;, 8080);</span><br><span class="line">             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);</span><br><span class="line">             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) &#123;</span><br><span class="line"></span><br><span class="line">            out.println(&quot;Hello Server!&quot;);</span><br><span class="line">            String response = in.readLine();</span><br><span class="line">            System.out.println(&quot;Server response: &quot; + response);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //服务端示例</span><br><span class="line">        try (ServerSocket serverSocket = new ServerSocket(8080);</span><br><span class="line">             Socket clientSocket = serverSocket.accept();</span><br><span class="line">             PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);</span><br><span class="line">             BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) &#123;</span><br><span class="line"></span><br><span class="line">            String inputLine;</span><br><span class="line">            while ((inputLine = in.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(&quot;Client says: &quot; + inputLine);</span><br><span class="line">                out.println(&quot;Echo: &quot; + inputLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><pre><code>*   **java.text:**  文本处理类库，用于格式化日期、数字等。    *   **DateFormat, SimpleDateFormat:** 日期格式化类。    *   **NumberFormat:** 数字格式化类。    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期格式化示例</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println(formattedDate); <span class="comment">// 输出类似 2023-10-27 10:00:00</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数字格式化示例</span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">nf</span> <span class="operator">=</span> NumberFormat.getNumberInstance();</span><br><span class="line">nf.setMaximumFractionDigits(<span class="number">2</span>); <span class="comment">// 设置小数位数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">formattedNumber</span> <span class="operator">=</span> nf.format(<span class="number">1234.567</span>);</span><br><span class="line">System.out.println(formattedNumber); <span class="comment">// 输出 1,234.57 (根据本地化设置)</span></span><br></pre></td></tr></table></figure>*   **java.math:**  数学计算类库，提供高精度计算。    *   **BigDecimal:** 高精度浮点数类。    *   **BigInteger:** 高精度整数类。    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BigDecimal示例</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">result</span> <span class="operator">=</span> num1.subtract(num2);</span><br><span class="line">System.out.println(result); <span class="comment">// 输出 0.1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// BigInteger示例</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">factorial</span> <span class="operator">=</span> BigInteger.ONE;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">    factorial = factorial.multiply(BigInteger.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(factorial); <span class="comment">// 输出 2432902008176640000</span></span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p><strong>Java Swing&#x2F;JavaFX (javax.swing, javafx.*):</strong>  图形用户界面 (GUI) 类库。</p><ul><li><strong>JFrame, JPanel, JButton, JLabel, JTextField:</strong> Swing的常用组件。</li><li><strong>Scene, Stage, Button, Label, TextField:</strong> JavaFX的常用组件。</li></ul><p>(GUI编程较为复杂，此处仅作简单提及，不提供详细代码示例)</p></li><li><p><strong>Java Database Connectivity (JDBC) (java.sql):</strong>  数据库连接类库。</p><ul><li><strong>DriverManager:</strong> 驱动管理器，用于加载数据库驱动。</li><li><strong>Connection:</strong> 数据库连接接口。</li><li><strong>Statement, PreparedStatement:</strong> SQL语句执行接口。</li><li><strong>ResultSet:</strong> 查询结果集接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDBC示例 (需要数据库驱动)</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>); <span class="comment">// MySQL驱动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取连接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建Statement</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 执行查询</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 处理结果</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        System.out.println(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 关闭连接</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Java XML Processing (javax.xml.*):</strong>  XML处理类库。</p><ul><li><strong>DocumentBuilder, DocumentBuilderFactory:</strong> 用于解析XML文档。</li><li><strong>XPath:</strong> 用于查询XML文档。</li></ul><p>(XML处理较为复杂，此处仅作简单提及，不提供详细代码示例)</p></li><li><p><strong>Java Collections Framework (java.util.collections):</strong> 集合框架的工具类，提供排序、查找等算法。</p><ul><li><strong>Collections.sort():</strong> 对List进行排序。</li><li><strong>Collections.binarySearch():</strong> 在List中进行二分查找。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collections示例</span></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">numbers.add(<span class="number">5</span>);</span><br><span class="line">numbers.add(<span class="number">2</span>);</span><br><span class="line">numbers.add(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(numbers); <span class="comment">// 排序</span></span><br><span class="line">System.out.println(numbers); <span class="comment">// 输出 [2, 5, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(numbers, <span class="number">5</span>); <span class="comment">// 二分查找</span></span><br><span class="line">System.out.println(index); <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>三、进阶知识：API设计原则与最佳实践</strong></p><ol><li><strong>单一职责原则 (SRP):</strong>  每个类或接口应该只有一个明确的职责。</li><li><strong>开闭原则 (OCP):</strong>  软件实体应该对扩展开放，对修改关闭。</li><li><strong>里氏替换原则 (LSP):</strong>  子类应该能够替换其父类，而不会导致程序出错。</li><li><strong>接口隔离原则 (ISP):</strong>  客户端不应该被迫依赖于它不需要的接口。</li><li><strong>依赖倒置原则 (DIP):</strong>  高层模块不应该依赖于低层模块，两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li></ol><p><strong>API设计最佳实践：</strong></p><ul><li><strong>清晰的命名：</strong> 使用有意义的名称，避免歧义。</li><li><strong>简洁的接口：</strong> 接口应该尽可能简单，避免过度设计。</li><li><strong>良好的文档：</strong> 提供清晰、完整的文档，方便开发者使用。</li><li><strong>版本控制：</strong> 使用版本号管理API，方便维护和升级。</li><li><strong>异常处理：</strong> 合理处理异常，提供友好的错误信息。</li><li><strong>线程安全：</strong> 考虑多线程环境下的安全性。</li></ul><p><strong>四、实际案例：使用API构建简单应用</strong></p><p><strong>案例：构建一个简单的命令行计算器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Simple Calculator&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;Enter first number: &quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;Enter operator (+, -, *, /): &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">operator</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;Enter second number: &quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                result = num1 + num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                result = num1 - num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                result = num1 * num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (num2 == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Error: Division by zero!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result = num1 / num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Error: Invalid operator!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + result);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li><strong>Scanner:</strong>  <code>java.util.Scanner</code> 用于从控制台读取用户输入。</li><li><strong>System.out.println&#x2F;print:</strong>  <code>java.lang.System</code> 用于向控制台输出信息。</li><li><strong>String:</strong>  <code>java.lang.String</code> 用于处理用户输入的运算符。</li><li><strong>double:</strong>  Java的基本数据类型，用于存储数字。</li></ul><p>这个简单的例子展示了如何使用Java API来构建一个简单的命令行应用程序。  通过学习和掌握更多的Java API，可以构建更复杂、功能更强大的应用程序。</p><h2 id="Java-GUI页面编程"><a href="#Java-GUI页面编程" class="headerlink" title="Java GUI页面编程"></a>Java GUI页面编程</h2><p>Java GUI页面编程涉及使用Java提供的图形用户界面（GUI）工具包来创建交互式的桌面应用程序。主要涉及AWT、Swing和JavaFX这三个技术栈，其中Swing和JavaFX是更常用的选择。</p><h3 id="基础原理：组件、容器和布局管理器"><a href="#基础原理：组件、容器和布局管理器" class="headerlink" title="基础原理：组件、容器和布局管理器"></a><strong>基础原理：组件、容器和布局管理器</strong></h3><p>GUI编程的核心在于组件（Component）、容器（Container）和布局管理器（Layout Manager）。</p><ul><li><p><strong>组件（Component）：</strong> GUI的基本构建块，例如按钮（Button）、标签（Label）、文本框（TextField）等。它们是用户可以直接交互的元素。</p></li><li><p><strong>容器（Container）：</strong> 用于容纳和组织组件的特殊组件。例如，窗口（JFrame）、面板（JPanel）等。容器可以嵌套，形成复杂的界面结构。</p></li><li><p><strong>布局管理器（Layout Manager）：</strong> 负责控制容器中组件的排列方式。不同的布局管理器提供不同的排列策略，例如流式布局（FlowLayout）、边界布局（BorderLayout）、网格布局（GridLayout）等。</p></li></ul><p><strong>示例代码（Swing）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleGUI</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleGUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置窗口标题</span></span><br><span class="line">        setTitle(<span class="string">&quot;Simple GUI Example&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口大小</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口关闭时的默认操作</span></span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个标签</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Click Me!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加事件监听器到按钮</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                label.setText(<span class="string">&quot;Button Clicked!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将组件添加到面板</span></span><br><span class="line">        panel.add(label);</span><br><span class="line">        panel.add(button);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将面板添加到窗口的内容面板</span></span><br><span class="line">        add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口可见</span></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SimpleGUI</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码创建了一个简单的窗口，其中包含一个标签和一个按钮。点击按钮会改变标签的文本。</p><h3 id="进阶知识：事件处理、线程和数据绑定"><a href="#进阶知识：事件处理、线程和数据绑定" class="headerlink" title="进阶知识：事件处理、线程和数据绑定"></a><strong>进阶知识：事件处理、线程和数据绑定</strong></h3><ul><li><p><strong>事件处理：</strong> GUI程序的核心是响应用户的交互。事件处理机制允许程序监听用户的操作（例如点击按钮、输入文本等），并执行相应的代码。Java使用事件监听器（EventListener）接口来实现事件处理。</p></li><li><p><strong>线程：</strong> GUI程序通常需要执行耗时的操作（例如网络请求、文件读写等）。为了避免阻塞GUI线程，影响用户体验，应该将这些操作放在单独的线程中执行。SwingUtilities.invokeLater() 和 JavaFX的Platform.runLater() 用于在GUI线程中更新UI。</p></li><li><p><strong>数据绑定：</strong> 数据绑定是一种将GUI组件与数据模型关联起来的技术。当数据模型发生变化时，GUI组件会自动更新；反之，当用户在GUI组件中修改数据时，数据模型也会自动更新。JavaFX提供了内置的数据绑定机制。</p></li></ul><p><strong>示例代码（JavaFX）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.application.Platform;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Label;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaFXExample</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> &#123;</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;Hello, JavaFX!&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;Click Me!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        button.setOnAction(event -&gt; &#123;</span><br><span class="line">            Platform.runLater(() -&gt; &#123;</span><br><span class="line">                label.setText(<span class="string">&quot;Button Clicked!&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">StackPane</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackPane</span>();</span><br><span class="line">        root.getChildren().addAll(label, button);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(root, <span class="number">300</span>, <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">        primaryStage.setTitle(<span class="string">&quot;JavaFX Example&quot;</span>);</span><br><span class="line">        primaryStage.setScene(scene);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个JavaFX示例与Swing示例类似，但使用了JavaFX的API。<code>Platform.runLater()</code>确保UI更新在JavaFX应用程序线程上执行。</p><h3 id="实际案例：开发一个简单的计算器"><a href="#实际案例：开发一个简单的计算器" class="headerlink" title="实际案例：开发一个简单的计算器"></a><strong>实际案例：开发一个简单的计算器</strong></h3><p>下面是一个使用Swing开发的简单计算器的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示计算结果的文本框</span></span><br><span class="line">    <span class="keyword">private</span> JTextField display;</span><br><span class="line">    <span class="comment">// 存放按钮的面板</span></span><br><span class="line">    <span class="keyword">private</span> JPanel buttonPanel;</span><br><span class="line">    <span class="comment">// 当前输入的数字字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">currentInput</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 上一次执行的运算符，默认为 &quot;=&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">lastOperation</span> <span class="operator">=</span> <span class="string">&quot;=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置窗口标题</span></span><br><span class="line">        setTitle(<span class="string">&quot;Simple Calculator&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置窗口大小</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="comment">// 设置关闭窗口时的默认操作（退出程序）</span></span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">// 设置布局管理器为 BorderLayout</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化显示文本框</span></span><br><span class="line">        display = <span class="keyword">new</span> <span class="title class_">JTextField</span>();</span><br><span class="line">        <span class="comment">// 设置文本框内容右对齐</span></span><br><span class="line">        display.setHorizontalAlignment(JTextField.RIGHT);</span><br><span class="line">        <span class="comment">// 设置文本框不可编辑</span></span><br><span class="line">        display.setEditable(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 将文本框添加到窗口的北部</span></span><br><span class="line">        add(display, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化按钮面板</span></span><br><span class="line">        buttonPanel = <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        <span class="comment">// 设置按钮面板的布局管理器为 GridLayout (4行4列)</span></span><br><span class="line">        buttonPanel.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义按钮上的文本标签</span></span><br><span class="line">        String[] buttonLabels = &#123;</span><br><span class="line">                <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;-&quot;</span>,</span><br><span class="line">                <span class="string">&quot;0&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;+&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环创建按钮并添加到面板</span></span><br><span class="line">        <span class="keyword">for</span> (String label : buttonLabels) &#123;</span><br><span class="line">            <span class="comment">// 创建按钮</span></span><br><span class="line">            <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(label);</span><br><span class="line">            <span class="comment">// 为按钮添加 ActionListener (当前类)</span></span><br><span class="line">            button.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">            <span class="comment">// 将按钮添加到面板</span></span><br><span class="line">            buttonPanel.add(button);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将按钮面板添加到窗口的中心</span></span><br><span class="line">        add(buttonPanel, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口可见</span></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ActionListener 接口的实现方法，用于处理按钮点击事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取触发事件的按钮上的文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果点击的是数字或小数点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0123456789.&quot;</span>.contains(command)) &#123;</span><br><span class="line">            <span class="comment">// 将点击的数字或小数点添加到当前输入字符串</span></span><br><span class="line">            currentInput += command;</span><br><span class="line">            <span class="comment">// 更新显示文本框的内容</span></span><br><span class="line">            display.setText(currentInput);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果点击的是运算符</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;+-*/=&quot;</span>.contains(command)) &#123;</span><br><span class="line">            <span class="comment">// 进行计算</span></span><br><span class="line">            calculate(Double.parseDouble(currentInput));</span><br><span class="line">            <span class="comment">// 更新上一次执行的运算符</span></span><br><span class="line">            lastOperation = command;</span><br><span class="line">            <span class="comment">// 清空当前输入字符串</span></span><br><span class="line">            currentInput = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">// 更新显示文本框的内容为计算结果</span></span><br><span class="line">            display.setText(String.valueOf(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据上一次执行的运算符进行计算</span></span><br><span class="line">        <span class="keyword">switch</span> (lastOperation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                result += number;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                result -= number;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                result *= number;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                <span class="comment">// 除法需要判断除数是否为0</span></span><br><span class="line">                <span class="keyword">if</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">                    result /= number;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果除数为0，则显示错误信息</span></span><br><span class="line">                    display.setText(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">                    <span class="comment">// 重置计算结果</span></span><br><span class="line">                    result = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;=&quot;</span>:</span><br><span class="line">                <span class="comment">// 如果上一次执行的是 &quot;=&quot;, 则将当前数字赋值给计算结果</span></span><br><span class="line">                result = number;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建计算器对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个计算器示例展示了如何使用Swing组件、布局管理器和事件处理来创建一个简单的交互式应用程序。它接收用户的输入，执行基本的算术运算，并将结果显示在文本框中。</p><h3 id="事件的三种常见写法"><a href="#事件的三种常见写法" class="headerlink" title="事件的三种常见写法"></a>事件的三种常见写法</h3><p>事件，本质上是一种通知机制，用于在程序中传递状态变化或用户行为。常见的三种写法，分别对应着不同的编程范式和应用场景。</p><h4 id="1-回调函数-Callback-Functions"><a href="#1-回调函数-Callback-Functions" class="headerlink" title="1. 回调函数 (Callback Functions)"></a><strong>1. 回调函数 (Callback Functions)</strong></h4><ul><li><p><strong>基础原理:</strong>  回调函数是最基础的事件处理方式。它将一个函数（回调函数）作为参数传递给另一个函数。当特定事件发生时，被调用的函数会执行这个回调函数。</p></li><li><p><strong>进阶知识:</strong>  回调函数容易形成“回调地狱”（Callback Hell），即嵌套过深的回调函数，导致代码难以阅读和维护。  Promise 和 async&#x2F;await 解决了这个问题，但回调函数仍然是理解事件机制的基础。</p></li><li><p><strong>实际案例 (JavaScript):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`开始下载: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 模拟下载过程</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileData = <span class="string">`文件内容来自: <span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`下载完成: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    <span class="title function_">callback</span>(fileData); <span class="comment">// 下载完成后调用回调函数</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processFile</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`开始处理文件: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 模拟处理文件</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件处理完成: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">downloadFile</span>(<span class="string">&quot;https://example.com/data.txt&quot;</span>, processFile);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>downloadFile</code> 函数接受一个 URL 和一个回调函数 <code>processFile</code>。  <code>downloadFile</code> 模拟下载文件，下载完成后，它会调用 <code>processFile</code> 函数，并将下载的数据作为参数传递给它。</p></li></ul><p><strong>2. 发布&#x2F;订阅模式 (Publish&#x2F;Subscribe Pattern)</strong></p><ul><li><p><strong>基础原理:</strong>  发布&#x2F;订阅模式是一种消息传递模式，其中发布者（Publisher）发布消息，订阅者（Subscriber）订阅感兴趣的消息。  发布者不需要知道订阅者是谁，订阅者也不知道发布者是谁。  消息通过一个中央消息代理（Message Broker）进行传递。</p></li><li><p><strong>进阶知识:</strong>  发布&#x2F;订阅模式实现了松耦合，允许组件独立地发布和订阅事件。  它常用于构建事件驱动的架构，例如消息队列、GUI 事件处理等。  常见的实现方式包括使用事件总线（Event Bus）或消息队列（Message Queue）。</p></li><li><p><strong>实际案例 (JavaScript - 简易事件总线):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">publish</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 &quot;user.created&quot; 事件</span></span><br><span class="line">eventBus.<span class="title function_">subscribe</span>(<span class="string">&quot;user.created&quot;</span>, <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新用户创建: <span class="subst">$&#123;user.name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">eventBus.<span class="title function_">subscribe</span>(<span class="string">&quot;user.created&quot;</span>, <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`发送欢迎邮件给: <span class="subst">$&#123;user.email&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布 &quot;user.created&quot; 事件</span></span><br><span class="line">eventBus.<span class="title function_">publish</span>(<span class="string">&quot;user.created&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;alice@example.com&quot;</span> &#125;);</span><br><span class="line">eventBus.<span class="title function_">publish</span>(<span class="string">&quot;user.created&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;bob@example.com&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>EventBus</code> 类充当消息代理。  <code>subscribe</code> 方法用于订阅事件，<code>publish</code> 方法用于发布事件。  当 “user.created” 事件被发布时，所有订阅该事件的回调函数都会被执行。</p></li></ul><p><strong>3. 观察者模式 (Observer Pattern)</strong></p><ul><li><p><strong>基础原理:</strong>  观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。  当主题对象的状态发生改变时，所有依赖它的观察者都会收到通知并自动更新。</p></li><li><p><strong>进阶知识:</strong>  观察者模式与发布&#x2F;订阅模式类似，但观察者模式通常是针对特定对象的，观察者直接与主题对象关联。  发布&#x2F;订阅模式则更加通用，发布者和订阅者之间通过消息代理进行解耦。  观察者模式常用于 GUI 框架中的事件处理，例如按钮点击事件。</p></li><li><p><strong>实际案例 (JavaScript):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unsubscribe</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obs</span> =&gt;</span> obs !== observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">newState</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = newState;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">notifyObservers</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notifyObservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(<span class="variable language_">this</span>.<span class="property">state</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 收到通知，状态更新为: <span class="subst">$&#123;state&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&quot;Observer 1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&quot;Observer 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer2);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">setState</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">setState</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">unsubscribe</span>(observer1);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">setState</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Subject</code> 类是主题对象，<code>Observer</code> 类是观察者对象。  <code>Subject</code> 维护一个观察者列表，并在状态改变时通知所有观察者。  <code>Observer</code> 的 <code>update</code> 方法用于响应状态变化。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eleteItem.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">selectedRow</span> <span class="operator">=</span> employeeTable.getSelectedRow();  </span><br><span class="line">        <span class="keyword">if</span> (selectedRow != -<span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="comment">// 实现删除逻辑  </span></span><br><span class="line">            tableModel.removeRow(selectedRow);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好的，我们用 Java 语言来详细说明面向对象编程 (OOP) 的概念、原则和实践。&lt;/p&gt;
&lt;h2 id=&quot;1-类-Class-和对象-Object&quot;&gt;&lt;a href=&quot;#1-类-Class-和对象-Object&quot; class=&quot;headerlink&quot; title=&quot;1.</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第四章：数组</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E6%95%B0%E7%BB%84/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E6%95%B0%E7%BB%84/</id>
    <published>2025-05-12T03:22:15.000Z</published>
    <updated>2025-05-12T03:25:11.229Z</updated>
    
    <content type="html"><![CDATA[<p>好的，我们来详细讲解一下数组 (Array)。</p><p><strong>什么是数组？</strong></p><p>数组是一种数据结构，用于存储<strong>相同类型</strong>的元素的<strong>固定大小</strong>的顺序集合。 数组中的每个元素都可以通过其索引来访问。</p><p><strong>数组的特点</strong></p><ul><li><strong>相同类型</strong>：数组中的所有元素必须是相同的数据类型（例如，整数、浮点数、字符串等）。</li><li><strong>固定大小</strong>：数组在创建时必须指定大小，并且大小在创建后不能更改。</li><li><strong>顺序集合</strong>：数组中的元素按照一定的顺序排列，每个元素都有一个唯一的索引。</li><li><strong>索引访问</strong>：可以通过索引来访问数组中的任何元素。 索引通常从 0 开始。</li></ul><p><strong>数组的优点</strong></p><ul><li><strong>高效访问</strong>：可以通过索引快速访问数组中的任何元素，时间复杂度为 O(1)。</li><li><strong>简单易用</strong>：数组是一种简单的数据结构，易于理解和使用。</li></ul><p><strong>数组的缺点</strong></p><ul><li><strong>固定大小</strong>：数组的大小在创建后不能更改，这可能会导致空间浪费或溢出。</li><li><strong>插入和删除效率低</strong>：在数组中插入或删除元素需要移动其他元素，时间复杂度为 O(n)。</li><li><strong>只能存储相同类型的元素</strong>：数组只能存储相同类型的元素，这限制了其灵活性。</li></ul><p><strong>数组的声明和初始化</strong></p><p>在 Java 中，数组的声明和初始化有多种方式：</p><ol><li><p><strong>先声明，后初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个整数数组，名为 numbers，大小为 5</span></span><br><span class="line"><span class="type">int</span>[] numbers;</span><br><span class="line">numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个字符串数组，名为 names，大小为 3</span></span><br><span class="line">String[] names;</span><br><span class="line">names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>声明并初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化一个整数数组，名为 numbers，大小为 5</span></span><br><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并初始化一个字符串数组，名为 names，大小为 3</span></span><br><span class="line">String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>声明并直接赋值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化一个整数数组，名为 numbers，并直接赋值</span></span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并初始化一个字符串数组，名为 names，并直接赋值</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li></ol><p><strong>数组元素的访问</strong></p><p>可以通过索引来访问数组中的元素。 索引从 0 开始，到 <code>数组长度 - 1</code> 结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组中的第一个元素（索引为 0）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">firstElement</span> <span class="operator">=</span> numbers[<span class="number">0</span>]; <span class="comment">// firstElement 的值为 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组中的第三个元素（索引为 2）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">thirdElement</span> <span class="operator">=</span> numbers[<span class="number">2</span>]; <span class="comment">// thirdElement 的值为 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组中的第四个元素（索引为 3）</span></span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">45</span>; <span class="comment">// numbers 数组变为 &#123;10, 20, 30, 45, 50&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数组的长度</strong></p><p>可以使用 <code>数组名.length</code> 来获取数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> numbers.length; <span class="comment">// length 的值为 5</span></span><br></pre></td></tr></table></figure><p><strong>数组的遍历</strong></p><p>可以使用循环来遍历数组中的所有元素。</p><ol><li><p><strong>使用 <code>for</code> 循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Element at index &quot;</span> + i + <span class="string">&quot;: &quot;</span> + numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用增强型 <code>for</code> 循环 (foreach 循环)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>多维数组</strong></p><p>Java 支持多维数组，例如二维数组、三维数组等。 多维数组可以看作是数组的数组。</p><ol><li><p><strong>二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化一个二维整数数组，3 行 4 列</span></span><br><span class="line"><span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维数组中的元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> matrix[<span class="number">1</span>][<span class="number">2</span>]; <span class="comment">// element 的值为 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>数组的常用操作</strong></p><ul><li><strong>排序</strong>：可以使用 <code>Arrays.sort()</code> 方法对数组进行排序。</li><li><strong>查找</strong>：可以使用循环或二分查找算法在数组中查找指定元素。</li><li><strong>复制</strong>：可以使用 <code>Arrays.copyOf()</code> 方法复制数组。</li><li><strong>填充</strong>：可以使用 <code>Arrays.fill()</code> 方法用指定值填充数组。</li><li><strong>比较</strong>：可以使用 <code>Arrays.equals()</code> 方法比较两个数组是否相等。</li></ul><p><strong>数组的替代方案</strong></p><p>由于数组的大小固定，插入和删除效率低，因此在某些情况下，可以使用其他数据结构来替代数组，例如：</p><ul><li><strong><code>ArrayList</code></strong>: 可变大小的数组，可以动态添加和删除元素。</li><li><strong><code>LinkedList</code></strong>: 链表，插入和删除效率高，但访问效率较低。</li><li><strong><code>HashMap</code></strong>: 键值对存储，可以根据键快速查找值。</li></ul><p><strong>总结</strong></p><p>数组是一种基本的数据结构，用于存储相同类型的元素的固定大小的顺序集合。 了解数组的特点、声明、初始化、访问、遍历和常用操作对于编写 Java 程序至关重要。 在选择数据结构时，需要根据实际需求权衡数组的优缺点，选择最合适的数据结构。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="https://i.imgur.com/0yPEAGb.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好的，我们来详细讲解一下数组 (Array)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是数组？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组是一种数据结构，用于存储&lt;strong&gt;相同类型&lt;/strong&gt;的元素的&lt;strong&gt;固定大小&lt;/strong&gt;的顺序集合。 数组中的每个元素</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第三章：程序流程的控制</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%9A%84%E6%8E%A7%E5%88%B6/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%9A%84%E6%8E%A7%E5%88%B6/</id>
    <published>2025-05-12T03:21:53.000Z</published>
    <updated>2025-05-12T03:24:22.761Z</updated>
    
    <content type="html"><![CDATA[<p>Java 的分支结构允许程序根据不同的条件执行不同的代码块。 主要有两种类型的分支结构：</p><p><strong>1. <code>if</code> 语句</strong></p><p><code>if</code> 语句是最基本的分支结构。 它根据一个布尔表达式的值来决定是否执行一个代码块。</p><ul><li><p><strong><code>if</code> 语句的基本语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为 true，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>示例:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你已经成年了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>if-else</code> 语句:</strong></p><p><code>if-else</code> 语句在 <code>if</code> 条件不满足时，执行 <code>else</code> 代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为 true，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为 false，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>示例:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你已经成年了&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你还没有成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>if-else if-else</code> 语句:</strong></p><p><code>if-else if-else</code> 语句允许你检查多个条件。  它按顺序评估每个 <code>if</code> 和 <code>else if</code> 的布尔表达式，如果找到一个为 <code>true</code> 的表达式，则执行相应的代码块。 如果所有条件都不满足，则执行 <code>else</code> 代码块（如果存在）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式1为 true，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式2为 true，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式3为 true，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果所有布尔表达式都为 false，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>示例:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中等&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. <code>switch</code> 语句</strong></p><p><code>switch</code> 语句提供了一种更简洁的方式来根据一个变量的值执行不同的代码块。  它通常用于处理多个离散值的情况。</p><ul><li><p><strong><code>switch</code> 语句的基本语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 如果表达式的值等于 值1，则执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 如果表达式的值等于 值2，则执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">        <span class="comment">// 如果表达式的值等于 值3，则执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 如果表达式的值与所有 case 值都不匹配，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>表达式</code>:</strong>  必须是一个可以转换为 <code>int</code>、<code>short</code>、<code>byte</code>、<code>char</code>、<code>String</code> (Java 7 及以上) 或 <code>enum</code> 类型的表达式。</li><li><strong><code>case 值</code>:</strong>  必须是与表达式类型兼容的常量值。</li><li><strong><code>break</code> 语句:</strong>  <code>break</code> 语句用于在执行完一个 <code>case</code> 代码块后跳出 <code>switch</code> 语句。 如果省略 <code>break</code> 语句，程序将继续执行下一个 <code>case</code> 代码块，直到遇到 <code>break</code> 语句或 <code>switch</code> 语句结束（称为 “fall-through”）。</li><li><strong><code>default</code> 语句:</strong>  <code>default</code> 语句是可选的。  如果表达式的值与所有 <code>case</code> 值都不匹配，则执行 <code>default</code> 代码块。</li></ul></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">String dayName;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        dayName = <span class="string">&quot;无效的日期&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;今天是：&quot;</span> + dayName);</span><br></pre></td></tr></table></figure></li></ul><p><strong><code>if</code> 语句 vs. <code>switch</code> 语句:</strong></p><ul><li><strong><code>if</code> 语句:</strong>  更灵活，可以处理更复杂的条件，例如范围检查和逻辑组合。</li><li><strong><code>switch</code> 语句:</strong>  更简洁，更易于阅读，适用于处理多个离散值的情况。  但 <code>switch</code> 语句的表达式类型有限制。</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>Java 的循环结构允许你重复执行一段代码，直到满足特定条件为止。 Java 提供了三种主要的循环结构：</p><p><strong>1. <code>for</code> 循环</strong></p><p><code>for</code> 循环通常用于在知道循环次数的情况下重复执行代码块。</p><ul><li><p><strong><code>for</code> 循环的基本语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 条件; 更新) &#123;</span><br><span class="line">    <span class="comment">// 循环体：要重复执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>初始化:</strong>  在循环开始前执行一次。 通常用于声明和初始化循环计数器。</li><li><strong>条件:</strong>  在每次循环迭代之前评估。 如果条件为 <code>true</code>，则执行循环体。 如果条件为 <code>false</code>，则循环结束。</li><li><strong>更新:</strong>  在每次循环迭代之后执行。 通常用于更新循环计数器。</li></ul></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子会打印出 i 从 0 到 9 的值。</p></li><li><p><strong>增强型 <code>for</code> 循环 (也称为 “for-each” 循环):</strong></p><p>增强型 <code>for</code> 循环用于遍历数组或集合中的元素。  它简化了遍历过程，无需手动管理索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 元素变量 : 数组或集合) &#123;</span><br><span class="line">    <span class="comment">// 循环体：使用 元素变量 访问当前元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>示例:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> number : numbers) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子会打印出数组 <code>numbers</code> 中的每个元素。</p></li></ul><p><strong>2. <code>while</code> 循环</strong></p><p><code>while</code> 循环在条件为 <code>true</code> 的情况下重复执行代码块。  它通常用于在循环次数未知的情况下重复执行代码。</p><ul><li><p><strong><code>while</code> 循环的基本语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 循环体：要重复执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>条件:</strong>  在每次循环迭代之前评估。 如果条件为 <code>true</code>，则执行循环体。 如果条件为 <code>false</code>，则循环结束。</li></ul></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子会打印出 count 从 0 到 4 的值。</p></li></ul><p><strong>3. <code>do-while</code> 循环</strong></p><p><code>do-while</code> 循环与 <code>while</code> 循环类似，但它保证循环体至少执行一次，即使条件一开始就为 <code>false</code>。</p><ul><li><p><strong><code>do-while</code> 循环的基本语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体：要重复执行的代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><ul><li><strong>条件:</strong>  在每次循环迭代之后评估。 如果条件为 <code>true</code>，则继续循环。 如果条件为 <code>false</code>，则循环结束。</li></ul></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">    number++;</span><br><span class="line">&#125; <span class="keyword">while</span> (number &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>这个例子会打印出 number &#x3D; 10，即使 number 一开始就大于 5。</p></li></ul><p><strong>循环控制语句:</strong></p><ul><li><p><strong><code>break</code> 语句:</strong>  <code>break</code> 语句用于立即终止循环，并跳出循环体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 i 等于 5 时，终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>continue</code> 语句:</strong>  <code>continue</code> 语句用于跳过当前循环迭代的剩余代码，并开始下一次迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 当 i 是偶数时，跳过本次迭代</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// 只打印奇数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>选择哪种循环结构:</strong></p><ul><li><strong><code>for</code> 循环:</strong>  当你知道循环次数时，使用 <code>for</code> 循环。</li><li><strong>增强型 <code>for</code> 循环:</strong>  当需要遍历数组或集合时，使用增强型 <code>for</code> 循环。</li><li><strong><code>while</code> 循环:</strong>  当循环次数未知，并且需要在循环开始前检查条件时，使用 <code>while</code> 循环。</li><li><strong><code>do-while</code> 循环:</strong>  当循环次数未知，并且需要保证循环体至少执行一次时，使用 <code>do-while</code> 循环。</li></ul><p><strong>注意事项:</strong></p><ul><li><strong>避免无限循环:</strong>  确保循环条件最终会变为 <code>false</code>，否则循环将永远执行下去。</li><li><strong>循环体内的代码:</strong>  确保循环体内的代码能够正确地更新循环条件，以便循环能够正常结束。</li><li><strong>循环嵌套:</strong>  可以在一个循环内部嵌套另一个循环。  但是，要小心嵌套循环的复杂性，避免出现性能问题。</li></ul><h2 id="跳转关键字"><a href="#跳转关键字" class="headerlink" title="跳转关键字"></a>跳转关键字</h2><p>在 Java 中，跳转关键字用于改变程序的执行流程，使其跳转到代码中的其他位置。 主要有以下三个跳转关键字：</p><p><strong>1. <code>break</code></strong></p><ul><li><p><strong>作用:</strong> <code>break</code> 语句用于立即终止循环（<code>for</code>、<code>while</code>、<code>do-while</code>）或 <code>switch</code> 语句的执行。</p></li><li><p><strong>用法:</strong></p><ul><li><strong>在循环中:</strong> <code>break</code> 语句会跳出当前循环，程序会继续执行循环之后的代码。</li><li><strong>在 <code>switch</code> 语句中:</strong> <code>break</code> 语句用于防止 “fall-through” 行为，即在执行完一个 <code>case</code> 代码块后，跳出 <code>switch</code> 语句。</li></ul></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在循环中使用 break</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 i 等于 5 时，终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// i = 0</span></span><br><span class="line"><span class="comment">// i = 1</span></span><br><span class="line"><span class="comment">// i = 2</span></span><br><span class="line"><span class="comment">// i = 3</span></span><br><span class="line"><span class="comment">// i = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 switch 语句中使用 break</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">String dayName;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        dayName = <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        dayName = <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;今天是：&quot;</span> + dayName); <span class="comment">// 输出: 今天是：星期三</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2. <code>continue</code></strong></p><ul><li><p><strong>作用:</strong> <code>continue</code> 语句用于跳过当前循环迭代的剩余代码，并开始下一次迭代。</p></li><li><p><strong>用法:</strong> <code>continue</code> 语句只能在循环中使用（<code>for</code>、<code>while</code>、<code>do-while</code>）。</p></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 当 i 是偶数时，跳过本次迭代</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// 只打印奇数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// i = 1</span></span><br><span class="line"><span class="comment">// i = 3</span></span><br><span class="line"><span class="comment">// i = 5</span></span><br><span class="line"><span class="comment">// i = 7</span></span><br><span class="line"><span class="comment">// i = 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>3. <code>return</code></strong></p><ul><li><p><strong>作用:</strong> <code>return</code> 语句用于从方法中返回。  它可以返回一个值（如果方法声明了返回类型），或者不返回任何值（如果方法声明为 <code>void</code>）。</p></li><li><p><strong>用法:</strong> <code>return</code> 语句可以在任何方法中使用。  当执行到 <code>return</code> 语句时，方法会立即终止，并将控制权返回给调用者。</p></li><li><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不返回任何值 (void 方法)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 可选，通常省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum); <span class="comment">// 输出: Sum: 8</span></span><br><span class="line"></span><br><span class="line">    printMessage(<span class="string">&quot;Hello, world!&quot;</span>); <span class="comment">// 输出: Hello, world!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>总结:</strong></p><ul><li><code>break</code> 用于终止循环或 <code>switch</code> 语句。</li><li><code>continue</code> 用于跳过当前循环迭代。</li><li><code>return</code> 用于从方法中返回。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java 的分支结构允许程序根据不同的条件执行不同的代码块。 主要有两种类型的分支结构：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;if&lt;/code&gt; 语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 语句是最基本的分支结构。 它根据一个布尔表达式</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第二章：Java程序的基本语法</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9AJava%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9AJava%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2025-05-12T03:21:35.000Z</published>
    <updated>2025-05-12T03:24:00.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Java 中的注释主要有三种类型：</p><ol><li><p><strong>单行注释</strong>：使用 <code>//</code> 开始，直到行尾的所有内容都会被视为注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 这也是一个单行注释</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多行注释</strong>：使用 <code>/*</code> 开始，以 <code>*/</code> 结束。可以跨越多行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是一个多行注释。</span></span><br><span class="line"><span class="comment"> * 可以用来解释一段代码的功能或者其他信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>文档注释</strong>：使用 <code>/**</code> 开始，以 <code>*/</code> 结束。这种注释类型主要用于生成 API 文档（例如，使用 Javadoc 工具）。文档注释可以包含特定的标签（例如 <code>@param</code>, <code>@return</code>, <code>@throws</code> 等）来描述类、方法、字段等的详细信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个文档注释。</span></span><br><span class="line"><span class="comment"> * 用于描述类或方法的用途。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a  第一个参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b  第二个参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   返回两个参数的和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总结：</p><ul><li><code>//</code>：单行注释</li><li><code>/* ... */</code>：多行注释</li><li><code>/** ... */</code>：文档注释 (用于 Javadoc)</li></ul><p>可以使用代码自动生成注释</p><h2 id="认识字面量"><a href="#认识字面量" class="headerlink" title="认识字面量"></a>认识字面量</h2><p>Java 中的字面量（Literals）是指在源代码中直接表示固定值的符号。它们是程序中直接使用的数据值，不需要计算或转换。Java 支持多种类型的字面量，包括：</p><ol><li><p><strong>整数字面量</strong>：</p><ul><li>十进制：直接写数字，如 <code>10</code>, <code>123</code>, <code>4567</code>。</li><li>八进制：以 <code>0</code> 开头，如 <code>012</code> (十进制的 10)。</li><li>十六进制：以 <code>0x</code> 或 <code>0X</code> 开头，如 <code>0xA</code> (十进制的 10), <code>0xFF</code> (十进制的 255)。</li><li>二进制：以 <code>0b</code> 或 <code>0B</code> 开头（Java 7+），如 <code>0b1010</code> (十进制的 10)。</li><li>长整型：在数字后加 <code>L</code> 或 <code>l</code>，如 <code>1234567890123L</code>。</li></ul></li><li><p><strong>浮点数字面量</strong>：</p><ul><li>单精度浮点数（float）：在数字后加 <code>F</code> 或 <code>f</code>，如 <code>3.14F</code>, <code>2.0f</code>。</li><li>双精度浮点数（double）：直接写数字，或者在数字后加 <code>D</code> 或 <code>d</code>，如 <code>3.14</code>, <code>2.0d</code>, <code>2.0D</code>。</li></ul></li><li><p><strong>布尔字面量</strong>：</p><ul><li><code>true</code> 和 <code>false</code>。</li></ul></li><li><p><strong>字符字面量</strong>：</p><ul><li>用单引号括起来的单个字符，如 <code>&#39;A&#39;</code>, <code>&#39;9&#39;</code>, <code>&#39;#&#39;</code>。</li><li>转义字符：用反斜杠 <code>\</code> 开头的特殊字符，如 <code>&#39;\n&#39;</code> (换行), <code>&#39;\t&#39;</code> (制表符), <code>&#39;\\&#39;</code> (反斜杠), <code>&#39;\&#39;&#39;</code> (单引号), <code>&#39;\&quot;&#39;</code> (双引号)。</li></ul></li><li><p><strong>字符串字面量</strong>：</p><ul><li>用双引号括起来的字符序列，如 <code>&quot;Hello&quot;</code>, <code>&quot;Java&quot;</code>, <code>&quot;123&quot;</code>。</li></ul></li><li><p><strong>空字面量</strong>：</p><ul><li><code>null</code>：表示一个空引用，即没有任何对象。</li></ul></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">decimalInt</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">octalInt</span> <span class="operator">=</span> <span class="number">012</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">hexInt</span> <span class="operator">=</span> <span class="number">0xA</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">binaryInt</span> <span class="operator">=</span> <span class="number">0b1010</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">longInt</span> <span class="operator">=</span> <span class="number">1234567890123L</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">floatNum</span> <span class="operator">=</span> <span class="number">3.14F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">doubleNum</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">boolValue</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">charValue</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">newline</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">stringValue</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">nullObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>字面量是源代码中直接表示值的符号。</li><li>Java 支持整型、浮点型、布尔型、字符型、字符串型和空字面量。</li><li>不同类型的字面量有不同的表示方式和规则。</li></ul><h2 id="认识变量"><a href="#认识变量" class="headerlink" title="认识变量"></a>认识变量</h2><p>变量是计算机程序中用于存储和表示数据的命名存储位置。你可以把变量想象成一个容器，它可以存放不同类型的信息，例如数字、文本、列表等等。在程序执行过程中，变量的值可以改变。</p><p>以下是关于变量的一些关键概念：</p><ul><li><strong>命名：</strong> 每个变量都有一个唯一的名称，用于在程序中引用它。变量名应该具有描述性，能够清晰地表达变量所代表的含义。</li><li><strong>类型：</strong> 变量具有数据类型，例如整数、浮点数、字符串、布尔值等。数据类型决定了变量可以存储的数据种类以及可以对变量执行的操作。</li><li><strong>赋值：</strong> 使用赋值运算符（例如 <code>=</code>）将值存储到变量中。例如，<code>x = 10</code> 将整数值 <code>10</code> 赋值给变量 <code>x</code>。</li><li><strong>作用域：</strong> 变量的作用域指的是变量在程序中可见和可访问的范围。变量的作用域可以是全局的（在整个程序中可见）或局部的（仅在特定的代码块中可见）。</li></ul><h3 id="变量的特点"><a href="#变量的特点" class="headerlink" title="变量的特点"></a>变量的特点</h3><p>变量有以下几个主要特点：</p><ol><li><strong>可变性：</strong> 变量的值可以在程序执行过程中被修改。这是变量最核心的特性。</li><li><strong>命名性：</strong> 每个变量都有一个唯一的名称（标识符），通过这个名称可以在程序中引用和访问变量。</li><li><strong>类型性：</strong> 变量具有特定的数据类型，例如整数、浮点数、字符串等。变量的类型决定了它可以存储的数据种类以及可以执行的操作。</li><li><strong>存储性：</strong> 变量在计算机内存中占据一定的存储空间，用于存储变量的值。</li><li><strong>作用域：</strong> 变量的作用域定义了变量在程序中可以被访问的范围。变量可以是全局的（在整个程序中可见）或局部的（仅在特定代码块中可见）。</li><li><strong>生命周期：</strong> 变量的生命周期指的是变量从创建到销毁的时间段。变量在声明时被创建，并在超出其作用域时被销毁。</li></ol><h3 id="变量里数据的存储原理"><a href="#变量里数据的存储原理" class="headerlink" title="变量里数据的存储原理"></a>变量里数据的存储原理</h3><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>好的，下面我来介绍一下二进制：</p><p><strong>什么是二进制？</strong></p><p>二进制是一种基于 2 的数字系统，这意味着它只使用两个数字：0 和 1。这与我们日常生活中使用的十进制（基于 10，使用数字 0 到 9）不同。</p><p><strong>为什么计算机使用二进制？</strong></p><p>计算机使用二进制是因为它很容易用电子设备来实现。在计算机内部，信息以电信号的形式表示。</p><ul><li>0 可以表示为“无电压”或“关闭”</li><li>1 可以表示为“有电压”或“打开”<br>这种简单的“开&#x2F;关”状态使得计算机能够可靠地存储和处理信息。</li></ul><p><strong>二进制的计数方式</strong></p><p>在十进制中，每一位代表 10 的幂（例如，个位是 10⁰，十位是 10¹，百位是 10²，等等）。</p><p>在二进制中，每一位代表 2 的幂（例如，个位是 2⁰，第二位是 2¹，第三位是 2²，等等）。</p><p>以下是一些二进制数及其对应的十进制数：</p><ul><li>二进制 <code>0</code> &#x3D; 十进制 0</li><li>二进制 <code>1</code> &#x3D; 十进制 1</li><li>二进制 <code>10</code> &#x3D; (1 x 2¹) + (0 x 2⁰) &#x3D; 2 + 0 &#x3D; 十进制 2</li><li>二进制 <code>11</code> &#x3D; (1 x 2¹) + (1 x 2⁰) &#x3D; 2 + 1 &#x3D; 十进制 3</li><li>二进制 <code>100</code> &#x3D; (1 x 2²) + (0 x 2¹) + (0 x 2⁰) &#x3D; 4 + 0 + 0 &#x3D; 十进制 4</li><li>二进制 <code>101</code> &#x3D; (1 x 2²) + (0 x 2¹) + (1 x 2⁰) &#x3D; 4 + 0 + 1 &#x3D; 十进制 5</li></ul><p><strong>二进制的应用</strong></p><p>二进制是计算机科学的基础，它被用于：</p><ul><li><strong>数据存储：</strong> 计算机内存和硬盘使用二进制来存储数据。</li><li><strong>数据传输：</strong> 网络通信使用二进制来传输数据。</li><li><strong>逻辑运算：</strong> 计算机使用二进制来进行逻辑运算（例如 AND、OR、NOT）。</li><li><strong>程序指令：</strong> 计算机程序中的指令也是以二进制形式存储和执行的。</li></ul><p><strong>1. 文本文件 (Text File)</strong></p><ul><li><strong>存储方式：</strong> 文本文件存储的是可读的字符数据。文本文件通常使用 ASCII、UTF-8 或其他字符编码来存储字符。</li><li><strong>示例：</strong><ul><li><code>.txt</code>, <code>.csv</code>, <code>.html</code>, <code>.java</code>, <code>.py</code></li></ul></li></ul><p><strong>2. 图像文件 (Image File)</strong><br><img src="https://i.imgur.com/1sSzyr3.png"></p><ul><li><strong>存储方式：</strong> 图像文件存储的是图像的像素数据。图像文件可以使用多种格式来存储，例如：<ul><li><strong>位图格式 (Bitmap)：</strong> 例如 <code>.bmp</code>，存储的是每个像素的颜色值。</li><li><strong>JPEG 格式：</strong> 例如 <code>.jpg</code>, <code>.jpeg</code>，使用有损压缩算法来减小文件大小。</li><li><strong>PNG 格式：</strong> 例如 <code>.png</code>，使用无损压缩算法来减小文件大小。</li><li><strong>GIF 格式：</strong> 例如 <code>.gif</code>，支持动画。</li></ul></li><li><strong>示例：</strong><ul><li><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/400px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg" alt="JPEG image example"></li><li><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/220px-PNG_transparency_demonstration_1.png" alt="PNG image example"></li></ul></li></ul><p><strong>3. 音频文件 (Audio File)</strong><br><img src="https://i.imgur.com/uknNxYx.png"></p><ul><li><strong>存储方式：</strong> 音频文件存储的是声音的波形数据。音频文件可以使用多种格式来存储，例如：<ul><li><strong>WAV 格式：</strong> 存储的是未经压缩的原始音频数据。</li><li><strong>MP3 格式：</strong> 使用有损压缩算法来减小文件大小。</li><li><strong>AAC 格式：</strong> 也是一种有损压缩格式，通常比 MP3 格式具有更好的音质。</li></ul></li><li><strong>示例：</strong><ul><li><code>.wav</code>, <code>.mp3</code>, <code>.aac</code></li></ul></li></ul><p><strong>4. 视频文件 (Video File)</strong></p><ul><li><strong>存储方式：</strong> 视频文件存储的是一系列图像帧和音频数据。视频文件可以使用多种格式来存储，例如：<ul><li><strong>MP4 格式：</strong> 一种常用的视频格式，使用 H.264 或 H.265 编码来压缩视频数据。</li><li><strong>AVI 格式：</strong> 一种较老的视频格式。</li><li><strong>MOV 格式：</strong> 苹果公司开发的视频格式。</li></ul></li><li><strong>示例：</strong><ul><li><code>.mp4</code>, <code>.avi</code>, <code>.mov</code></li></ul></li></ul><p><strong>5. 可执行文件 (Executable File)</strong></p><ul><li><strong>存储方式：</strong> 可执行文件存储的是计算机程序的可执行指令。可执行文件的格式取决于操作系统，例如：<ul><li><strong>Windows 操作系统：</strong> 使用 <code>.exe</code> 或 <code>.dll</code> 格式。</li><li><strong>Linux 操作系统：</strong> 使用 ELF 格式。</li><li><strong>macOS 操作系统：</strong> 使用 Mach-O 格式。</li></ul></li></ul><p><strong>其他文件类型</strong></p><p>除了以上常见的文件类型，还有其他许多文件类型，例如：</p><ul><li><strong>压缩文件：</strong> 例如 <code>.zip</code>, <code>.rar</code>, <code>.tar.gz</code>，用于将多个文件或目录压缩成一个文件，以减小文件大小。</li><li><strong>文档文件：</strong> 例如 <code>.doc</code>, <code>.docx</code>, <code>.pdf</code>，用于存储文档数据。</li><li><strong>数据库文件：</strong> 例如 <code>.db</code>, <code>.mdb</code>，用于存储数据库数据。</li></ul><h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><p><strong>什么是 ASCII？</strong></p><p>ASCII (American Standard Code for Information Interchange，美国信息交换标准代码) 是一种基于拉丁字母的字符编码，用于在计算机和通信设备中表示文本。它定义了 128 个字符，每个字符对应一个唯一的数字代码。</p><p><strong>ASCII 的历史</strong></p><p>ASCII 最初于 1963 年被标准化，并在 1968 年进行了更新。它是计算机历史上最常用的字符编码之一，对计算机技术的发展产生了深远的影响。</p><p><strong>ASCII 的字符集</strong></p><p>ASCII 字符集包含以下几类字符：</p><ul><li><strong>控制字符 (0-31)：</strong> 用于控制计算机或通信设备的行为，例如换行、回车、制表符等。</li><li><strong>数字 (48-57)：</strong> 表示数字 0 到 9。</li><li><strong>大写字母 (65-90)：</strong> 表示大写字母 A 到 Z。</li><li><strong>小写字母 (97-122)：</strong> 表示小写字母 a 到 z。</li><li><strong>标点符号和特殊字符 (32-47, 58-64, 91-96, 123-126)：</strong> 包括空格、标点符号、运算符等。</li></ul><p><strong>ASCII 的编码方式</strong></p><p>ASCII 使用 7 位二进制数来表示每个字符。这意味着 ASCII 可以表示 2⁷ &#x3D; 128 个不同的字符。</p><p><strong>ASCII 的局限性</strong></p><p>ASCII 的局限性在于它只能表示英语字符和一些常用的符号。对于其他语言，例如中文、日文、韩文等，ASCII 无法表示。</p><p><strong>ASCII 的扩展</strong></p><p>为了解决 ASCII 的局限性，人们开发了许多 ASCII 的扩展编码，例如 ISO-8859 系列编码。这些扩展编码使用 8 位二进制数来表示字符，可以表示 2⁸ &#x3D; 256 个不同的字符。</p><p><strong>Unicode 的出现</strong></p><p>最终，Unicode 的出现解决了所有字符编码的问题。Unicode 使用 16 位或更多位二进制数来表示字符，可以表示世界上几乎所有的字符。</p><p><strong>总结</strong></p><p>ASCII 是一种简单而常用的字符编码，它是计算机技术的基础。虽然 ASCII 有其局限性，但它对计算机技术的发展产生了深远的影响。现在，Unicode 已经成为最常用的字符编码，但 ASCII 仍然在某些场合中使用。<br><img src="https://i.imgur.com/H0SPsKy.png"></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>Okay, let’s learn about number system conversions in Java. Java provides some built-in methods and classes that make it easy to perform conversions between different number systems.</p><p><strong>1. 十进制转其他进制</strong></p><p>Java 提供了 <code>Integer</code> 类的静态方法来进行十进制到其他进制的转换：</p><ul><li><strong><code>Integer.toBinaryString(int i)</code>：</strong> 将十进制整数转换为二进制字符串。</li><li><strong><code>Integer.toOctalString(int i)</code>：</strong> 将十进制整数转换为八进制字符串。</li><li><strong><code>Integer.toHexString(int i)</code>：</strong> 将十进制整数转换为十六进制字符串。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">decimalNumber</span> <span class="operator">=</span> <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">binaryString</span> <span class="operator">=</span> Integer.toBinaryString(decimalNumber); <span class="comment">// &quot;11111111&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">octalString</span> <span class="operator">=</span> Integer.toOctalString(decimalNumber);   <span class="comment">// &quot;377&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> Integer.toHexString(decimalNumber);     <span class="comment">// &quot;ff&quot;</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Binary: &quot;</span> + binaryString);</span><br><span class="line">System.out.println(<span class="string">&quot;Octal: &quot;</span> + octalString);</span><br><span class="line">System.out.println(<span class="string">&quot;Hex: &quot;</span> + hexString);</span><br></pre></td></tr></table></figure><p><strong>2. 其他进制转十进制</strong></p><p>Java provides the <code>Integer.parseInt(String s, int radix)</code> method to convert a string representing a number in another base (radix) to a decimal integer. The <code>radix</code> parameter specifies the base of the string <code>s</code>.</p><ul><li><code>radix = 2</code>：二进制</li><li><code>radix = 8</code>：八进制</li><li><code>radix = 16</code>：十六进制</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">binaryString</span> <span class="operator">=</span> <span class="string">&quot;11111111&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">octalString</span> <span class="operator">=</span> <span class="string">&quot;377&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="string">&quot;ff&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">decimalFromBinary</span> <span class="operator">=</span> Integer.parseInt(binaryString, <span class="number">2</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="type">int</span> <span class="variable">decimalFromOctal</span> <span class="operator">=</span> Integer.parseInt(octalString, <span class="number">8</span>);   <span class="comment">// 255</span></span><br><span class="line"><span class="type">int</span> <span class="variable">decimalFromHex</span> <span class="operator">=</span> Integer.parseInt(hexString, <span class="number">16</span>);     <span class="comment">// 255</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Decimal from binary: &quot;</span> + decimalFromBinary);</span><br><span class="line">System.out.println(<span class="string">&quot;Decimal from octal: &quot;</span> + decimalFromOctal);</span><br><span class="line">System.out.println(<span class="string">&quot;Decimal from hex: &quot;</span> + decimalFromHex);</span><br></pre></td></tr></table></figure><p><strong>3. 其他进制之间的转换</strong></p><p>如果需要在二进制、八进制和十六进制之间进行转换，可以先将原始进制转换为十进制，然后再将十进制转换为目标进制。</p><p>示例：将二进制字符串转换为十六进制字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">binaryString</span> <span class="operator">=</span> <span class="string">&quot;10101010&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">decimalValue</span> <span class="operator">=</span> Integer.parseInt(binaryString, <span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> Integer.toHexString(decimalValue);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Hex from binary: &quot;</span> + hexString); <span class="comment">// &quot;aa&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4. 注意事项</strong></p><ul><li><code>Integer.parseInt()</code> 方法在解析字符串时可能会抛出 <code>NumberFormatException</code> 异常，如果字符串不符合指定的进制规则，或者字符串表示的数值超出了 <code>int</code> 类型的范围。</li><li>在将十六进制字符串转换为十进制整数时，十六进制字符串中的字母（A-F）不区分大小写。</li></ul><p>总而言之，Java 提供了方便的方法来进行进制转换。你可以根据需要选择合适的方法来进行转换。希望这些信息对你有所帮助！</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://i.imgur.com/LqEVlM5.png"></p><ol><li><p><strong>基本数据类型 (Primitive Data Types):</strong></p><ul><li><strong>整数类型 (Integer Types):</strong><ul><li><code>int</code>: 用于存储整数，例如：<code>10</code>, <code>-5</code>, <code>0</code>。</li><li><code>long</code>: 用于存储较大范围的整数。</li><li><code>short</code>: 用于存储较小范围的整数。</li><li><code>byte</code>: 用于存储非常小范围的整数。</li></ul></li><li><strong>浮点数类型 (Floating-Point Types):</strong><ul><li><code>float</code>: 用于存储单精度浮点数，例如：<code>3.14</code>, <code>-2.5</code>。</li><li><code>double</code>: 用于存储双精度浮点数，提供更高的精度。</li></ul></li><li><strong>字符类型 (Character Type):</strong><ul><li><code>char</code>: 用于存储单个字符，例如：<code>&#39;A&#39;</code>, <code>&#39;z&#39;</code>, <code>&#39;9&#39;</code>。</li></ul></li><li><strong>布尔类型 (Boolean Type):</strong><ul><li><code>boolean</code>: 用于存储布尔值，即 <code>true</code> 或 <code>false</code>。</li></ul></li></ul></li><li><p><strong>复合数据类型 (Composite Data Types):</strong></p><ul><li><strong>数组 (Arrays):</strong><ul><li>用于存储相同类型的多个元素的集合。例如，整数数组、字符数组等。</li></ul></li><li><strong>字符串 (Strings):</strong><ul><li>用于存储文本数据，本质上是字符的序列。</li></ul></li><li><strong>结构体 (Structures):</strong><ul><li>用于将不同类型的数据组合成一个单一的单元。</li></ul></li><li><strong>指针 (Pointers):</strong><ul><li>用于存储变量的内存地址。</li></ul></li></ul></li><li><p><strong>其他数据类型:</strong></p><ul><li><strong>枚举 (Enumerations):</strong><ul><li>用于定义一组命名的整数常量。</li></ul></li><li><strong>联合体 (Unions):</strong><ul><li>允许在相同的内存位置存储不同的数据类型。</li></ul></li><li><strong>空类型 (Void):</strong><ul><li>表示没有类型，通常用于函数不返回任何值的情况。</li></ul></li></ul></li></ol><h2 id="标识符-关键字"><a href="#标识符-关键字" class="headerlink" title="标识符-关键字"></a>标识符-关键字</h2><p><strong>标识符 (Identifiers)</strong></p><p>标识符是程序员在代码中用来给变量、函数、类、模块或其他程序实体命名的符号。简单来说，标识符就是你给事物起的名字。</p><p><strong>标识符的命名规则 (Naming Rules):</strong></p><ul><li><strong>组成:</strong> 标识符通常由字母（A-Z, a-z）、数字（0-9）和下划线（_）组成。</li><li><strong>开头:</strong> 标识符必须以字母或下划线开头，不能以数字开头。</li><li><strong>大小写敏感:</strong> 大多数编程语言（如C++, Java, Python）是大小写敏感的，这意味着 <code>myVariable</code> 和 <code>MyVariable</code> 会被认为是不同的标识符。</li><li><strong>长度限制:</strong> 某些语言可能对标识符的长度有限制，但通常这个限制非常大，可以忽略。</li><li><strong>避免使用保留字:</strong> 标识符不能与编程语言的关键字（见下文）相同。</li><li><strong>可读性:</strong> 尽量选择有意义、易于理解的名称，提高代码的可读性。例如，使用 <code>studentName</code> 代替 <code>sn</code>。</li></ul><p><strong>示例 (Examples):</strong></p><p>合法的标识符:</p><ul><li><code>myVariable</code></li><li><code>_count</code></li><li><code>student_name</code></li><li><code>x123</code></li><li><code>MAX_VALUE</code></li></ul><p>非法的标识符:</p><ul><li><code>123variable</code> (以数字开头)</li><li><code>my-variable</code> (包含非法字符 <code>-</code>)</li><li><code>if</code> (与关键字冲突)</li></ul><p><strong>关键字 (Keywords)</strong></p><p>关键字是编程语言中预定义的、具有特殊含义的单词。它们被编译器或解释器用于识别语言的结构和控制程序的流程。关键字不能用作标识符。</p><p><strong>关键字的特点 (Characteristics):</strong></p><ul><li><strong>预定义:</strong> 关键字是语言设计者预先定义好的。</li><li><strong>特殊含义:</strong> 每个关键字都有其特定的用途和含义。</li><li><strong>不可重定义:</strong> 程序员不能改变关键字的含义。</li><li><strong>保留字:</strong> 关键字是保留字，不能作为变量名、函数名等标识符使用。</li></ul><p><strong>常见关键字示例 (Common Examples):</strong></p><p>不同的编程语言有不同的关键字集合，以下是一些常见编程语言的关键字示例：</p><ul><li><strong>C&#x2F;C++:</strong> <code>int</code>, <code>float</code>, <code>char</code>, <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>return</code>, <code>struct</code>, <code>class</code>, <code>void</code>, <code>switch</code>, <code>case</code>, <code>break</code>, <code>continue</code>, <code>default</code>, <code>typedef</code>, <code>const</code>, <code>static</code>, <code>extern</code>, <code>sizeof</code>, <code>new</code>, <code>delete</code>, <code>try</code>, <code>catch</code>, <code>throw</code>, <code>template</code>, <code>namespace</code>, <code>using</code>, <code>virtual</code>, <code>friend</code>, <code>public</code>, <code>private</code>, <code>protected</code></li><li><strong>Java:</strong> <code>int</code>, <code>float</code>, <code>char</code>, <code>boolean</code>, <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>return</code>, <code>class</code>, <code>interface</code>, <code>void</code>, <code>switch</code>, <code>case</code>, <code>break</code>, <code>continue</code>, <code>default</code>, <code>public</code>, <code>private</code>, <code>protected</code>, <code>static</code>, <code>final</code>, <code>abstract</code>, <code>implements</code>, <code>extends</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code>, <code>new</code>, <code>this</code>, <code>super</code>, <code>package</code>, <code>import</code>, <code>instanceof</code>, <code>synchronized</code>, <code>volatile</code>, <code>transient</code>, <code>assert</code>, <code>enum</code>, <code>strictfp</code></li><li><strong>Python:</strong> <code>and</code>, <code>as</code>, <code>assert</code>, <code>async</code>, <code>await</code>, <code>break</code>, <code>class</code>, <code>continue</code>, <code>def</code>, <code>del</code>, <code>elif</code>, <code>else</code>, <code>except</code>, <code>False</code>, <code>finally</code>, <code>for</code>, <code>from</code>, <code>global</code>, <code>if</code>, <code>import</code>, <code>in</code>, <code>is</code>, <code>lambda</code>, <code>None</code>, <code>nonlocal</code>, <code>not</code>, <code>or</code>, <code>pass</code>, <code>raise</code>, <code>return</code>, <code>True</code>, <code>try</code>, <code>while</code>, <code>with</code>, <code>yield</code></li></ul><h2 id="Java的method"><a href="#Java的method" class="headerlink" title="Java的method"></a>Java的method</h2><p><strong>什么是方法 (What is a Method)?</strong></p><p>在 Java 中，方法是一段包含一条或多条语句的代码块，用于执行特定的任务。方法是组织代码的基本单元，允许你将程序分解为更小、更易于管理的部分。方法可以被多次调用，从而避免代码重复，提高代码的重用性和可读性。</p><p><strong>方法的组成 (Method Structure):</strong></p><p>一个 Java 方法通常由以下几个部分组成：</p><ol><li><p><strong>方法签名 (Method Signature):</strong></p><ul><li><strong>访问修饰符 (Access Modifier):</strong>  指定方法的访问权限，例如 <code>public</code>, <code>private</code>, <code>protected</code> 或默认（package-private）。</li><li><strong>返回类型 (Return Type):</strong>  指定方法返回的数据类型。如果方法不返回任何值，则使用 <code>void</code>。</li><li><strong>方法名 (Method Name):</strong>  方法的名称，遵循标识符的命名规则。</li><li><strong>参数列表 (Parameter List):</strong>  方法接受的参数，包括参数类型和参数名。参数是可选的，方法可以没有参数。</li></ul></li><li><p><strong>方法体 (Method Body):</strong></p><ul><li>包含实际执行的代码块，用花括号 <code>&#123;&#125;</code> 括起来。</li><li>方法体中的代码用于实现方法的具体功能。</li></ul></li></ol><p><strong>方法定义的语法 (Method Definition Syntax):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">    <span class="comment">// 可以包含一条或多条语句</span></span><br><span class="line">    <span class="keyword">return</span> 返回值; <span class="comment">// 如果返回类型不是 void，则必须有 return 语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 (Example):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 一个简单的加法方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个不返回任何值的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的调用 (Method Invocation):</strong></p><p>要执行一个方法，你需要调用它。方法的调用方式取决于方法是否是静态的 (static) 以及方法所属的类。</p><ol><li><p><strong>调用静态方法 (Calling Static Methods):</strong></p><ul><li>静态方法属于类，而不是类的实例。</li><li>可以通过类名直接调用静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名(参数);</span><br></pre></td></tr></table></figure></li><li><p><strong>调用实例方法 (Calling Instance Methods):</strong></p><ul><li>实例方法属于类的实例（对象）。</li><li>需要先创建类的实例，然后通过实例调用实例方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">对象名.方法名(参数);</span><br></pre></td></tr></table></figure></li></ol><p><strong>示例 (Example):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Math.max(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// Math 是 Java 标准库中的一个类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Max: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用实例方法</span></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> obj.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br><span class="line">        obj.printMessage(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的类型 (Types of Methods):</strong></p><ol><li><p><strong>静态方法 (Static Methods):</strong></p><ul><li>使用 <code>static</code> 关键字声明。</li><li>属于类，而不是类的实例。</li><li>可以直接通过类名调用。</li><li>不能访问实例变量，只能访问静态变量。</li></ul></li><li><p><strong>实例方法 (Instance Methods):</strong></p><ul><li>没有 <code>static</code> 关键字声明。</li><li>属于类的实例（对象）。</li><li>需要通过类的实例调用。</li><li>可以访问实例变量和静态变量。</li></ul></li><li><p><strong>构造方法 (Constructors):</strong></p><ul><li>用于创建类的实例。</li><li>方法名与类名相同。</li><li>没有返回类型（即使是 <code>void</code> 也不行）。</li><li>可以有参数，也可以没有参数。</li></ul></li><li><p><strong>抽象方法 (Abstract Methods):</strong></p><ul><li>使用 <code>abstract</code> 关键字声明。</li><li>没有方法体。</li><li>必须在抽象类中声明。</li><li>子类必须实现抽象方法，除非子类也是抽象类。</li></ul></li></ol><p><strong>方法的重载 (Method Overloading):</strong></p><ul><li>在同一个类中，可以有多个方法具有相同的方法名，但参数列表必须不同。</li><li>参数列表的不同可以是参数的类型、数量或顺序不同。</li><li>方法的重载允许你使用相同的方法名来执行不同的任务，提高代码的灵活性。</li></ul><p><strong>示例 (Example):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>什么是方法重载？</strong></p><p>方法重载（Method Overloading）是指在一个类中定义多个方法，它们具有<strong>相同的名称</strong>，但具有<strong>不同的参数列表</strong>。  编译器会根据调用方法时提供的参数类型和数量来决定调用哪个重载方法。</p><p><strong>方法重载的规则：</strong></p><p>要使方法构成重载，必须满足以下条件：</p><ol><li><strong>方法名称必须相同。</strong></li><li><strong>参数列表必须不同。</strong>  参数列表的不同体现在以下几个方面：<ul><li><strong>参数的数量不同。</strong></li><li><strong>参数的类型不同。</strong></li><li><strong>参数的顺序不同。</strong></li></ul></li><li><strong>返回类型可以相同也可以不同。</strong>  返回类型不是方法签名的一部分，因此不能仅通过返回类型来区分重载方法。</li><li><strong>访问修饰符可以相同也可以不同。</strong>  访问修饰符（例如 <code>public</code>、<code>private</code>、<code>protected</code>）不是方法签名的一部分，因此不能仅通过访问修饰符来区分重载方法。</li><li><strong>可以重载在同一个类中声明的方法，也可以重载从超类继承的方法。</strong></li></ol><p><strong>方法签名:</strong></p><p>方法签名由方法的名称和参数列表组成。  编译器使用方法签名来区分不同的方法。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：两个整数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：三个整数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法3：两个浮点数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法4：一个整数和一个浮点数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法5：一个浮点数和一个整数相加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(calculator.add(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// 调用方法1：输出 3</span></span><br><span class="line">        System.out.println(calculator.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));    <span class="comment">// 调用方法2：输出 6</span></span><br><span class="line">        System.out.println(calculator.add(<span class="number">1.5</span>, <span class="number">2.5</span>));   <span class="comment">// 调用方法3：输出 4.0</span></span><br><span class="line">        System.out.println(calculator.add(<span class="number">1</span>, <span class="number">2.5</span>));     <span class="comment">// 调用方法4：输出 3.5</span></span><br><span class="line">        System.out.println(calculator.add(<span class="number">1.5</span>, <span class="number">2</span>));     <span class="comment">// 调用方法5：输出 3.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Calculator</code> 类定义了五个名为 <code>add</code> 的方法，它们具有不同的参数列表。  编译器会根据调用 <code>add</code> 方法时提供的参数类型和数量来决定调用哪个重载方法。</p><p><strong>方法重载的优点：</strong></p><ul><li><strong>提高代码的可读性：</strong>  使用相同的方法名称来执行相似的操作，可以使代码更易于理解。</li><li><strong>提高代码的重用性：</strong>  可以为不同的数据类型提供相同的功能，而无需创建不同的方法名称。</li><li><strong>灵活性：</strong>  允许使用不同数量或类型的参数来调用方法。</li></ul><p><strong>方法重载的注意事项：</strong></p><ul><li><strong>不要仅仅通过返回类型来区分重载方法。</strong>  这会导致编译错误。</li><li><strong>避免创建过于相似的重载方法。</strong>  这可能会导致编译器无法确定应该调用哪个方法。</li><li><strong>在使用可变参数（varargs）时要小心。</strong>  可变参数可能会与其他重载方法产生歧义。</li></ul><p><strong>示例：可变参数的重载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Varargs method&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String arg1, String arg2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Two-argument method&quot;</span>);</span><br><span class="line">        System.out.println(arg1);</span><br><span class="line">        System.out.println(arg2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VarargsExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VarargsExample</span>();</span><br><span class="line">        example.print(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);       <span class="comment">// 调用 Two-argument method</span></span><br><span class="line">        example.print(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;!&quot;</span>);  <span class="comment">// 调用 Varargs method</span></span><br><span class="line">        example.print(<span class="string">&quot;Hello&quot;</span>);                <span class="comment">// 调用 Varargs method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的参数传递 (Parameter Passing):</strong></p><p>在 Java 中，方法的参数传递有两种方式：</p><ol><li><p><strong>按值传递 (Pass by Value):</strong></p><ul><li>对于基本数据类型（如 <code>int</code>, <code>float</code>, <code>char</code>, <code>boolean</code>），传递的是变量的值的副本。</li><li>在方法内部修改参数的值不会影响原始变量的值。</li></ul></li><li><p><strong>按引用传递 (Pass by Reference):</strong></p><ul><li>对于对象类型（如数组、类实例），传递的是对象的引用（内存地址）的副本。</li><li>在方法内部修改对象的属性会影响原始对象。</li></ul></li></ol><p><strong>示例 (Example):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterPassing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyValue</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        x = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method: x = &quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyObject</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method: arr[0] = &quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method: a = &quot;</span> + a);</span><br><span class="line">        modifyValue(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method: a = &quot;</span> + a);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method: numbers[0] = &quot;</span> + numbers[<span class="number">0</span>]);</span><br><span class="line">        modifyObject(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method: numbers[0] = &quot;</span> + numbers[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>什么是类型转换？</strong></p><p>类型转换（Type Conversion）是指将一个数据类型的值转换为另一个数据类型的值。 在 Java 中，类型转换分为两种：</p><ol><li><strong>隐式类型转换（Implicit Type Conversion）</strong>，也称为自动类型转换（Automatic Type Conversion）或拓宽转换（Widening Conversion）。</li><li><strong>显式类型转换（Explicit Type Conversion）</strong>，也称为强制类型转换（Casting）或窄化转换（Narrowing Conversion）。</li></ol><p><strong>1. 隐式类型转换（自动类型转换）</strong></p><ul><li><p><strong>定义：</strong> 当将一个较小范围的数据类型的值赋给一个较大范围的数据类型变量时，Java 编译器会自动进行类型转换，无需显式指定。</p></li><li><p><strong>方向：</strong> 总是从较小范围的类型转换为较大范围的类型，以避免数据丢失。</p></li><li><p><strong>适用情况：</strong></p><ul><li><code>byte</code> -&gt; <code>short</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></li><li><code>char</code> -&gt; <code>int</code></li></ul></li><li><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">longValue</span> <span class="operator">=</span> intValue; <span class="comment">// 隐式类型转换，int 转换为 long</span></span><br><span class="line"><span class="type">float</span> <span class="variable">floatValue</span> <span class="operator">=</span> longValue; <span class="comment">// 隐式类型转换，long 转换为 float</span></span><br><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> floatValue; <span class="comment">// 隐式类型转换，float 转换为 double</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">charValue</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">intFromChar</span> <span class="operator">=</span> charValue; <span class="comment">// 隐式类型转换，char 转换为 int (A 的 ASCII 码是 65)</span></span><br><span class="line"></span><br><span class="line">System.out.println(intValue);      <span class="comment">// 输出 100</span></span><br><span class="line">System.out.println(longValue);      <span class="comment">// 输出 100</span></span><br><span class="line">System.out.println(floatValue);     <span class="comment">// 输出 100.0</span></span><br><span class="line">System.out.println(doubleValue);    <span class="comment">// 输出 100.0</span></span><br><span class="line">System.out.println(intFromChar);    <span class="comment">// 输出 65</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 显式类型转换（强制类型转换）</strong></p><ul><li><p><strong>定义：</strong> 当将一个较大范围的数据类型的值赋给一个较小范围的数据类型变量时，需要使用强制类型转换运算符 <code>(目标类型)</code> 显式地进行类型转换。</p></li><li><p><strong>方向：</strong> 总是从较大范围的类型转换为较小范围的类型。</p></li><li><p><strong>风险：</strong> 可能会导致数据丢失或精度降低，因为较大范围的值可能超出较小范围类型的表示范围。</p></li><li><p><strong>适用情况：</strong></p><ul><li><code>double</code> -&gt; <code>float</code> -&gt; <code>long</code> -&gt; <code>int</code> -&gt; <code>short</code> -&gt; <code>byte</code></li><li><code>int</code> -&gt; <code>char</code></li></ul></li><li><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> <span class="number">123.456</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> (<span class="type">int</span>) doubleValue; <span class="comment">// 显式类型转换，double 转换为 int (小数部分被截断)</span></span><br><span class="line"><span class="type">long</span> <span class="variable">longValue</span> <span class="operator">=</span> <span class="number">2147483648L</span>; <span class="comment">// 大于 int 的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intFromLong</span> <span class="operator">=</span> (<span class="type">int</span>) longValue; <span class="comment">// 显式类型转换，long 转换为 int (可能导致数据溢出)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">intChar</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">charValue</span> <span class="operator">=</span> (<span class="type">char</span>) intChar; <span class="comment">// 显式类型转换，int 转换为 char (65 对应 ASCII 码的 &#x27;A&#x27;)</span></span><br><span class="line"></span><br><span class="line">System.out.println(doubleValue);   <span class="comment">// 输出 123.456</span></span><br><span class="line">System.out.println(intValue);      <span class="comment">// 输出 123 (小数部分被截断)</span></span><br><span class="line">System.out.println(longValue);      <span class="comment">// 输出 2147483648</span></span><br><span class="line">System.out.println(intFromLong);    <span class="comment">// 输出 -2147483648 (数据溢出)</span></span><br><span class="line">System.out.println(charValue);      <span class="comment">// 输出 A</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>类型转换的规则总结：</strong></p><table><thead><tr><th align="left">原始类型</th><th align="left">目标类型</th><th align="left">是否需要显式转换</th><th align="left">可能的风险</th></tr></thead><tbody><tr><td align="left"><code>byte</code></td><td align="left"><code>short</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>byte</code></td><td align="left"><code>int</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>byte</code></td><td align="left"><code>long</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>byte</code></td><td align="left"><code>float</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>byte</code></td><td align="left"><code>double</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>byte</code></td><td align="left"><code>char</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>short</code></td><td align="left"><code>int</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>short</code></td><td align="left"><code>long</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>short</code></td><td align="left"><code>float</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>short</code></td><td align="left"><code>double</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>short</code></td><td align="left"><code>char</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>long</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>float</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>double</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>char</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>float</code></td><td align="left">否</td><td align="left">可能精度丢失</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>double</code></td><td align="left">否</td><td align="left">可能精度丢失</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>int</code></td><td align="left">是</td><td align="left">数据截断&#x2F;溢出</td></tr><tr><td align="left"><code>float</code></td><td align="left"><code>double</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>float</code></td><td align="left"><code>long</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>float</code></td><td align="left"><code>int</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>double</code></td><td align="left"><code>long</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>double</code></td><td align="left"><code>int</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>char</code></td><td align="left"><code>int</code></td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left"><code>char</code></td><td align="left"><code>short</code></td><td align="left">是</td><td align="left">数据截断</td></tr><tr><td align="left"><code>char</code></td><td align="left"><code>byte</code></td><td align="left">是</td><td align="left">数据截断</td></tr></tbody></table><p><strong>类型转换的注意事项：</strong></p><ul><li><strong>数据溢出：</strong> 当将一个超出目标类型范围的值进行强制类型转换时，可能会发生数据溢出，导致结果不正确。</li><li><strong>精度丢失：</strong> 当将一个浮点数转换为整数时，小数部分会被截断，导致精度丢失。</li><li><strong>类型不兼容：</strong> 某些类型之间无法进行类型转换，例如 <code>boolean</code> 类型不能转换为其他任何类型，反之亦然。</li><li><strong>对象类型转换：</strong> 对象类型转换涉及到继承关系，可以将一个子类对象转换为其父类类型（向上转型），也可以将一个父类对象转换为其子类类型（向下转型），但向下转型需要使用 <code>instanceof</code> 运算符进行类型检查，以避免 <code>ClassCastException</code> 异常。</li></ul><p><strong>示例：对象类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Generic animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fetch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is fetching the ball&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CastingExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 向上转型 (Upcasting)</span></span><br><span class="line"></span><br><span class="line">        animal1.makeSound(); <span class="comment">// 输出 &quot;Generic animal sound&quot;</span></span><br><span class="line">        animal2.makeSound(); <span class="comment">// 输出 &quot;Woof!&quot; (多态)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型 (Downcasting)</span></span><br><span class="line">        <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal2;</span><br><span class="line">            dog.fetch(); <span class="comment">// 输出 &quot;Dog is fetching the ball&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 错误的向下转型，会导致 ClassCastException</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="keyword">if</span> (animal3 <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal3; <span class="comment">// ClassCastException: Animal cannot be cast to Dog</span></span><br><span class="line">            dog.fetch();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;animal3 is not a Dog&quot;</span>); <span class="comment">// 输出 &quot;animal3 is not a Dog&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>类型转换是 Java 中一种常见的操作，用于将一个数据类型的值转换为另一个数据类型的值。  理解隐式类型转换和显式类型转换的区别，以及类型转换可能带来的风险，对于编写正确的 Java 代码至关重要。  在进行类型转换时，务必注意数据溢出、精度丢失和类型兼容性等问题。<br><strong>api文档</strong><br><a href="https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>好的，以下是关于 Java 输入输出 (I&#x2F;O) 的完整内容：</p><p><strong>什么是输入输出 (I&#x2F;O)?</strong></p><p>输入输出 (I&#x2F;O) 是指计算机系统与外部世界（例如用户、文件、网络等）之间进行数据交换的过程。 在 Java 中，I&#x2F;O 操作是通过各种类和接口来实现的，这些类和接口位于 <code>java.io</code> 包中。</p><p><strong>Java I&#x2F;O 的分类：</strong></p><p>Java I&#x2F;O 可以分为以下几类：</p><ol><li><p><strong>按数据流方向：</strong></p><ul><li><strong>输入流（Input Stream）：</strong> 从外部源（例如文件、网络连接）读取数据到程序中。</li><li><strong>输出流（Output Stream）：</strong> 将数据从程序写入到外部目标（例如文件、网络连接）。</li></ul></li><li><p><strong>按数据类型：</strong></p><ul><li><strong>字节流（Byte Stream）：</strong> 以字节为单位处理数据，适用于处理二进制数据（例如图像、音频、视频）或任何类型的数据。<ul><li><code>InputStream</code>：所有字节输入流的基类。</li><li><code>OutputStream</code>：所有字节输出流的基类。</li></ul></li><li><strong>字符流（Character Stream）：</strong> 以字符为单位处理数据，适用于处理文本数据。 字符流会自动处理字符编码的转换。<ul><li><code>Reader</code>：所有字符输入流的基类。</li><li><code>Writer</code>：所有字符输出流的基类。</li></ul></li></ul></li><li><p><strong>按功能：</strong></p><ul><li><strong>节点流（Node Stream）：</strong> 直接与数据源或目标连接的流，例如 <code>FileInputStream</code>、<code>FileOutputStream</code>、<code>FileReader</code>、<code>FileWriter</code>。</li><li><strong>处理流（Processing Stream）：</strong> 包装在节点流之上，提供额外的功能，例如缓冲、数据转换等，例如 <code>BufferedInputStream</code>、<code>BufferedOutputStream</code>、<code>BufferedReader</code>、<code>BufferedWriter</code>。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">import java.io.*;</span><br><span class="line">public class NodeStreamExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 从文件读取数据</span><br><span class="line">            FileInputStream fis = new FileInputStream(&quot;input.txt&quot;);</span><br><span class="line">            int data;</span><br><span class="line">            while ((data = fis.read()) != -1) &#123;</span><br><span class="line">                System.out.print((char) data); // 将字节转换为字符并打印</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line"></span><br><span class="line">            // 向文件写入数据</span><br><span class="line">            FileOutputStream fos = new FileOutputStream(&quot;output.txt&quot;);</span><br><span class="line">            String message = &quot;Hello, Node Stream!&quot;;</span><br><span class="line">            byte[] bytes = message.getBytes();</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">            fos.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">         catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>常用的 Java I&#x2F;O 类：</strong></p><p><strong>1. 字节流：</strong></p><ul><li><strong>InputStream：</strong><ul><li><code>FileInputStream</code>：从文件中读取字节。</li><li><code>ByteArrayInputStream</code>：从字节数组中读取字节。</li><li><code>ObjectInputStream</code>：从输入流中读取对象。</li><li><code>BufferedInputStream</code>：提供缓冲功能的输入流，提高读取效率。</li></ul></li><li><strong>OutputStream：</strong><ul><li><code>FileOutputStream</code>：将字节写入到文件中。</li><li><code>ByteArrayOutputStream</code>：将字节写入到字节数组中。</li><li><code>ObjectOutputStream</code>：将对象写入到输出流中。</li><li><code>BufferedOutputStream</code>：提供缓冲功能的输出流，提高写入效率。</li></ul></li></ul><p><strong>2. 字符流：</strong></p><ul><li><strong>Reader：</strong><ul><li><code>FileReader</code>：从文件中读取字符。</li><li><code>CharArrayReader</code>：从字符数组中读取字符。</li><li><code>BufferedReader</code>：提供缓冲功能的字符输入流，提高读取效率，并提供 <code>readLine()</code> 方法用于读取一行文本。</li><li><code>InputStreamReader</code>：将字节输入流转换为字符输入流，可以指定字符编码。</li></ul></li><li><strong>Writer：</strong><ul><li><code>FileWriter</code>：将字符写入到文件中。</li><li><code>CharArrayWriter</code>：将字符写入到字符数组中。</li><li><code>BufferedWriter</code>：提供缓冲功能的字符输出流，提高写入效率，并提供 <code>newLine()</code> 方法用于写入一个换行符。</li><li><code>OutputStreamWriter</code>：将字符输出流转换为字节输出流，可以指定字符编码。</li></ul></li></ul><p><strong>3. 控制台 I&#x2F;O：</strong></p><ul><li><code>System.in</code>：标准输入流，通常连接到键盘。</li><li><code>System.out</code>：标准输出流，通常连接到控制台。</li><li><code>System.err</code>：标准错误流，通常连接到控制台。</li></ul><p><strong>Java I&#x2F;O 的使用步骤：</strong></p><ol><li><strong>创建流对象：</strong> 根据需要选择合适的流类，并创建流对象。</li><li><strong>打开流：</strong> 对于文件流，需要指定文件路径，打开与文件的连接。</li><li><strong>进行 I&#x2F;O 操作：</strong> 使用流对象的方法读取或写入数据。</li><li><strong>关闭流：</strong> 完成 I&#x2F;O 操作后，必须关闭流，释放资源。</li></ol><p><strong>示例：从文件中读取文本：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader; <span class="comment">// 导入 BufferedReader 类，用于高效读取文本文件</span></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;   <span class="comment">// 导入 FileReader 类，用于读取文件</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  <span class="comment">// 导入 IOException 类，用于处理输入输出异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadFileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 声明 BufferedReader 对象，初始化为 null，用于读取文件内容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试打开文件并读取内容</span></span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>)); <span class="comment">// 创建 BufferedReader 对象，关联到文件 &quot;example.txt&quot;</span></span><br><span class="line">            String line; <span class="comment">// 声明字符串变量 line，用于存储读取的每一行内容</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环读取文件的每一行，直到文件末尾</span></span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123; <span class="comment">// 使用 readLine() 方法读取一行内容，如果读取到文件末尾，则返回 null</span></span><br><span class="line">                System.out.println(line); <span class="comment">// 将读取到的每一行内容输出到控制台</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 捕获 IOException 异常，例如文件不存在、权限不足等</span></span><br><span class="line">            e.printStackTrace(); <span class="comment">// 打印异常堆栈信息，方便调试</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// finally 块中的代码无论是否发生异常都会执行，用于关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 尝试关闭 BufferedReader 对象</span></span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123; <span class="comment">// 确保 reader 对象不为 null，避免空指针异常</span></span><br><span class="line">                    reader.close(); <span class="comment">// 关闭 BufferedReader 对象，释放资源</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 捕获关闭 BufferedReader 对象时可能发生的 IOException 异常</span></span><br><span class="line">                e.printStackTrace(); <span class="comment">// 打印异常堆栈信息，方便调试</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**示例：将文本写入到文件中：**</span><br><span class="line">```java</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteFileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个 BufferedWriter 对象，用于写入文件</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 BufferedWriter 对象，并关联到文件 &quot;output.txt&quot;</span></span><br><span class="line">            <span class="comment">// FileWriter 用于将字符写入文件</span></span><br><span class="line">            <span class="comment">// BufferedWriter 提供了缓冲功能，可以提高写入效率</span></span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将字符串 &quot;Hello, World!&quot; 写入文件</span></span><br><span class="line">            writer.write(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入一个换行符，确保下一行内容另起一行</span></span><br><span class="line">            writer.newLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将字符串 &quot;This is a new line.&quot; 写入文件</span></span><br><span class="line">            writer.write(<span class="string">&quot;This is a new line.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 捕获可能发生的 IOException 异常，例如文件不存在、权限不足等</span></span><br><span class="line">            <span class="comment">// 打印异常堆栈信息，方便调试</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// finally 块中的代码无论是否发生异常都会执行</span></span><br><span class="line">            <span class="comment">// 用于确保资源被正确释放，例如关闭文件流</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检查 writer 对象是否为空，避免空指针异常</span></span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 关闭 BufferedWriter 对象，释放资源</span></span><br><span class="line">                    <span class="comment">// 关闭流之前，缓冲区中的数据会被刷新到文件中</span></span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 捕获关闭流时可能发生的 IOException 异常</span></span><br><span class="line">                <span class="comment">// 打印异常堆栈信息，方便调试</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**示例：使用控制台 I/O：**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class ConsoleIOExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;Enter your name: &quot;);</span><br><span class="line">        String name = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;Enter your age: &quot;);</span><br><span class="line">        int age = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Hello, &quot; + name + &quot;! You are &quot; + age + &quot; years old.&quot;);</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java I&#x2F;O 的注意事项：</strong></p><ol><li><p><strong>必须关闭流：</strong> 在完成 I&#x2F;O 操作后，必须关闭流，释放资源。 可以使用 <code>try-finally</code> 块或 <code>try-with-resources</code> 语句来确保流被正确关闭。</p></li><li><p><strong>处理 IOException 异常：</strong> I&#x2F;O 操作可能会抛出 <code>IOException</code> 异常，必须进行处理。</p></li><li><p><strong>选择合适的流：</strong> 根据需要选择合适的流类，例如字节流或字符流，节点流或处理流。</p></li><li><p><strong>使用缓冲流：</strong> 使用缓冲流可以提高 I&#x2F;O 效率。</p></li><li><p><strong>指定字符编码：</strong> 在处理文本数据时，应该指定字符编码，以避免乱码问题。</p></li><li><p><strong>使用 <code>try-with-resources</code> 语句：</strong>  <code>try-with-resources</code> 语句可以自动关闭流，简化代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结：</strong></p><p>Java I&#x2F;O 是 Java 编程中不可或缺的一部分，用于实现程序与外部世界的数据交换。 掌握 Java I&#x2F;O 的基本概念、常用类和使用步骤，对于编写高效、可靠的 Java 程序至关重要。 在进行 I&#x2F;O 操作时，务必注意资源管理、异常处理和字符编码等问题。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的运算符用于执行各种操作，例如算术运算、比较、逻辑运算、赋值等。  以下是 Java 中常见的运算符类型：</p><p><strong>1. 算术运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>a + b</code></td></tr><tr><td>-</td><td>减法</td><td><code>a - b</code></td></tr><tr><td>*</td><td>乘法</td><td><code>a * b</code></td></tr><tr><td>&#x2F;</td><td>除法</td><td><code>a / b</code></td></tr><tr><td>%</td><td>取模（求余数）</td><td><code>a % b</code></td></tr><tr><td>++</td><td>自增（前缀&#x2F;后缀）</td><td><code>++a</code> &#x2F; <code>a++</code></td></tr><tr><td>–</td><td>自减（前缀&#x2F;后缀）</td><td><code>--a</code> &#x2F; <code>a--</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>整数除法会舍去小数部分。  例如，<code>5 / 2</code> 的结果是 <code>2</code>。</li><li>取模运算符 <code>%</code> 用于计算除法的余数。  例如，<code>5 % 2</code> 的结果是 <code>1</code>。</li><li>自增和自减运算符可以放在变量前面（前缀）或后面（后缀）。  前缀形式会先改变变量的值，然后返回改变后的值。  后缀形式会先返回变量的值，然后改变变量的值。</li></ul></li></ul><p><strong>2. 关系运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>返回值</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td><td><code>a == b</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td>!&#x3D;</td><td>不等于</td><td><code>a != b</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td>&gt;</td><td>大于</td><td><code>a &gt; b</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td>&lt;</td><td>小于</td><td><code>a &lt; b</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td><code>a &gt;= b</code></td><td><code>true</code> 或 <code>false</code></td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td><code>a &lt;= b</code></td><td><code>true</code> 或 <code>false</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>关系运算符用于比较两个值之间的关系。</li><li>关系运算符的返回值是布尔类型 (<code>true</code> 或 <code>false</code>)。</li></ul></li></ul><p><strong>3. 逻辑运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td><code>a &amp;&amp; b</code></td></tr><tr><td>||</td><td>逻辑或</td><td><code>a || b</code></td></tr><tr><td>!</td><td>逻辑非</td><td><code>!a</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>逻辑运算符用于组合或修改布尔表达式。</li><li>逻辑与 <code>&amp;&amp;</code>：当且仅当两个操作数都为 <code>true</code> 时，结果才为 <code>true</code>。</li><li>逻辑或 <code>||</code>：当且仅当两个操作数都为 <code>false</code> 时，结果才为 <code>false</code>。</li><li>逻辑非 <code>!</code>：用于反转操作数的布尔值。</li></ul></li></ul><p><strong>4. 位运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td><code>a &amp; b</code></td></tr><tr><td>|</td><td>按位或</td><td><code>a | b</code></td></tr><tr><td>^</td><td>按位异或</td><td><code>a ^ b</code></td></tr><tr><td>~</td><td>按位取反</td><td><code>~a</code></td></tr><tr><td>&lt;&lt;</td><td>左移</td><td><code>a &lt;&lt; b</code></td></tr><tr><td>&gt;&gt;</td><td>右移</td><td><code>a &gt;&gt; b</code></td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td><code>a &gt;&gt;&gt; b</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>位运算符用于对整数类型的二进制位进行操作。</li><li>左移 <code>&lt;&lt;</code>：将操作数的二进制位向左移动指定的位数，右边空出的位用 0 填充。</li><li>右移 <code>&gt;&gt;</code>：将操作数的二进制位向右移动指定的位数，左边空出的位用符号位填充（如果操作数是正数，则用 0 填充；如果操作数是负数，则用 1 填充）。</li><li>无符号右移 <code>&gt;&gt;&gt;</code>：将操作数的二进制位向右移动指定的位数，左边空出的位用 0 填充。</li></ul></li></ul><p><strong>5. 赋值运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td><code>a = b</code></td></tr><tr><td>+&#x3D;</td><td>加法赋值</td><td><code>a += b</code></td></tr><tr><td>-&#x3D;</td><td>减法赋值</td><td><code>a -= b</code></td></tr><tr><td>*&#x3D;</td><td>乘法赋值</td><td><code>a *= b</code></td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值</td><td><code>a /= b</code></td></tr><tr><td>%&#x3D;</td><td>取模赋值</td><td><code>a %= b</code></td></tr><tr><td>&amp;&#x3D;</td><td>按位与赋值</td><td><code>a &amp;= b</code></td></tr><tr><td>|&#x3D;</td><td>按位或赋值</td><td><code>a |= b</code></td></tr><tr><td>^&#x3D;</td><td>按位异或赋值</td><td><code>a ^= b</code></td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移赋值</td><td><code>a &lt;&lt;= b</code></td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移赋值</td><td><code>a &gt;&gt;= b</code></td></tr><tr><td>&gt;&gt;&gt;&#x3D;</td><td>无符号右移赋值</td><td><code>a &gt;&gt;&gt;= b</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>赋值运算符用于将一个值赋给一个变量。</li><li>复合赋值运算符 (例如 <code>+=</code>, <code>-=</code>, <code>*=</code>) 是一种简写形式，例如 <code>a += b</code> 等价于 <code>a = a + b</code>。</li></ul></li></ul><p><strong>6. 三元运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>?:</td><td>三元条件运算符</td><td><code>condition ? value1 : value2</code></td></tr></tbody></table><ul><li><strong>注意：</strong><ul><li>三元运算符是一种简洁的条件表达式。</li><li>如果 <code>condition</code> 为 <code>true</code>，则返回 <code>value1</code>；否则，返回 <code>value2</code>。</li></ul></li></ul><p><strong>7. 其他运算符：</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>.</td><td>成员访问运算符</td><td><code>object.member</code></td></tr><tr><td>[]</td><td>数组索引运算符</td><td><code>array[index]</code></td></tr><tr><td>()</td><td>方法调用运算符</td><td><code>method()</code></td></tr><tr><td>new</td><td>对象创建运算符</td><td><code>new Class()</code></td></tr><tr><td>instanceof</td><td>类型检查运算符</td><td><code>object instanceof Class</code></td></tr></tbody></table><p><strong>运算符优先级：</strong></p><p>运算符优先级决定了表达式中运算符的执行顺序。  可以使用括号 <code>()</code> 来改变运算符的优先级。  以下是 Java 中运算符的优先级（从高到低）：</p><ol><li><code>()</code></li><li><code>++</code>, <code>--</code> (后缀)</li><li><code>!</code>, <code>+</code>, <code>-</code>, <code>~</code>, <code>++</code>, <code>--</code> (前缀)</li><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code></li><li><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></li><li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>instanceof</code></li><li><code>==</code>, <code>!=</code></li><li><code>&amp;</code></li><li><code>^</code></li><li><code>|</code></li><li><code>&amp;&amp;</code></li><li><code>||</code></li><li><code>?:</code></li><li><code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code></li></ol><p>希望以上信息能够帮助你理解 Java 中的运算符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;Java 中的注释主要有三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单行注释&lt;/strong&gt;：使用 &lt;code&gt;//&lt;/c</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第一章：Java入门</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJava%E5%85%A5%E9%97%A8/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJava%E5%85%A5%E9%97%A8/</id>
    <published>2025-05-12T03:21:08.000Z</published>
    <updated>2025-05-12T03:23:15.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><hr><h3 id="步骤-1：安装和配置开发环境"><a href="#步骤-1：安装和配置开发环境" class="headerlink" title="步骤 1：安装和配置开发环境"></a><strong>步骤 1：安装和配置开发环境</strong></h3><ol><li><p><strong>下载并安装JDK（Java Development Kit）</strong>：</p><ul><li><p>JDK 是 Java 开发的核心工具包，包含了编译器（javac）、运行时环境（JRE）和其他工具。<img src="https://i.imgur.com/HpmE69n.png"></p></li><li><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle官网</a> 或 <a href="https://openjdk.org/">OpenJDK</a>。</p></li><li><p>安装完成后，检查是否成功安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kJXdppu.png"><br><img src="https://i.imgur.com/IEoX5f9.png"><br>通过网盘分享的文件：7、重生之我用AI学Java<br>链接: <a href="https://pan.baidu.com/s/1ZENcAEPtcBKuAr9qnsWgIQ">https://pan.baidu.com/s/1ZENcAEPtcBKuAr9qnsWgIQ</a> 提取码: llxx<br>–来自百度网盘超级会员v3的分享<br><img src="https://i.imgur.com/YG1ao0r.png"><br><img src="https://i.imgur.com/MDQxv35.png"></p></li></ul></li><li><p><strong>配置环境变量</strong>：</p><ul><li>将 JDK 的 <code>bin</code> 目录路径添加到系统的 <code>PATH</code> 环境变量中。</li><li>配置完成后，可以在命令行中直接使用 <code>java</code> 和 <code>javac</code> 命令。<br><img src="https://i.imgur.com/Gm8NtQx.png"><br><img src="https://i.imgur.com/MgAoMsU.png"><br><img src="https://i.imgur.com/Nk89dRR.png"><br><img src="https://i.imgur.com/jofyAL7.png"><br>javac：编译工具<br>java：执行程序</li></ul></li></ol><ul><li><strong>JVM（Java Virtual Machine）</strong>：即 Java 虚拟机，是真正运行 Java 程序的地方 。</li><li><strong>核心类库</strong>：是 Java 已编写好，供程序员在自己程序中调用的程序 。</li><li><strong>JRE（Java Runtime Environment）</strong>：Java 的运行环境，由 JVM 和核心类库组成 。</li><li><strong>JDK（Java Development Kit）</strong>：Java 开发工具包，包含 JRE 以及开发工具（如 Java、Javac 等 ）。<br><img src="https://i.imgur.com/JPkyjrQ.png"><br><img src="https://i.imgur.com/GhW0WU1.png"><br>便于维护</li></ul><ol><li><strong>选择开发工具</strong>（可选）：<ul><li>初学者可以选择轻量级的文本编辑器（如 Notepad++、VS Code）。</li><li>如果想更高效地开发，可以使用集成开发环境（IDE），例如 IntelliJ IDEA、Eclipse 或 NetBeans。</li></ul></li></ol><hr><h3 id="步骤-2：编写代码"><a href="#步骤-2：编写代码" class="headerlink" title="步骤 2：编写代码"></a><strong>步骤 2：编写代码</strong></h3><ol><li><strong>创建一个 Java 文件</strong>：<ul><li>每个 Java 程序都必须保存在一个 <code>.java</code> 文件中。</li><li>文件名必须与类名一致（区分大小写）。<br><img src="https://i.imgur.com/s27Egyx.png"><br><img src="https://i.imgur.com/yrNMX50.png"><br>加回车<br><img src="https://i.imgur.com/YUucSbm.png"><br>写一半按tab补充<br>成功了</li></ul></li><li><strong>编写代码</strong>：<ul><li>以下是一个简单的 “Hello, World!” 程序：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>代码解析</strong>：<ul><li><code>public class HelloWorld</code>：定义了一个名为 <code>HelloWorld</code> 的公共类。</li><li><code>public static void main(String[] args)</code>：这是程序的入口点，所有 Java 程序从这里开始执行。</li><li><code>System.out.println(&quot;Hello, World!&quot;);</code>：打印一条消息到控制台。</li></ul></li></ul></li></ol><hr><h3 id="步骤-3：编译代码"><a href="#步骤-3：编译代码" class="headerlink" title="步骤 3：编译代码"></a><strong>步骤 3：编译代码</strong></h3><ol><li>打开命令行（Windows 的 CMD 或 macOS&#x2F;Linux 的 Terminal）。</li><li>导航到保存 <code>.java</code> 文件的目录。例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\YourName\JavaProjects</span><br></pre></td></tr></table></figure></li><li>使用 <code>javac</code> 命令编译代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><ul><li>编译成功后，会生成一个同名的 <code>.class</code> 文件（字节码文件），例如 <code>HelloWorld.class</code>。</li></ul></li></ol><p><img src="https://i.imgur.com/sxnyvtR.png"><br>编译完成<br><img src="https://i.imgur.com/cGTySrO.png"></p><hr><ul><li><strong>编译过程</strong>：Java 程序通过 <code>javac</code> 编译成 Class 文件。</li><li><strong>跨平台特性</strong>：实现 “一次编译，处处可用”。<ul><li>Class 文件可在不同操作系统对应的 JVM 虚拟机上运行，如 Windows 版 JVM 虚拟机、Linux 版 JVM 虚拟机、MacOS 版 JVM 虚拟机。</li></ul></li></ul><h3 id="步骤-4：运行程序"><a href="#步骤-4：运行程序" class="headerlink" title="步骤 4：运行程序"></a><strong>步骤 4：运行程序</strong></h3><ol><li>使用 <code>java</code> 命令运行程序：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure></li><li>输出结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></li></ol><hr><p>运行代码<br><img src="https://i.imgur.com/Z4HoAD7.png"></p><h3 id="步骤-5：调试与改进"><a href="#步骤-5：调试与改进" class="headerlink" title="步骤 5：调试与改进"></a><strong>步骤 5：调试与改进</strong></h3><ol><li><p><strong>检查错误</strong>：</p><ul><li>如果编译或运行时出现错误，请仔细阅读错误信息，通常它会告诉你问题所在。</li><li>常见问题包括拼写错误、缺少分号、文件名与类名不匹配等。</li></ul></li><li><p><strong>改进代码</strong>：</p><ul><li>在熟悉基本语法后，可以尝试修改程序，比如让用户输入名字并打印个性化的问候语：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的名字: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;你好, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="总结：开发入门程序的完整流程"><a href="#总结：开发入门程序的完整流程" class="headerlink" title="总结：开发入门程序的完整流程"></a><strong>总结：开发入门程序的完整流程</strong></h3><ol><li><strong>安装 JDK 并配置环境变量</strong>。</li><li><strong>编写 Java 源代码</strong>（保存为 <code>.java</code> 文件）。</li><li><strong>使用 <code>javac</code> 编译代码</strong>，生成 <code>.class</code> 文件。</li><li><strong>使用 <code>java</code> 运行程序</strong>。</li><li><strong>调试并改进代码</strong>。</li></ol><h2 id="1-2-IDE工具"><a href="#1-2-IDE工具" class="headerlink" title="1.2 IDE工具"></a>1.2 IDE工具</h2><h3 id="企业常用-Java-开发工具（IDE-）"><a href="#企业常用-Java-开发工具（IDE-）" class="headerlink" title="企业常用 Java 开发工具（IDE ）"></a>企业常用 Java 开发工具（IDE ）</h3><ul><li><strong>定义</strong>：集成了 JDK、代码编写窗、编译、执行等多种功能的开发工具。</li><li><strong>常用工具</strong><ul><li><strong>IntelliJ IDEA</strong>：由 JetBrains 开发，代码智能提示、分析、重构功能强，对 Maven、Git 等集成好。有社区版（免费 ）和终极版（付费 ），受专业开发者青睐。</li><li><strong>Eclipse</strong>：开源，适合 Java 开发，生态系统庞大，插件丰富可定制。启动速度和内存占用受诟病，但仍被众多企业和个人选用。</li><li><strong>Apache NetBeans</strong>：开源免费，提供全面开发环境，适合各层次开发者，对 Java EE 和 Web 应用支持佳，界面友好易上手。</li><li><strong>Visual Studio Code（配合 Java 插件 ）</strong>：本身是轻量级编辑器，安装 Java Development Pack 等扩展后，可成为功能强大的 Java 开发环境，受喜欢轻巧编辑器的开发者欢迎。<br>  <img src="https://i.imgur.com/4fBeU9Y.png"></li></ul></li></ul><h3 id="IDEA的下载与安装"><a href="#IDEA的下载与安装" class="headerlink" title="IDEA的下载与安装"></a>IDEA的下载与安装</h3><p><a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a><br><img src="https://i.imgur.com/N6o03bo.png"><br>破解完成的IDEA<br><img src="https://i.imgur.com/q8jF84e.png"></p><h3 id="Java项目结构概念"><a href="#Java项目结构概念" class="headerlink" title="Java项目结构概念"></a>Java项目结构概念</h3><ul><li><strong>Project（工程 ）</strong>：Java开发中最大的组织单元，是一个完整的软件项目集合，包含代码、配置文件等所有相关资源 。</li><li><strong>Module（模块 ）</strong>：工程的子单元，可将大型工程按功能或业务逻辑拆分为多个模块，便于管理和维护，模块可独立开发、测试和部署 。 </li><li><strong>Package（包 ）</strong>：用于组织类和接口，避免命名冲突，控制访问权限。类似文件夹结构，对相关类进行分组管理 。 </li><li><strong>Class（类 ）</strong>：Java基本编程单元，封装数据和方法，实现具体功能，是面向对象编程核心概念 。</li></ul><h4 id="以淘宝系统为例理解Java项目结构"><a href="#以淘宝系统为例理解Java项目结构" class="headerlink" title="以淘宝系统为例理解Java项目结构"></a>以淘宝系统为例理解Java项目结构</h4><ul><li><strong>Project（工程 ）</strong>：淘宝系统整体可看作一个工程，是整个项目的集合，涵盖所有相关代码、资源等。</li><li><strong>Module（模块 ）</strong><ul><li><strong>首页模块</strong>：负责淘宝首页相关功能展示与交互，包含多个包和类，如 <code>package包1</code> 下的 <code>class类1</code>、<code>class类2</code> 等 。</li><li><strong>购物车模块</strong>：处理购物车相关操作，有 <code>package包1</code>、<code>package包2</code>、<code>package包3</code> 等不同包，每个包下又有多个类，如 <code>class类1</code>、<code>class类2</code> 等 。</li><li><strong>订单模块</strong>：管理订单相关业务逻辑，包含 <code>package包1</code> 等包及其下的类，如 <code>class类1</code>、<code>class类2</code> 等 。</li></ul></li><li><strong>Package（包 ）</strong>：用于组织模块内的类，避免命名冲突，控制访问权限，如各模块内不同功能相关的类分别放在不同包中。 </li><li><strong>Class（类 ）</strong>：实现具体功能，如首页展示逻辑、购物车操作逻辑、订单处理逻辑等，都由具体类来完成 。<br><img src="https://i.imgur.com/nNYFaNO.png"><br>建立工程<br><img src="https://i.imgur.com/Gvc9EtP.png"><br>建立模块<br><img src="https://i.imgur.com/kat7GUK.png"><br>建包<br><img src="https://i.imgur.com/uWAoLVZ.png"><br>新建类写程序<br><img src="https://i.imgur.com/wtkksg4.png"><br>[[JavaWeb&#x2F;Java&#x2F;Complement 1|Complement 1]]<br><img src="https://i.imgur.com/VMKBuPn.png"></li></ul><p>成功<br><img src="https://i.imgur.com/QQgxcpW.png"><br>看到class文件<br><img src="https://i.imgur.com/QrZRWNF.png"></p><h2 id="1-3-IDEA安装AI编程插件（插件）"><a href="#1-3-IDEA安装AI编程插件（插件）" class="headerlink" title="1.3 IDEA安装AI编程插件（插件）"></a>1.3 IDEA安装AI编程插件（插件）</h2><h3 id="IDEA安装AI插件"><a href="#IDEA安装AI插件" class="headerlink" title="IDEA安装AI插件"></a>IDEA安装AI插件</h3><ul><li><strong>IDEA之前编程方式</strong>：程序编码需程序员自行思考、逐行编写。</li><li><strong>AI出现后的变化</strong>：IDEA可集成多种辅助编程的AI插件。<ul><li><strong>Github Copilot</strong>：能依据上下文智能生成代码 。</li><li><strong>阿里巴巴 通义灵码</strong>：助力代码编写、检查等开发环节 。 </li><li><strong>科大讯飞 星斗AI</strong>：为编程提供智能化支持 。</li></ul></li></ul><ul><li>进入设置<br><img src="https://i.imgur.com/XmzGjwg.png"><br><img src="https://i.imgur.com/UZjLKT3.png"><br><img src="https://i.imgur.com/HistUBt.png"><br>等待下载安装<br><img src="https://i.imgur.com/R4H9WOI.png"><br>安装完毕<br><img src="https://i.imgur.com/toa7sGD.png"></li><li>登录结束<br><img src="https://i.imgur.com/oYloIsY.png"></li><li>试运行<br><img src="https://i.imgur.com/jyFOAtn.png"></li><li>功能<br><img src="https://i.imgur.com/3j6j0qj.png"></li></ul><h3 id="IDEA字体、背景之类的设置"><a href="#IDEA字体、背景之类的设置" class="headerlink" title="IDEA字体、背景之类的设置"></a>IDEA字体、背景之类的设置</h3><p><img src="https://i.imgur.com/GlWgGa4.png"><br>背景<br><img src="https://i.imgur.com/Nh1LptV.png"><br>字体<br><img src="https://i.imgur.com/WfrQyWh.png"><br><img src="https://i.imgur.com/cMYtTRH.png"><br>调色<br><img src="https://i.imgur.com/gbgpZi9.png"></p><table><thead><tr><th>快捷键组合</th><th>功能描述</th></tr></thead><tbody><tr><td><code>psvm</code> + <code>Tab</code> 或 <code>Enter</code></td><td>快速生成 <code>public static void main</code> 方法</td></tr><tr><td><code>sout</code> + <code>Tab</code> 或 <code>Enter</code></td><td>快速生成 <code>System.out.println()</code> 语句</td></tr><tr><td><code>Ctrl + D</code></td><td>复制当前行到下一行</td></tr><tr><td><code>Ctrl + Y</code></td><td>删除当前行</td></tr><tr><td><code>Ctrl + X</code></td><td>剪切当前行</td></tr><tr><td><code>Ctrl + Alt + L</code></td><td>格式化代码</td></tr><tr><td><code>Alt + Shift + ↑ / ↓</code></td><td>上下移动当前行</td></tr><tr><td><code>Ctrl + /</code></td><td>添加或取消单行注释</td></tr><tr><td><code>Ctrl + Shift + /</code></td><td>添加或取消多行注释</td></tr><tr><td><img src="https://i.imgur.com/xZpqw8s.png"></td><td></td></tr></tbody></table><h2 id="1-4-IDEA的其他操作"><a href="#1-4-IDEA的其他操作" class="headerlink" title="1.4 IDEA的其他操作"></a>1.4 IDEA的其他操作</h2><h3 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h3><p>打开别人的工程<br>直接把别人的工程打开，然后点击信任，新窗口打开就成功了。</p><h3 id="关闭工程"><a href="#关闭工程" class="headerlink" title="关闭工程"></a>关闭工程</h3><p>直接关闭窗口</p><h3 id="删除类文件"><a href="#删除类文件" class="headerlink" title="删除类文件"></a>删除类文件</h3><p>直接右键选择删除<br><img src="https://i.imgur.com/DFyUH5k.png"></p><h3 id="修改类名称"><a href="#修改类名称" class="headerlink" title="修改类名称"></a>修改类名称</h3><p>直接右键选择修改名称<br><img src="https://i.imgur.com/Vuay4kf.png"></p><h3 id="修改模块"><a href="#修改模块" class="headerlink" title="修改模块"></a>修改模块</h3><p><img src="https://i.imgur.com/1CMxc18.png"></p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><ul><li>直接复制过后导入的不能直接使用</li><li>我们需要进来选择已有的资源进行导入</li><li><img src="https://i.imgur.com/vfkr23f.png"><br>其他的方法不可以实现，现在还没有分配合适的JDK给它用<br><img src="https://i.imgur.com/DsRzFzq.png"></li></ul><h3 id="删除模块"><a href="#删除模块" class="headerlink" title="删除模块"></a>删除模块</h3><p><img src="https://i.imgur.com/Wp7dpXp.png"><br>先解除连接，再进行Delete。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1-安装&quot;&gt;&lt;a href=&quot;#1-1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装&quot;&gt;&lt;/a&gt;1.1 安装&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;步骤-1：安装和配置开发环境&quot;&gt;&lt;a href=&quot;#步骤-1：安装和配置开发环境&quot; cl</summary>
      
    
    
    
    
    <category term="Java" scheme="https://nagoriyuki0408.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第六章 事务</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/%E4%BA%8B%E5%8A%A1/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/%E4%BA%8B%E5%8A%A1/</id>
    <published>2025-05-11T01:05:57.000Z</published>
    <updated>2025-05-11T01:10:22.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h2><h3 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h3><ul><li><strong>定义</strong>：事务是一组操作的集合，是不可分割的工作单位。这些操作会作为一个整体向系统提交或撤销，即要么全部成功，要么全部失败 。</li></ul><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><ul><li><strong>场景</strong>：以转账为例，假设存在账户信息表（有 <code>id</code>、<code>name</code>、<code>money</code> 字段 ） ，其中张三 <code>id</code> 为1，余额 <code>money</code> 为2000；李四 <code>id</code> 为2，余额 <code>money</code> 为2000 。当进行张三给李四转账1000操作时，涉及张三账户余额减少、李四账户余额增加等操作，这些操作需纳入一个事务。若其中某一步出错，比如张三余额减少后系统故障，事务会回滚，保证数据一致性，避免张三钱少了而李四钱没增加的情况。 可通过“查询张三账户余额”等操作来验证事务执行结果。<br>这个错误叫做抛错误<br><img src="https://i.imgur.com/MJntGAJ.png"><br><img src="https://i.imgur.com/LZ6rVGR.png"></li></ul><h2 id="事务的基本操作"><a href="#事务的基本操作" class="headerlink" title="事务的基本操作"></a>事务的基本操作</h2><p><img src="https://i.imgur.com/z78c1Ug.png"><br><img src="https://i.imgur.com/nIr97MW.png"><br><img src="https://i.imgur.com/A3Jv4ox.png"><br>手动提交<br><img src="https://i.imgur.com/fpk2t0r.png"><br>事务操作<br><img src="https://i.imgur.com/V9gBroh.png"><br>回滚事务<br><img src="https://i.imgur.com/KUny1v3.png"><br><img src="https://i.imgur.com/R88cb3V.png"></p><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><h3 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h3><ol><li><strong>原子性（Atomicity）</strong><ul><li><strong>定义</strong>：事务是不可分割的最小操作单元，事务中的操作要么全部成功执行，要么全部失败回滚 。比如银行转账，从一个账户扣款和向另一个账户存款必须同时成功或同时失败，不能只执行其中一个操作。</li></ul></li><li><strong>一致性（Consistency）</strong><ul><li><strong>定义</strong>：事务执行完成后，数据库中所有数据都要保持一致状态。例如转账前后，参与转账的两个账户总金额应保持不变 。</li></ul></li><li><strong>隔离性（Isolation）</strong><ul><li><strong>定义</strong>：数据库通过隔离机制，确保事务在不受外部并发操作干扰的独立环境下运行。避免多个事务并发执行时，一个事务的执行结果被其他事务干扰 。</li></ul></li><li><strong>持久性（Durability）</strong><ul><li><strong>定义</strong>：事务一旦提交或回滚，对数据库中数据所做的更改将永久保存。提交后，数据变更会持久化存储；回滚后，数据恢复到事务开始前的状态 。<br> <img src="https://i.imgur.com/MSmXPlB.png"><br> <img src="https://i.imgur.com/9DTSJeW.png"></li></ul></li></ol><h2 id="并发事务引发的问题"><a href="#并发事务引发的问题" class="headerlink" title="并发事务引发的问题"></a>并发事务引发的问题</h2><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另外一个事务还没有提交的数据。</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的 数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”。</td></tr><tr><td><img src="https://i.imgur.com/ExeMqtH.png"></td><td></td></tr><tr><td><img src="https://i.imgur.com/f4GFojI.png"></td><td></td></tr><tr><td><img src="https://i.imgur.com/Fr8GEF9.png"></td><td></td></tr><tr><td>主键冲突</td><td></td></tr></tbody></table><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read (默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ol><li><strong>查看事务隔离级别</strong><br>使用SQL语句 <code>SELECT @@TRANSACTION_ISOLATION;</code> ，执行该语句可查询当前数据库的事务隔离级别设置。</li><li><strong>设置事务隔离级别</strong><br>语法为 <code>SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</code><br><img src="https://i.imgur.com/lo3vktm.png"><br><img src="https://i.imgur.com/XCB7xvr.png"><br><img src="https://i.imgur.com/XCJEBbd.png"></li></ol><p>脏读<br><img src="https://i.imgur.com/71hYMqr.png"><br>解决脏读<br><img src="https://i.imgur.com/2cH0qko.png"><br>解决不可重复读，但是会出现幻读问题<br><img src="https://i.imgur.com/sdC6EJq.png"><br>幻读<br><img src="https://i.imgur.com/YOnXpWk.png"><br>解决<br><img src="https://i.imgur.com/l0rWtJ9.png"><br><img src="https://i.imgur.com/7S2Lp0B.png"><br><img src="https://i.imgur.com/4aBXUEa.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事务简介&quot;&gt;&lt;a href=&quot;#事务简介&quot; class=&quot;headerlink&quot; title=&quot;事务简介&quot;&gt;&lt;/a&gt;事务简介&lt;/h2&gt;&lt;h3 id=&quot;事务概念&quot;&gt;&lt;a href=&quot;#事务概念&quot; class=&quot;headerlink&quot; title=&quot;事务概念&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第五章 多表查询</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</id>
    <published>2025-05-11T01:05:33.000Z</published>
    <updated>2025-05-11T01:10:31.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-1-数据库表结构关系-概述"><a href="#5-1-数据库表结构关系-概述" class="headerlink" title="5.1 数据库表结构关系 - 概述"></a>5.1 数据库表结构关系 - 概述</h2><p>在项目开发进行数据库表结构设计时，需依据业务需求及业务模块关系来分析设计。因业务相互关联，表结构间存在多种联系，主要有：</p><ul><li><strong>一对多（多对一）</strong>：一个表中的一条记录对应另一个表中的多条记录，反之，一个表中的多条记录对应另一个表中的一条记录 。</li><li><strong>多对多</strong>：两个表中的记录相互间存在多条对应关系。</li><li><strong>一对一</strong>：两个表中的记录一一对应 。</li></ul><h3 id="数据库表关系-：一对多（多对一）"><a href="#数据库表关系-：一对多（多对一）" class="headerlink" title="数据库表关系 ：一对多（多对一）"></a>数据库表关系 ：一对多（多对一）</h3><p><strong>案例</strong>：以部门与员工关系为例，一个部门存在多个员工，而一个员工只隶属于一个部门 。<br><strong>关系特点</strong>：一方（部门）可对应多方（员工），多方中的每一方（员工）仅对应一方（部门） 。<br><strong>实现方式</strong>：在 “多” 的一方（员工表）建立外键，该外键指向 “一” 的一方（部门表）的主键。这样就能通过外键关联，体现部门与员工间一对多（多对一）的关系 。<br><img src="https://i.imgur.com/S1OgrLI.png"></p><h3 id="数据库表关系-：多对多（多对多）"><a href="#数据库表关系-：多对多（多对多）" class="headerlink" title="数据库表关系 ：多对多（多对多）"></a>数据库表关系 ：多对多（多对多）</h3><p><strong>案例</strong>：学生与课程的关系，一个学生可选择多门课程，一门课程也能被多个学生选择。<br><strong>关系特点</strong>：双方中任意一方的一条记录，都能与另一方的多条记录关联。<br><strong>实现方式</strong>：创建第三张中间表，中间表至少设置两个外键，分别与学生表主键、课程表主键关联，以此体现多对多关系。</p><p><img src="https://i.imgur.com/YdCAfXZ.png"></p><p><img src="https://i.imgur.com/kgMhOAO.png"><br>中间表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建student_course表，用于体现学生与课程的多对多关系</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course(</span><br><span class="line">    <span class="comment">-- 定义id字段，类型为int，自动递增，设为主键，并添加注释“主键”</span></span><br><span class="line">    id <span class="type">int</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key, </span><br><span class="line">    <span class="comment">-- 定义studentid字段，类型为int，不允许为null，添加注释“学生ID”</span></span><br><span class="line">    studentid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生ID&#x27;</span>, </span><br><span class="line">    <span class="comment">-- 定义courseid字段，类型为int，不允许为null，添加注释“课程ID”</span></span><br><span class="line">    courseid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;课程ID&#x27;</span>, </span><br><span class="line">    <span class="comment">-- 定义外键fk_courseid，关联course表的id字段</span></span><br><span class="line">    <span class="keyword">constraint</span> fk_courseid <span class="keyword">foreign</span> key (courseid) <span class="keyword">references</span> course (id), </span><br><span class="line">    <span class="comment">-- 定义外键fk_studentid，关联student表的id字段</span></span><br><span class="line">    <span class="keyword">constraint</span> fk_studentid <span class="keyword">foreign</span> key (studentid) <span class="keyword">references</span> student (id) </span><br><span class="line">)comment <span class="string">&#x27;学生课程中间表&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student_course表插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span> </span><br><span class="line">(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="number">3</span>,<span class="number">4</span>); </span><br></pre></td></tr></table></figure><h3 id="数据库表关系-：一对一（一对一）"><a href="#数据库表关系-：一对一（一对一）" class="headerlink" title="数据库表关系 ：一对一（一对一）"></a>数据库表关系 ：一对一（一对一）</h3><p><strong>案例</strong>：以用户与用户详情关系为例。<br><strong>关系特点</strong>：表与表之间记录一一对应。常用于单表拆分场景，把一张表的基础字段置于一张表，其他详情字段放在另一张表，借此提升操作效率。<br><img src="https://i.imgur.com/fq3KwA5.png"><br><img src="https://i.imgur.com/7gI6fUD.png"></p><h2 id="5-2-数据库表结构关系-多表查询"><a href="#5-2-数据库表结构关系-多表查询" class="headerlink" title="5.2 数据库表结构关系 - 多表查询"></a>5.2 数据库表结构关系 - 多表查询</h2><p><img src="https://i.imgur.com/W7o5hNT.png"></p><h3 id="笛卡尔积："><a href="#笛卡尔积：" class="headerlink" title="笛卡尔积："></a>笛卡尔积：</h3><p><strong>定义</strong>：在数学里，笛卡尔积是两个集合（如 A 集合和 B 集合 ）所有元素的组合情况。<br><strong>在数据库中的应用</strong>：多表查询时会出现笛卡尔积现象，需消除无效的笛卡尔积，以获取正确、有效的查询结果。<br><img src="https://i.imgur.com/IrGrpKu.png"><br><img src="https://i.imgur.com/S3Ezk7S.png"></p><h3 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h3><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p><strong>定义</strong>：查询两张表交集部分。</p><p><strong>语法</strong></p><ul><li><p><strong>隐式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">WHERE</span> 条件...;</span><br></pre></td></tr></table></figure><p>通过在 <code>FROM</code> 子句中列出多个表，并用 <code>WHERE</code> 子句指定连接条件。</p></li><li><p><strong>显式内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件...;</span><br></pre></td></tr></table></figure><p>使用 <code>JOIN</code> 关键字明确表示连接操作，<code>ON</code> 关键字后指定连接条件，<code>INNER</code> 可省略 。<br><img src="https://i.imgur.com/6ClLq7q.png"><br>没公共部分，故少一个数据<img src="https://i.imgur.com/mVshc8J.png"></p></li></ul><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p>左外连接</p><ul><li><strong>语法</strong>：<code>SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...;</code></li><li><strong>说明</strong>：相当于查询表 1（左表）的所有数据，包含表 1 和表 2 交集部分的数据 。即左表的记录全部展示，右表满足连接条件的记录展示，不满足的用 <code>NULL</code> 填充对应字段。<br><img src="https://i.imgur.com/cm41Q8p.png"><br>查全了<br>右外连接</li><li><strong>语法</strong>：<code>SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件...;</code></li><li><strong>说明</strong>：查询表 2（右表）的所有数据，包含表 1 和表 2 交集部分的数据 。右表记录全部展示，左表满足连接条件的记录展示，不满足的用 <code>NULL</code> 填充对应字段。<br><img src="https://i.imgur.com/i2wb9sc.png"><br>修改的时候记得commit<br><img src="https://i.imgur.com/QBvUY8e.png"></li></ul><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><p>自连接查询语法</p><ul><li><strong>语法</strong>：<code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件...;</code></li><li><strong>说明</strong>：自连接查询是指在同一个表上进行连接操作。该表通过不同别名（如别名A和别名B ）被视为不同的逻辑表来建立连接关系。自连接查询既可以是内连接查询（仅返回满足连接条件的行），也可以是外连接查询（如左外连接、右外连接，会根据连接类型返回包含不满足条件行，以 <code>NULL</code> 填充相关字段的数据 ）。 </li><li><img src="https://i.imgur.com/Ld04WIA.png"><br><img src="https://i.imgur.com/b03AKWt.png"><br><img src="https://i.imgur.com/Uqpa5Fu.png"><br><img src="https://i.imgur.com/XKHD5lZ.png"></li></ul><h3 id="UNION-查询"><a href="#UNION-查询" class="headerlink" title="UNION 查询"></a>UNION 查询</h3><ul><li><strong>定义</strong>：将多次查询的结果合并起来，形成一个新的查询结果集。</li><li><strong>语法</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B...;</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/8RDw5Pw.png"></li></ul><p><img src="https://i.imgur.com/5LVCIWU.png"><br><img src="https://i.imgur.com/7BRpZEz.png"><br><img src="https://i.imgur.com/rw36JOe.png"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><strong>概念</strong>：在 SQL 语句中嵌套 <code>SELECT</code> 语句，也叫嵌套查询。子查询外部语句可以是 <code>INSERT</code> &#x2F; <code>UPDATE</code> &#x2F; <code>DELETE</code> &#x2F; <code>SELECT</code> 中的任意一个。</li><li>例如：<code>SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);</code></li><li><strong>分类</strong>：<ul><li><strong>标量子查询</strong>：子查询结果为单个值。</li><li><strong>列子查询</strong>：子查询结果为一列。</li><li><strong>行子查询</strong>：子查询结果为一行。</li><li><strong>表子查询</strong>：子查询结果为多行多列。<br>  <img src="https://i.imgur.com/VpEdVbq.png"><br>  <img src="https://i.imgur.com/z919F8I.png"></li></ul></li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a><strong>标量子查询</strong></h4><p>子查询结果为单个值。</p><ul><li><strong>定义</strong>：子查询返回的结果是单个值（如数字、字符串、日期等 ），这是子查询中最简单的形式。</li><li><strong>常用操作符</strong>：<code>=</code>、<code>&lt;&gt;</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code> 。 可用于 <code>WHERE</code> 子句等位置，进行条件判断等操作 。<br><img src="https://i.imgur.com/qkxspyJ.png"><br>子查询<br><img src="https://i.imgur.com/pTrJAcv.png"></li></ul><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a><strong>列子查询</strong></h4><p>子查询结果为一列。</p><p><strong>列子查询</strong>是指子查询返回的结果是一列数据（可以有多行）。</p><p>在列子查询中，常用的操作符包括：</p><ul><li><strong>IN</strong>: 用于判断某个值是否在子查询返回的结果集合中。如果存在，则条件为真。</li><li><strong>NOT IN</strong>: 用于判断某个值是否不在子查询返回的结果集合中。如果不存在，则条件为真。</li><li><strong>ANY (或 SOME)</strong>:  只要子查询返回的结果集合中，有任意一个值满足条件，则条件为真。 <code>ANY</code> 和 <code>SOME</code> 的作用是相同的。</li><li><strong>ALL</strong>: 子查询返回的结果集合中，所有值都必须满足条件，条件才为真。<!--⚠️Imgur upload failed, check dev console-->![[Pasted image 20250417150657.png]]<br><img src="https://i.imgur.com/mbNrngn.png"><br><img src="https://i.imgur.com/ckkxIjT.png"><br><img src="https://i.imgur.com/ojWHuYl.png"></li></ul><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a><strong>行子查询</strong></h4><ul><li><strong>定义</strong>：子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</li><li><strong>常用操作符</strong>：&#x3D;、&lt;&gt;、IN、NOT IN<br><img src="https://i.imgur.com/OwnuaVE.png"></li></ul><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><ul><li><strong>定义</strong>：子查询返回的结果是多行多列，这种子查询称为表子查询。</li><li><strong>常用操作符</strong>：IN<br><img src="https://i.imgur.com/v1GjaMm.png"><br><img src="https://i.imgur.com/DyeDBLT.png"></li></ul><h3 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h3><p>根据需求，完成 SQL 语句的编写</p><ol><li><p><strong>查询员工基本信息</strong>：查询员工的姓名、年龄、职位、部门信息。<img src="https://i.imgur.com/ntVL2Lx.png"></p></li><li><p><strong>查询特定年龄员工信息</strong>：查询年龄小于 30 岁的员工姓名、年龄、职位、部门信息。<img src="https://i.imgur.com/PnN7Gnx.png"></p></li><li><p><strong>查询部门信息</strong>：查询拥有员工的部门 ID、部门名称。<img src="https://i.imgur.com/RSqSJaJ.png"></p></li><li><p><strong>查询大龄员工及部门</strong>：查询所有年龄大于 40 岁的员工，及其归属的部门名称；若员工无部门分配，也需展示。<img src="https://i.imgur.com/FVXICPo.png"></p></li><li><p><strong>查询工资等级</strong>：查询所有员工的工资等级。<img src="https://i.imgur.com/r5YAhw1.png"></p></li><li><p><strong>查询特定部门员工信息及工资等级</strong>：查询 “研发部” 所有员工的信息及工资等级。<img src="https://i.imgur.com/DnPhbCs.png"></p></li><li><p><strong>查询特定部门平均工资</strong>：查询 “研发部” 员工的平均工资。<img src="https://i.imgur.com/xUp0OPi.png"></p></li><li><p><strong>查询高工资员工信息</strong>：查询工资比 “灭绝” 高的员工信息。<img src="https://i.imgur.com/ANPatuy.png"></p></li><li><p><strong>查询高于平均薪资员工信息</strong>：查询比平均薪资高的员工信息。<img src="https://i.imgur.com/gcKH3S0.png"></p></li><li><p><strong>查询低于部门平均工资员工信息</strong>：查询低于本部门平均工资的员工信息。<img src="https://i.imgur.com/CSjl53m.png"></p></li><li><p><strong>统计部门员工人数</strong>：查询所有的部门信息，并统计部门的员工人数。<img src="https://i.imgur.com/sWC2cR2.png"></p></li><li><p><strong>查询学生选课情况</strong>：查询所有学生的选课情况，展示出学生名称，学号，课程名称<img src="https://i.imgur.com/Zqb2xv0.png"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;5-1-数据库表结构关系-概述&quot;&gt;&lt;a href=&quot;#5-1-数据库表结构关系-概述&quot; class=&quot;headerlink&quot; title=&quot;5.1 数据库表结构关系 - 概述&quot;&gt;&lt;/a&gt;5.1 数据库表结构关系 - 概述&lt;/h2&gt;&lt;p&gt;在项目开发进行数据库表结构设</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第四章 约束</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/%E7%BA%A6%E6%9D%9F/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/%E7%BA%A6%E6%9D%9F/</id>
    <published>2025-05-11T01:05:11.000Z</published>
    <updated>2025-05-11T01:10:45.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-约束的概述"><a href="#3-1-约束的概述" class="headerlink" title="3.1 约束的概述"></a>3.1 约束的概述</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><h3 id="二、目的"><a href="#二、目的" class="headerlink" title="二、目的"></a>二、目的</h3><p>保证数据库中数据的正确、有效性和完整性。</p><h3 id="三、分类"><a href="#三、分类" class="headerlink" title="三、分类"></a>三、分类</h3><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为 null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.16 版本之后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td></td></tr><tr><td><img src="https://i.imgur.com/T5Xz2fj.png"></td><td></td><td></td></tr></tbody></table><h2 id="3-2-约束的演示"><a href="#3-2-约束的演示" class="headerlink" title="3.2 约束的演示"></a>3.2 约束的演示</h2><table><thead><tr><th>字段名</th><th>字段含义</th><th>字段类型</th><th>约束条件</th><th>约束关键字</th></tr></thead><tbody><tr><td>id</td><td>ID 唯一标识</td><td>int</td><td>主键，并且自动增长</td><td>PRIMARY KEY, AUTO_INCREMENT</td></tr><tr><td>name</td><td>姓名</td><td>varchar(10)</td><td>不为空，并且唯一</td><td>NOT NULL, UNIQUE</td></tr><tr><td>age</td><td>年龄</td><td>int</td><td>大于 0，并且小于等于 120</td><td>CHECK</td></tr><tr><td>status</td><td>状态</td><td>char(1)</td><td>如果没有指定该值，默认为 1</td><td>DEFAULT</td></tr><tr><td>gender</td><td>性别</td><td>char(1)</td><td>无</td><td></td></tr></tbody></table><p><img src="https://i.imgur.com/5MpJ4r7.png"><br>主键约束<br><img src="https://i.imgur.com/cdMXYyF.png"></p><h2 id="3-3-外键约束"><a href="#3-3-外键约束" class="headerlink" title="3.3 外键约束"></a>3.3 外键约束</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>外键用于在两张表的数据间建立连接，保障数据的一致性与完整性。</p><h3 id="示例（员工表-emp-）"><a href="#示例（员工表-emp-）" class="headerlink" title="示例（员工表 emp ）"></a>示例（员工表 emp ）</h3><table><thead><tr><th>id</th><th>name</th><th>age</th><th>job</th><th>salary</th><th>entrydate</th><th>managerid</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>金庸</td><td>66</td><td>总裁</td><td>20800</td><td>2000 - 01 - 01</td><td><null></null></td><td>5</td></tr><tr><td>2</td><td>张无忌</td><td>20</td><td>项目经理</td><td>12500</td><td>2005 - 12 - 05</td><td>1</td><td>1</td></tr><tr><td>3</td><td>杨逍</td><td>33</td><td>开发</td><td>8400</td><td>2000 - 11 - 03</td><td>2</td><td>1</td></tr><tr><td>4</td><td>韦一笑</td><td>48</td><td>开发</td><td>11000</td><td>2002 - 02 - 05</td><td>2</td><td>1</td></tr><tr><td>5</td><td>常遇春</td><td>43</td><td>开发</td><td>10500</td><td>2004 - 09 - 07</td><td>3</td><td>1</td></tr><tr><td><img src="https://i.imgur.com/tigs9Lp.png"></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/we1dUsD.png"></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/ur3HOXQ.png"></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>建立表</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="（一）添加外键-创建表时添加"><a href="#（一）添加外键-创建表时添加" class="headerlink" title="（一）添加外键 - 创建表时添加"></a>（一）添加外键 - 创建表时添加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">   ...</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="（二）添加外键-表创建后添加"><a href="#（二）添加外键-表创建后添加" class="headerlink" title="（二）添加外键 - 表创建后添加"></a>（二）添加外键 - 表创建后添加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/p9RNjjx.png"><br><img src="https://i.imgur.com/PXH93Hn.png"><br>关联成功<br><img src="https://i.imgur.com/P46GUN6.png"></p><p>删除外键<br><img src="https://i.imgur.com/tYALbQK.png"><br>蓝色小钥匙已经消失<br><img src="https://i.imgur.com/qr29Jnf.png"></p><h3 id="外键约束行为"><a href="#外键约束行为" class="headerlink" title="外键约束行为"></a>外键约束行为</h3><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>在父表删除 &#x2F; 更新记录时，先检查是否有对应外键，有则不允许操作，与 RESTRICT 一致</td></tr><tr><td><strong>RESTRICT</strong></td><td>同 NO ACTION，检查父表记录对应外键，有则禁止删除 &#x2F; 更新</td></tr><tr><td><strong>CASCADE</strong></td><td>父表删除 &#x2F; 更新记录时，若存在对应外键，同时删除 &#x2F; 更新子表中外键关联记录</td></tr><tr><td>SET NULL</td><td>父表删除记录时，若有对应外键，将子表中外键值设为 null（要求外键允许取 null ）</td></tr><tr><td>SET DEFAULT</td><td>父表变动时，子表外键设为默认值（InnoDB 不支持）</td></tr><tr><td><strong>语法格式</strong>：</td><td></td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ArKz1Nx.png"><br><img src="https://i.imgur.com/Om3Tiwd.png"><br>外键和内键同时变化<br>set null<br><img src="https://i.imgur.com/kkvyhCo.png"><br><img src="https://i.imgur.com/JZRTlB9.png"><br>直接在图形化界面切换外键<br><img src="https://i.imgur.com/O4R6XsO.png"><br><img src="https://i.imgur.com/DjiFy1Q.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-1-约束的概述&quot;&gt;&lt;a href=&quot;#3-1-约束的概述&quot; class=&quot;headerlink&quot; title=&quot;3.1 约束的概述&quot;&gt;&lt;/a&gt;3.1 约束的概述&lt;/h2&gt;&lt;h3 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第三章 函数</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/%E5%87%BD%E6%95%B0/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/%E5%87%BD%E6%95%B0/</id>
    <published>2025-05-11T01:04:55.000Z</published>
    <updated>2025-05-11T01:10:55.016Z</updated>
    
    <content type="html"><![CDATA[<p>函数：数据库函数是预定义的、可重用的代码块，用于执行特定的数据操作或计算，并返回一个结果。</p><h2 id="3-1-字符串函数"><a href="#3-1-字符串函数" class="headerlink" title="3.1 字符串函数"></a>3.1 字符串函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接，把 S1, S2, … Sn 合并成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串 str 全部转换为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串 str 全部转换为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串 pad 对 str 左边填充，使总长度达 n</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串 pad 对 str 右边填充，使总长度达 n</td></tr><tr><td>TRIM(str)</td><td>去除字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回字符串 str 从 start 位置起长度为 len 的子字符串</td></tr><tr><td>concat</td><td></td></tr><tr><td><img src="https://i.imgur.com/rvDLCuJ.png"></td><td></td></tr><tr><td>upper</td><td></td></tr><tr><td><img src="https://i.imgur.com/0LQQ1BV.png"></td><td></td></tr><tr><td>lower</td><td></td></tr><tr><td><img src="https://i.imgur.com/feCNcw6.png"></td><td></td></tr><tr><td>lpad</td><td></td></tr><tr><td><img src="https://i.imgur.com/kfnAFWm.png"></td><td></td></tr><tr><td>rpad</td><td></td></tr><tr><td><img src="https://i.imgur.com/3sGCKki.png"></td><td></td></tr><tr><td>trim</td><td></td></tr><tr><td><img src="https://i.imgur.com/dWQZ23S.png"></td><td></td></tr><tr><td>substring</td><td></td></tr><tr><td><img src="https://i.imgur.com/cSWbuCR.png"></td><td></td></tr><tr><td><img src="https://i.imgur.com/30QCp7M.png"></td><td></td></tr></tbody></table><h2 id="3-2-数值函数"><a href="#3-2-数值函数" class="headerlink" title="3.2 数值函数"></a>3.2 数值函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回 x&#x2F;y 的模</td></tr><tr><td>RAND()</td><td>返回 0 - 1 内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数 x 的四舍五入值，保留 y 位小数</td></tr><tr><td>ceil</td><td></td></tr><tr><td><img src="https://i.imgur.com/1tTB3u8.png"></td><td></td></tr></tbody></table><p>floor<br><img src="https://i.imgur.com/bbmOt0u.png"></p><p>mod<br><img src="https://i.imgur.com/yPpZTQA.png"></p><p>rand<br><img src="https://i.imgur.com/MHuiXQF.png"></p><p>round<br><img src="https://i.imgur.com/geaW3qO.png"></p><p>验证码<br><img src="https://i.imgur.com/SLXoU5l.png"><br>有bug<br><img src="https://i.imgur.com/YQjNNxf.png"><br>最终方案<br><img src="https://i.imgur.com/saStmBt.png"></p><h2 id="3-3-日期函数"><a href="#3-3-日期函数" class="headerlink" title="3.3 日期函数"></a>3.3 日期函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定 date 的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定 date 的月份</td></tr><tr><td>DAY(date)</td><td>获取指定 date 的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回日期 &#x2F; 时间值加上时间间隔 expr 后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间 date1 和结束时间 date2 之间的天数</td></tr><tr><td>curdate</td><td></td></tr><tr><td><img src="https://i.imgur.com/vbXQ08V.png"></td><td></td></tr></tbody></table><p>curtime<br><img src="https://i.imgur.com/Yw1Pe1M.png"></p><p>now<br><img src="https://i.imgur.com/zqUFpdc.png"><br>year<br><img src="https://i.imgur.com/g9VPbaI.png"><br>month<br><img src="https://i.imgur.com/P8QpVE0.png"><br>day<br><img src="https://i.imgur.com/7Yhia96.png"><br>date add<br><img src="https://i.imgur.com/3YqEtLf.png"><br>差异天数<br><img src="https://i.imgur.com/I0BhlvC.png"><br>需求<br><img src="https://i.imgur.com/wYNLMvV.png"><br><img src="https://i.imgur.com/CeUd0Ac.png"></p><h2 id="3-4-流程控制函数"><a href="#3-4-流程控制函数" class="headerlink" title="3.4 流程控制函数"></a>3.4 流程控制函数</h2><p>流程函数可在 SQL 语句中实现条件筛选，提升语句效率。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>若 value 为 true，返回 t；否则返回 f</td></tr><tr><td>IFNULL(value1, value2)</td><td>若 value1 不为空，返回 value1；否则返回 value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>若 val1 为 true，返回 res1；否则返回 default 默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td><td>若 expr 的值等于 val1，返回 res1；否则返回 default 默认值</td></tr><tr><td>ifnull</td><td></td></tr><tr><td><img src="https://i.imgur.com/UIw08Jl.png"></td><td></td></tr></tbody></table><p>if<br><img src="https://i.imgur.com/SiB89au.png"></p><p>case<br><img src="https://i.imgur.com/HZr0MXC.png"></p><p><img src="https://i.imgur.com/AmB9oQ6.png"></p><p><img src="https://i.imgur.com/vdLYWPq.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数：数据库函数是预定义的、可重用的代码块，用于执行特定的数据操作或计算，并返回一个结果。&lt;/p&gt;
&lt;h2 id=&quot;3-1-字符串函数&quot;&gt;&lt;a href=&quot;#3-1-字符串函数&quot; class=&quot;headerlink&quot; title=&quot;3.1 字符串函数&quot;&gt;&lt;/a&gt;3.1 字符</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第二章 SQL</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/SQL/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/SQL/</id>
    <published>2025-05-11T01:03:28.000Z</published>
    <updated>2025-05-11T01:11:04.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-SQL通用语句-flashcard"><a href="#2-1-SQL通用语句-flashcard" class="headerlink" title="2.1 SQL通用语句 #flashcard"></a>2.1 SQL通用语句 #flashcard</h2><ol><li><strong>书写格式</strong>：SQL 语句可单行或多行书写，均以分号 <code>;</code> 结尾。</li><li><strong>可读性增强</strong>：可利用空格或缩进使 SQL 语句更具可读性。</li><li><strong>大小写规则</strong>：在 MySQL 数据库中，SQL 语句不区分大小写，但建议将关键字大写。</li><li><strong>注释方式</strong><ul><li><strong>单行注释</strong>：<code>-- 注释内容</code> ；MySQL 还特有 <code># 注释内容</code> 。</li><li><strong>多行注释</strong>：<code>/* 注释内容 */</code> 。</li></ul></li></ol><!--ID: 1744130440676--><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用于定义数据库对象（数据库、表、字段等）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用于对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用于查询数据库表中的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用于创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="2-1-1-DDL-flashcard"><a href="#2-1-1-DDL-flashcard" class="headerlink" title="2.1.1 DDL #flashcard"></a>2.1.1 DDL #flashcard</h3><p> SQL - DDL 数据库操作</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li><strong>查询所有数据库</strong>：<br><code>SHOW DATABASES;</code><br><img src="https://i.imgur.com/wUEx8la.png"><br>[[Probelm1]]<br><img src="https://i.imgur.com/clGnFuj.png">]]</li><li><strong>查询当前数据库</strong>：<br><code>SELECT DATABASE();</code><br><img src="https://i.imgur.com/d5r7FkC.png"></li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><code>CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];</code><br><img src="https://i.imgur.com/vNfSzR1.png"><br><img src="https://i.imgur.com/WZULzsB.png"><br><img src="https://i.imgur.com/6ZoSXXL.png"></p><ul><li><strong>尝试一</strong>：使用 <code>create database itheima default charset utf8;</code> 语句创建 <code>itheima</code> 数据库，提到存在字符存储长度相关问题（有的字符存储占三个字符，有的占四个字符 ）。</li><li><strong>尝试二</strong>：改用 <code>create database itheima default charset utf8mb4;</code> 语句创建 <code>itheima</code> 数据库，执行成功，提示 <code>Query OK, 1 row affected (0.01 sec)</code> ，推荐使用 <code>utf8mb4</code> 字符集处理字符存储问题。</li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>DROP DATABASE [IF EXISTS] 数据库名;</code><br><img src="https://i.imgur.com/jIzgpql.png"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>USE 数据库名;</code><br><img src="https://i.imgur.com/OaavpIY.png"></p><!--ID: 1744130440721--><ul><li>DDL-表操作-查询</li></ul><ol><li><p><strong>查询当前数据库所有表</strong></p><ul><li>语句：<code>SHOW TABLES;</code><img src="https://i.imgur.com/hKNlcB1.png"><img src="https://i.imgur.com/QTGW5om.png"></li></ul></li><li><p><strong>查询表结构</strong></p><ul><li>语句：<code>DESC 表名;</code><img src="https://i.imgur.com/54t1f5f.png"></li></ul></li><li><p><strong>查询指定表的建表语句</strong></p><ul><li>语句：&#96;SHOW CREATE TABLE 表名;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">    字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">    字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">   ...</span><br><span class="line">    字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">) [COMMENT 表注释];</span><br></pre></td></tr></table></figure><strong>说明</strong>：</li></ul></li></ol><ul><li><code>CREATE TABLE</code> 是创建表的关键字。</li><li><code>表名</code> 是要创建的表的名称，需符合命名规范 。</li><li>每个 <code>字段</code> 后跟其对应的 <code>字段类型</code>，如常见的 <code>INT</code>（整数型）、<code>VARCHAR</code>（可变长度字符串型）等。</li><li><code>COMMENT</code> 关键字用于添加注释，对字段或表进行说明解释，增强代码可读性，注释内容可选。<img src="https://i.imgur.com/Yz7oHaQ.png"><br><img src="https://i.imgur.com/CweM7GA.png"></li></ul><ul><li>DDL-表操作-数据类型</li></ul><table><thead><tr><th>分类</th><th>类型</th><th>大小</th><th>有符号 (SIGNED) 范围</th><th>无符号 (UNSIGNED) 范围</th><th>描述</th></tr></thead><tbody><tr><td>数值类型</td><td>TINYINT</td><td>1 byte</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数值</td></tr><tr><td>数值类型</td><td>SMALLINT</td><td>2 bytes</td><td>(-32768, 32767)</td><td>(0, 65535)</td><td>大整数值</td></tr><tr><td>数值类型</td><td>MEDIUMINT</td><td>3 bytes</td><td>(-8388608, 8388607)</td><td>(0, 16777215)</td><td>大整数值</td></tr><tr><td>数值类型</td><td>INT或INTEGER</td><td>4 bytes</td><td>(-2147483648, 2147483647)</td><td>(0, 4294967295)</td><td>大整数值</td></tr><tr><td>数值类型</td><td>BIGINT</td><td>8 bytes</td><td>(-2^63, 2^63 - 1)</td><td>(0, 2^64 - 1)</td><td>极大整数值</td></tr><tr><td>数值类型</td><td>FLOAT</td><td>4 bytes</td><td>(-3.402823466 E+38, 3.402823466351 E+38)</td><td>0 和 (1.175494351 E-38, 3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>数值类型</td><td>DOUBLE</td><td>8 bytes</td><td>(-1.7976931348623157 E+308, 1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308, 1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>数值类型</td><td>DECIMAL</td><td>依赖于 M 和 D 的值</td><td>依赖于 M 和 D 的值</td><td>依赖于 M 和 D 的值</td><td>小数值 (精确定点数)</td></tr><tr><td>精度（Precision，通常用 M 表示）和标度（Scale，通常用 D 表示）是用于 <code>DECIMAL</code> 数据类型的概念，它们定义了数值的精确度和范围。</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>**精度 (M)**：<ul><li>精度是指数值中可以存储的总位数。这包括整数部分的位数和小数部分的位数。</li><li>例如，如果一个 <code>DECIMAL</code> 类型的精度是 10，那么这个数值总共可以存储 10 位数字。</li></ul></li><li>**标度 (D)**：<ul><li>标度是指数值中小数部分的位数。</li><li>例如，如果一个 <code>DECIMAL</code> 类型的标度是 2，那么这个数值将保留两位小数。</li></ul></li></ul><p><strong>举例说明：</strong><br>假设你定义一个 <code>DECIMAL(5, 2)</code> 类型的字段：</p><ul><li>精度 (M) &#x3D; 5，表示总共可以存储 5 位数字。</li><li>标度 (D) &#x3D; 2，表示其中 2 位是小数。<br>这意味着你可以存储的最大值是 999.99，最小值是 -999.99。</li></ul><p><strong>总结：</strong></p><ul><li>精度决定了数值的总位数，包括整数和小数部分。</li><li>标度决定了数值中小数的位数。<br>在 <code>DECIMAL(M, D)</code> 中，<code>M</code> 必须大于或等于 <code>D</code>。 如果 <code>D</code> 是 0，则数值没有小数部分。</li></ul><table><thead><tr><th>分类</th><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>字符串类型</td><td>CHAR</td><td>0 - 255 bytes</td><td>定长字符串</td></tr><tr><td>字符串类型</td><td>VARCHAR</td><td>0 - 65535 bytes</td><td>变长字符串</td></tr><tr><td>字符串类型</td><td>TINYBLOB</td><td>0 - 255 bytes</td><td>不超过 255 个字符的二进制数据</td></tr><tr><td>字符串类型</td><td>TINYTEXT</td><td>0 - 255 bytes</td><td>短文本字符串</td></tr><tr><td>字符串类型</td><td>BLOB</td><td>0 - 65535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>字符串类型</td><td>TEXT</td><td>0 - 65535 bytes</td><td>长文本数据</td></tr><tr><td>字符串类型</td><td>MEDIUMBLOB</td><td>0 - 16777215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>字符串类型</td><td>MEDIUMTEXT</td><td>0 - 16777215 bytes</td><td>中等长度文本数据</td></tr><tr><td>字符串类型</td><td>LONGBLOB</td><td>0 - 4294967295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>字符串类型</td><td>LONGTEXT</td><td>0 - 4294967295 bytes</td><td>极大文本数据</td></tr></tbody></table><h3 id="2-1-2-基础-SQL-图形化界面工具DataGrip"><a href="#2-1-2-基础-SQL-图形化界面工具DataGrip" class="headerlink" title="2.1.2 基础-SQL-图形化界面工具DataGrip"></a>2.1.2 基础-SQL-图形化界面工具DataGrip</h3><p>下载地址：<a href="https://pan.baidu.com/s/1oYmpTCD8Uh_tMUJ2onj1Ww?pwd=4x7z&pwd=4x7z">https://pan.baidu.com/s/1oYmpTCD8Uh_tMUJ2onj1Ww?pwd&#x3D;4x7z&amp;pwd&#x3D;4x7z</a><br>破解方法：<a href="https://www.bilibili.com/video/BV1yhdSYcEC2/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=9216022843178d0a5e4b781fe29849b5">https://www.bilibili.com/video/BV1yhdSYcEC2/?spm_id_from&#x3D;333.1007.top_right_bar_window_history.content.click&amp;vd_source&#x3D;9216022843178d0a5e4b781fe29849b5</a><br><img src="https://i.imgur.com/NGZpcBn.png"><br>建立新项目<br><img src="https://i.imgur.com/g4mkI3j.png"><br><img src="https://i.imgur.com/IjOdpr0.png"><br>自动下载驱动<br><img src="https://i.imgur.com/7lpgMOS.png"></p><p><img src="https://i.imgur.com/yQPuP8b.png"></p><p><img src="https://i.imgur.com/O23or3S.png"><br><img src="https://i.imgur.com/9Pn8IFa.png"><br>连接建立好了<br><img src="https://i.imgur.com/h5hEKal.png"><br>展示所有的数据库<br><img src="https://i.imgur.com/wAf0f5f.png"><br><img src="https://i.imgur.com/BRG1dlE.png"><br>创建新数据库<br><img src="https://i.imgur.com/inqFbhz.png"><br><img src="https://i.imgur.com/oJkRB3e.png"><br>添加新的表<br><img src="https://i.imgur.com/IyRhQQa.png"><br>添加新的字段<br><img src="https://i.imgur.com/xTDw7Qq.png"><br>添加两个字段，注意看脚本<br><img src="https://i.imgur.com/DWEIStv.png"><br>允许存储null值<br><img src="https://i.imgur.com/vEmJHCC.png"><br>成功创建<br><img src="https://i.imgur.com/ZrHaAaj.png"><br>修改表<br><img src="https://i.imgur.com/jls1civ.png"><br>修改表的指令<br><img src="https://i.imgur.com/7mIXXRq.png"><br>编写SQL语句，操作这个数据库<br><img src="https://i.imgur.com/WC5a1tm.png"><br>编写完成直接执行<br><img src="https://i.imgur.com/SSVE6nI.png"><br>再执行一条<br><img src="https://i.imgur.com/7llxxRb.png"><br>再执行一条</p><h3 id="2-1-3-DML"><a href="#2-1-3-DML" class="headerlink" title="2.1.3 DML"></a>2.1.3 DML</h3><p>DML (数据操纵语言) 用于<strong>修改数据库中的数据</strong>。</p><p>主要操作：</p><ul><li><strong>增 (INSERT):</strong> 添加新数据</li><li><strong>删 (DELETE):</strong> 删除数据</li><li><strong>改 (UPDATE):</strong> 修改数据</li></ul><p>DML 负责<strong>数据内容</strong>，而不是数据库结构。<br><img src="https://i.imgur.com/8cKs0v1.png"></p><h4 id="SQL-DML添加数据笔记"><a href="#SQL-DML添加数据笔记" class="headerlink" title="SQL - DML添加数据笔记"></a>SQL - DML添加数据笔记</h4><h5 id="一、给指定字段添加数据"><a href="#一、给指定字段添加数据" class="headerlink" title="一、给指定字段添加数据"></a>一、给指定字段添加数据</h5><p>语法：<code>INSERT INTO 表名 (字段名1,字段名2, ...) VALUES (值1,值2, ...);</code><br>应用场景：当只想为表中的部分字段插入数据时使用，需明确指定字段名，值的顺序与字段名顺序对应。</p><h5 id="二、给全部字段添加数据"><a href="#二、给全部字段添加数据" class="headerlink" title="二、给全部字段添加数据"></a>二、给全部字段添加数据</h5><p>语法：<code>INSERT INTO 表名 VALUES (值1,值2, ...);</code><br>应用场景：当要为表的所有字段插入数据，且清楚表结构中字段顺序时使用，按表字段顺序提供对应值。 </p><h5 id="三、批量添加数据"><a href="#三、批量添加数据" class="headerlink" title="三、批量添加数据"></a>三、批量添加数据</h5><ol><li><strong>指定字段批量添加</strong><ul><li><strong>语法</strong>：<code>INSERT INTO 表名 (字段名1,字段名2, ...) VALUES (值1,值2, ...),(值1,值2, ...),(值1,值2, ...);</code></li><li><strong>说明</strong>：可一次性向指定字段插入多组数据，每个 <code>(值1,值2, ...)</code> 为一组，组内值顺序与前面指定字段顺序对应。</li></ul></li><li><strong>全部字段批量添加</strong><ul><li><strong>语法</strong>：<code>INSERT INTO 表名 VALUES (值1,值2, ...),(值1,值2, ...),(值1,值2, ...);</code></li><li><strong>说明</strong>：无需指定字段名，按表字段顺序，一次插入多组数据，每组数据个数与表字段数一致。<br> <img src="https://i.imgur.com/OMoc828.png"></li></ul></li></ol><p><img src="https://i.imgur.com/paSb7fI.png"><br>建表成功</p><p><img src="https://i.imgur.com/5a1t6Yp.png"><br>查看创建结果</p><p><img src="https://i.imgur.com/6DSGX95.png"><br>将年龄设置为无符号</p><p><img src="https://i.imgur.com/jBVXtx0.png"><br>超范围</p><p><img src="https://i.imgur.com/kikhcIG.png"><br>不指定插入</p><p><img src="https://i.imgur.com/yZlNCh0.png"><br>批量插入</p><h4 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h4><h5 id="SQL-UPDATE-语句（数据更新）"><a href="#SQL-UPDATE-语句（数据更新）" class="headerlink" title="SQL - UPDATE 语句（数据更新）"></a>SQL - UPDATE 语句（数据更新）</h5><p><strong>语法</strong>：<code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [WHERE 条件];</code><br><strong>说明</strong>：</p><ul><li><code>UPDATE</code> ：关键字，用于标识要对表进行更新操作。</li><li><code>表名</code> ：指定要更新数据的目标表。</li><li><code>SET</code> ：关键字，其后跟着要更新的字段及对应新值，可同时更新多个字段，用逗号分隔。</li><li><code>WHERE</code> （可选）：条件子句，用于筛选出满足特定条件的记录进行更新。若省略 <code>WHERE</code> ，会更新表中的所有记录。</li></ul><p><img src="https://i.imgur.com/YuaY1kc.png"><br><img src="https://i.imgur.com/xBCKOx3.png"><br><img src="https://i.imgur.com/pvfoeia.png"><br><img src="https://i.imgur.com/yzfFD8h.png"></p><p><img src="https://i.imgur.com/YNVBMYm.png"><br>不安全<br><img src="https://i.imgur.com/icff6KE.png"><br>修改结果</p><h5 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h5><p>SQL - DELETE 语句（数据删除）</p><p><strong>语法</strong>：<code>DELETE FROM 表名 [WHERE 条件]</code><br><strong>说明</strong>：</p><ul><li><code>DELETE FROM</code> ：关键字组合，表明要执行删除操作，指定从哪个表删除数据 。</li><li><code>表名</code> ：要删除数据所在的目标表。</li><li><code>WHERE</code> （可选）：条件子句，用于筛选出满足特定条件的记录进行删除。若省略 <code>WHERE</code> ，会删除表中的所有记录。<br><img src="https://i.imgur.com/EfHVsTV.png"></li></ul><p><img src="https://i.imgur.com/dT1AvqU.png"></p><p><img src="https://i.imgur.com/HnUrUiT.png"></p><p><img src="https://i.imgur.com/9jakMje.png"></p><p><img src="https://i.imgur.com/bV4EOzD.png"></p><h2 id="2-1-4-DQL"><a href="#2-1-4-DQL" class="headerlink" title="2.1.4 DQL"></a>2.1.4 DQL</h2><h3 id="SQL-DQL-基本查询"><a href="#SQL-DQL-基本查询" class="headerlink" title="SQL - DQL 基本查询"></a>SQL - DQL 基本查询</h3><h4 id="一、查询多个字段"><a href="#一、查询多个字段" class="headerlink" title="一、查询多个字段"></a>一、查询多个字段</h4><ol><li><strong>指定字段查询</strong><ul><li><strong>语法</strong>：<code>SELECT 字段1,字段2,字段3... FROM 表名;</code></li><li><strong>说明</strong>：从指定 <code>表名</code> 中选取 <code>字段1,字段2,字段3...</code> 这些特定字段的数据进行查询。</li></ul></li><li><strong>全字段查询</strong><ul><li><strong>语法</strong>：<code>SELECT * FROM 表名;</code></li><li><strong>说明</strong>：<code>*</code> 为通配符，代表从 <code>表名</code> 中选取所有字段的数据进行查询。<br> <img src="https://i.imgur.com/0zBXGuz.png"><br> <img src="https://i.imgur.com/GbaphtI.png"><br> 查询部分数据<br> <img src="https://i.imgur.com/thRnu16.png"><br> 查询所有地址<br> <img src="https://i.imgur.com/u2agadM.png"><br> 快捷查询<br> <img src="https://i.imgur.com/nxANpE0.png"><br> 起别名<br> <img src="https://i.imgur.com/wXUIb3d.png"><br> 去重查询</li></ul></li></ol><h4 id="二、设置别名"><a href="#二、设置别名" class="headerlink" title="二、设置别名"></a>二、设置别名</h4><ul><li><strong>语法</strong>：<code>SELECT 字段1 [AS 别名1],字段2 [AS 别名2]... FROM 表名;</code></li><li><strong>说明</strong>：<code>AS</code> 关键字用于给字段设置别名，方便在查询结果展示或后续操作中使用更易懂的名称，<code>AS</code> 可省略 。</li></ul><h4 id="三、去除重复记录"><a href="#三、去除重复记录" class="headerlink" title="三、去除重复记录"></a>三、去除重复记录</h4><ul><li><strong>语法</strong>：<code>SELECT DISTINCT 字段列表 FROM 表名;</code></li><li><strong>说明</strong>：<code>DISTINCT</code> 关键字用于去除 <code>字段列表</code> 中重复的记录，只保留不同值的记录。</li></ul><h3 id="SQL-DQL条件查询"><a href="#SQL-DQL条件查询" class="headerlink" title="SQL -DQL条件查询"></a>SQL -DQL条件查询</h3><h4 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h4><p><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code>  </p><p>说明：</p><ul><li><code>SELECT</code>：用于指定要查询的字段。可指定一个或多个字段，多个字段间用逗号分隔；若要查询所有字段，可用 <code>*</code> 代替字段列表。</li><li><code>FROM</code>：指定从哪个表中获取数据 。</li><li><code>WHERE</code>：筛选条件，用于限定从表中选取符合特定条件的记录，只有满足条件的记录才会出现在查询结果中。</li></ul><h4 id="二、条件"><a href="#二、条件" class="headerlink" title="二、条件"></a>二、条件</h4><p> （一）比较运算符</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code> 或 <code>!=</code></td><td>不等于</td></tr><tr><td><code>BETWEEN... AND...</code></td><td>在某个范围之内 (含最小值、最大值)</td></tr><tr><td><code>IN(...)</code></td><td>在 <code>in</code> 之后的列表中的值，多选一</td></tr><tr><td><code>LIKE</code> 占位符</td><td>模糊匹配 (_匹配单个字符，% 匹配任意个字符)</td></tr><tr><td><code>IS NULL</code></td><td>是否为空</td></tr></tbody></table><p>（二）逻辑运算符</p><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><code>AND</code> 或 <code>&amp;&amp;</code></td><td align="left">并且 (多个条件同时成立)</td></tr><tr><td align="left"><code>OR</code> 或 ‘||’</td><td align="left">或者 (多个条件任意一个成立)</td></tr><tr><td align="left"><code>NOT</code> 或 <code>!</code></td><td align="left">非，不是</td></tr><tr><td align="left"><img src="https://i.imgur.com/tUv5mBj.png"></td><td align="left"></td></tr><tr><td align="left">查询年龄</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/Jx8p3Wo.png"></td><td align="left"></td></tr><tr><td align="left">查询不等号</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/MkqB3wM.png"></td><td align="left"></td></tr><tr><td align="left">查询为null的</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/2i6z8AS.png"></td><td align="left"></td></tr><tr><td align="left">查询非null的</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/1JdJAek.png"></td><td align="left"></td></tr><tr><td align="left">不等于的两种语法</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/myKtFIy.png"></td><td align="left"></td></tr><tr><td align="left">查询范围的两种语法</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/R2lz3Qp.png"></td><td align="left"></td></tr><tr><td align="left">或的语法</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/j3mTvnD.png"></td><td align="left"></td></tr><tr><td align="left">in语法</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/jdLEZEE.png"></td><td align="left"></td></tr><tr><td align="left">查指定字符数</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/ga3AETX.png"></td><td align="left"></td></tr><tr><td align="left">查指定字符</td><td align="left"></td></tr><tr><td align="left"><img src="https://i.imgur.com/2SG6Iyp.png"></td><td align="left"></td></tr></tbody></table><h3 id="SQL-DQL聚合函数"><a href="#SQL-DQL聚合函数" class="headerlink" title="SQL -DQL聚合函数"></a>SQL -DQL聚合函数</h3><h4 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h4><p>聚合函数是将表中的一列数据视为一个整体，进行纵向计算的函数。它能对列中的多个数据值进行处理，输出一个统计结果，用于快速获取数据集合的总体特征。</p><h4 id="二、常见聚合函数"><a href="#二、常见聚合函数" class="headerlink" title="二、常见聚合函数"></a>二、常见聚合函数</h4><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>count</code></td><td>统计数量，可计算列的行数或满足特定条件的行数</td><td>统计员工表总人数：<code>SELECT COUNT(*) FROM employees;</code><br>统计工资大于5000的员工数：<code>SELECT COUNT(*) FROM employees WHERE salary &gt; 5000;</code></td></tr><tr><td><code>max</code></td><td>找出列中的最大值</td><td>找出员工表中最高工资：<code>SELECT MAX(salary) FROM employees;</code></td></tr><tr><td><code>min</code></td><td>找出列中的最小值</td><td>找出员工表中最低工资：<code>SELECT MIN(salary) FROM employees;</code></td></tr><tr><td><code>avg</code></td><td>计算列中数值的平均值</td><td>计算员工表平均工资：<code>SELECT AVG(salary) FROM employees;</code></td></tr><tr><td><code>sum</code></td><td>对列中的数值进行求和</td><td>计算员工表工资总和：<code>SELECT SUM(salary) FROM employees;</code></td></tr><tr><td><img src="https://i.imgur.com/PtOS9LB.png"></td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/7QnLf1r.png"></td><td></td><td></td></tr><tr><td>求总量</td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/o4h0oMO.png"></td><td></td><td></td></tr><tr><td>条件总量</td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/JVHl0K1.png"></td><td></td><td></td></tr><tr><td>求均值</td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/5mRmmL0.png"></td><td></td><td></td></tr><tr><td>求最大值</td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/0CHLI9u.png"></td><td></td><td></td></tr><tr><td>求最小值</td><td></td><td></td></tr><tr><td><img src="https://i.imgur.com/gc67qch.png"></td><td></td><td></td></tr><tr><td>条件总和</td><td></td><td></td></tr></tbody></table><h3 id="SQL-DQL分组查询"><a href="#SQL-DQL分组查询" class="headerlink" title="SQL -DQL分组查询"></a>SQL -DQL分组查询</h3><p> 一、语法<br><code>SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];</code><br><img src="https://i.imgur.com/Yc0HkFs.png"><br><img src="https://i.imgur.com/CimetoU.png"></p><p><img src="https://i.imgur.com/jjcOpX4.png"><br>不明晰的分类<br><img src="https://i.imgur.com/3ukERIc.png"><br>统计<br><img src="https://i.imgur.com/AOWcRLs.png"><br>均值<br><img src="https://i.imgur.com/b8xnAQ6.png"><br><img src="https://i.imgur.com/3jxJERb.png"><br>筛选条件</p><h3 id="SQL-DQL排序查询"><a href="#SQL-DQL排序查询" class="headerlink" title="SQL -DQL排序查询"></a>SQL -DQL排序查询</h3><h4 id="一、语法-1"><a href="#一、语法-1" class="headerlink" title="一、语法"></a>一、语法</h4><p><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code><br><img src="https://i.imgur.com/1wJvKu8.png"><br>升序<br><img src="https://i.imgur.com/FFf6v53.png"><br>降序<br><img src="https://i.imgur.com/XmJvbE3.png"><br>同样指标的二次排序</p><h3 id="SQL-DQL分页查询"><a href="#SQL-DQL分页查询" class="headerlink" title="SQL -DQL分页查询"></a>SQL -DQL分页查询</h3><p>SQL 中进行分页查询的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">```SQL</span><br><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/rlj4KQg.png"><br><img src="https://i.imgur.com/lq35fuz.png"><br><img src="https://i.imgur.com/Sb8AcUM.png"></p><p>练习：<br><img src="https://i.imgur.com/1XYX7ow.png"><br><img src="https://i.imgur.com/zN2T16r.png"><br><img src="https://i.imgur.com/3IztUw7.png"><br><img src="https://i.imgur.com/iKEBEmK.png"><br><img src="https://i.imgur.com/o4SCN7D.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名列表 WHERE 条件列表 GROUP BY 分组字段列表 HAVING 分组后条件列表 ORDER BY 排序字段列表 LIMIT 分页参数</span><br></pre></td></tr></table></figure><h2 id="2-1-4-DCL"><a href="#2-1-4-DCL" class="headerlink" title="2.1.4 DCL"></a>2.1.4 DCL</h2><p> 一、定义<br>DCL，英文全称Data Control Language，即数据控制语言 。其作用是管理数据库用户，控制数据库的访问权限。<br><img src="https://i.imgur.com/colPAeS.png"><br> 二、图示理解<br>从图中可见，存在不同用户（如itcast、heima ）与MySQL数据库服务器（包含A、B、C等数据存储部分）。DCL就是用来决定这些用户对数据库服务器中不同数据部分，拥有怎样的访问权限，比如哪些用户可以读取、写入特定的数据区域等。 </p><h3 id="SQL-DCL管理用户"><a href="#SQL-DCL管理用户" class="headerlink" title="SQL - DCL管理用户"></a>SQL - DCL管理用户</h3><h4 id="一、查询用户"><a href="#一、查询用户" class="headerlink" title="一、查询用户"></a>一、查询用户</h4><p>使用以下SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>先切换到<code>mysql</code>数据库，再从<code>user</code>表中查询所有用户信息。<br><img src="https://i.imgur.com/vWnaMqM.png"><br><img src="https://i.imgur.com/1bQh10H.png"><br><img src="https://i.imgur.com/jt4uNXK.png"><br>默认四个用户</p><h4 id="二、创建用户"><a href="#二、创建用户" class="headerlink" title="二、创建用户"></a>二、创建用户</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用于创建新的数据库用户，需指定用户名、允许登录的主机以及用户密码。<br><img src="https://i.imgur.com/Cci0O5D.png"><br>只能在本机访问<br><img src="https://i.imgur.com/tpl1a4O.png"><br><img src="https://i.imgur.com/c6KFKv9.png"><br><img src="https://i.imgur.com/2BXITRy.png"><br>没有权限<br><img src="https://i.imgur.com/2DdKuyf.png"><br><img src="https://i.imgur.com/Pwzfm5O.png"></p><h4 id="三、修改用户密码"><a href="#三、修改用户密码" class="headerlink" title="三、修改用户密码"></a>三、修改用户密码</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可修改指定用户的登录密码，<code>mysql_native_password</code>是MySQL的一种密码验证插件 。<br><img src="https://i.imgur.com/T7h8JVs.png"></p><h4 id="四、删除用户"><a href="#四、删除用户" class="headerlink" title="四、删除用户"></a>四、删除用户</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用于删除指定的数据库用户。<br><img src="https://i.imgur.com/4JqbaHA.png"><br><img src="https://i.imgur.com/UO2cxIW.png"></p><h3 id="SQL-DCL权限控制"><a href="#SQL-DCL权限控制" class="headerlink" title="SQL - DCL权限控制"></a>SQL - DCL权限控制</h3><p>在MySQL中，DCL用于进行权限控制，常用权限如下：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><h1 id="SQL-DCL权限控制-1"><a href="#SQL-DCL权限控制-1" class="headerlink" title="SQL - DCL权限控制"></a>SQL - DCL权限控制</h1><p> 一、查询权限<br>使用语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用于查看指定用户在对应主机上拥有的权限。<br><img src="https://i.imgur.com/4DtolMn.png"></p><p> 二、授予权限<br>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可将指定的权限（如SELECT、INSERT等 ）授予特定用户对指定数据库和表进行操作。<br><img src="https://i.imgur.com/2eSHrZp.png"></p><p> 三、撤销权限<br>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用于收回指定用户对特定数据库和表的某些权限。 <img src="https://i.imgur.com/M4YFbCJ.png"><br><img src="https://i.imgur.com/5ri0lOF.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-1-SQL通用语句-flashcard&quot;&gt;&lt;a href=&quot;#2-1-SQL通用语句-flashcard&quot; class=&quot;headerlink&quot; title=&quot;2.1 SQL通用语句 #flashcard&quot;&gt;&lt;/a&gt;2.1 SQL通用语句 #flashcard</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库：第一章 数据库相关概念</title>
    <link href="https://nagoriyuki0408.github.io/2025/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9AMySql/"/>
    <id>https://nagoriyuki0408.github.io/2025/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9AMySql/</id>
    <published>2025-05-11T00:56:48.000Z</published>
    <updated>2025-05-11T00:59:21.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL概述"><a href="#1-MySQL概述" class="headerlink" title="1. MySQL概述"></a>1. MySQL概述</h1><h2 id="1-1-数据库相关概念"><a href="#1-1-数据库相关概念" class="headerlink" title="1.1 数据库相关概念"></a>1.1 数据库相关概念</h2><p><strong>什么是数据库？</strong>  #flashcard<br>数据库（Database）是一个有组织的数据集合，用于存储和管理信息。 它可以让你以结构化的方式存储、检索、更新和删除数据。 想象一下，它就像一个电子化的文件柜，可以高效地存储和查找各种信息。</p><!--ID: 1744130598815--><p><strong>核心概念：</strong> #flashcard </p><ul><li><strong>数据 (Data):</strong>  数据库中存储的基本元素，可以是任何类型的信息，例如文本、数字、日期、图像等。</li><li><strong>数据库管理系统 (DBMS):</strong>  用于创建、管理和访问数据库的软件。 MySQL 就是一种 DBMS。 其他常见的 DBMS 包括 PostgreSQL、Oracle、SQL Server 等。</li><li><strong>SQL (Structured Query Language):</strong>  用于与数据库进行交互的标准化语言。 可以使用 SQL 来查询、插入、更新和删除数据。</li><li><strong>表 (Table):</strong>  数据库中存储数据的基本单元。 表格由行和列组成，类似于电子表格。</li><li><strong>行 (Row) &#x2F; 记录 (Record):</strong>  表中的一行数据，代表一个实体或对象的信息。</li><li><strong>列 (Column) &#x2F; 字段 (Field):</strong>  表中的一列数据，代表实体或对象的某个属性。</li><li><strong>主键 (Primary Key):</strong>  用于唯一标识表中每一行的列。 主键的值不能重复，也不能为空。</li><li><strong>外键 (Foreign Key):</strong>  用于建立表与表之间关系的列。 外键指向另一个表的主键。</li><li><strong>索引 (Index):</strong>  一种数据结构，用于加速数据库的查询速度。 类似于书籍的目录，可以快速定位到需要的数据。</li><li><strong>事务 (Transaction):</strong>  一系列数据库操作的集合，要么全部成功执行，要么全部失败回滚。 事务保证了数据的完整性和一致性。</li><li><strong>模式 (Schema):</strong>  数据库的结构定义，包括表、列、数据类型、关系等。<br><img src="https://i.imgur.com/24p8DZW.png"><!--ID: 1744130598825--></li></ul><h2 id="1-2-MySQL"><a href="#1-2-MySQL" class="headerlink" title="1.2 MySQL"></a>1.2 MySQL</h2><h3 id="1-2-1-MySQL的下载"><a href="#1-2-1-MySQL的下载" class="headerlink" title="1.2.1 MySQL的下载"></a>1.2.1 MySQL的下载</h3><p><img src="https://i.imgur.com/J5BtKvY.png"></p><p>下载社区版本<br><img src="https://i.imgur.com/SBDMeCM.png"><br><img src="https://i.imgur.com/Z1ZCD3w.png"><br><img src="https://i.imgur.com/7YBKjYs.png"></p><ol><li><img src="https://i.imgur.com/PE6ZnrH.png"></li><li><img src="https://i.imgur.com/50TKXiy.png"></li><li>安装选中的这些包<img src="https://i.imgur.com/5oY92R6.png"><img src="https://i.imgur.com/uSfnajk.png"></li><li><img src="https://i.imgur.com/xS55uwm.png"></li><li><img src="https://i.imgur.com/ZaSMdVr.png" alt="shiokou0408"></li><li><img src="https://i.imgur.com/uJRLAAm.png"></li><li>以录到底，直接运行<img src="https://i.imgur.com/tr7kdlb.png"></li></ol><p>安装完成</p><h3 id="1-2-2-MySQL的启动与停止-flashcard"><a href="#1-2-2-MySQL的启动与停止-flashcard" class="headerlink" title="1.2.2 MySQL的启动与停止 #flashcard"></a>1.2.2 MySQL的启动与停止 #flashcard</h3><p><img src="https://i.imgur.com/244bfRx.png"></p><!--ID: 1744130598833--><p><img src="https://i.imgur.com/LneMvbr.png"></p><p>直接右键操作可查看 MySQL 数据库运行相关情况。也可通过命令行操作：</p><ul><li>启动：<code>net start mysql80</code></li><li>停止：<code>net stop mysql80</code><br>mysql80是在注册为windows系统时的名称。<br><img src="https://i.imgur.com/fY1HYMq.png"></li></ul><h3 id="1-2-3-客户端连接-flashcard"><a href="#1-2-3-客户端连接-flashcard" class="headerlink" title="1.2.3 客户端连接 #flashcard"></a>1.2.3 客户端连接 #flashcard</h3><p>方法一：使用MySQL提供的客户端命令行工具。</p><!--ID: 1744130598841--><!--⚠️Imgur upload failed, check dev console--><p>![[Pasted image 20250408163939.png]]<img src="https://i.imgur.com/j5ek70w.png"><br><img src="https://i.imgur.com/IEH5HCl.png"></p><p><strong>方式二：windows系统自带命令行工具连接</strong><br>指令：<code>mysql [-h 127.0.0.1] [-P 3306] -u root -p</code></p><ul><li><code>mysql</code>：启动 MySQL 客户端命令。</li><li><code>-h 127.0.0.1</code>：<code>-h</code> 用于指定连接主机地址，<code>127.0.0.1</code> 代表本地主机。</li><li><code>-P 3306</code>：<code>-P</code>（大写）指定连接端口，MySQL 默认端口为 3306 。</li><li><code>-u root</code>：<code>-u</code> 用于指定用户名，<code>root</code> 为 MySQL 超级用户账号。</li><li><code>-p</code>：表示后续需输入密码。<br>使用这种方法，得配置MySQL的环境变量。<br>[[MySQl的环境变量]]</li></ul><h3 id="1-2-3-数据模型-flashcard"><a href="#1-2-3-数据模型-flashcard" class="headerlink" title="1.2.3 数据模型 #flashcard"></a>1.2.3 数据模型 #flashcard</h3><p><strong>客户端与 DBMS 关系</strong></p><ul><li>客户端通过 DBMS（数据库管理系统）与数据库交互，如左侧图示，客户端设备（两台电脑）借助 DBMS（齿轮图标代表其管理运作功能 ）来操作数据库。<!--ID: 1744130598849--></li></ul><p><strong>数据库示例</strong> #flashcard </p><ul><li>数据库可存储不同类型数据记录，如图右侧表格：<ul><li>上方表格存储数据库相关信息，含 <code>id</code>、<code>name</code>（数据库名称，如 MySQL ）、<code>price</code>（价格 ）、<code>type</code>（类型 ）字段，示例记录有 MySQL 价格 100 等。</li><li>下方表格存储人员信息，有 <code>id</code>、<code>name</code>（人名 ）、<code>age</code>（年龄 ）、<code>gender</code>（性别 ）字段 ，如令狐冲 28 岁男性等记录。<br>  <img src="https://i.imgur.com/3KmrfBn.png"><br>  关系型数据库  <!--ID: 1744130598858--></li></ul></li></ul><p><strong>什么是关系型数据库？</strong> #flashcard<br>关系型数据库 (Relational Database) 是一种基于关系模型的数据库。 关系模型使用表格（也称为关系）来表示数据和数据之间的关系。 它是目前最常用的一种数据库类型。<br><img src="https://i.imgur.com/kJIqQcC.png"><br>二维表就是像电子表格一样，用行和列来组织数据的表格。 每行代表一个东西，每列代表这个东西的一个属性。 简单、直观、好用！<br><strong>特点：</strong></p><ul><li><strong>数据结构化：</strong> 数据以表格的形式存储，结构清晰，易于理解和管理。</li><li><strong>数据完整性：</strong> 通过主键、外键、约束等机制保证数据的完整性和一致性。</li><li><strong>ACID 特性：</strong> 关系型数据库支持 ACID 事务，保证数据的可靠性。<ul><li><strong>原子性 (Atomicity):</strong>  事务中的所有操作要么全部成功，要么全部失败。</li><li><strong>一致性 (Consistency):</strong>  事务执行前后，数据库的状态必须保持一致。</li><li><strong>隔离性 (Isolation):</strong>  多个事务并发执行时，每个事务都应该感觉不到其他事务的存在。</li><li><strong>持久性 (Durability):</strong>  事务一旦提交，其结果就应该永久保存，即使系统发生故障也不会丢失。</li></ul></li><li><strong>SQL 支持：</strong> 使用 SQL 作为标准查询语言，易于学习和使用。<!--ID: 1744130598866--></li></ul><p><strong>核心概念：</strong> #flashcard </p><ul><li><strong>关系模型 (Relational Model):</strong>  关系型数据库的基础理论。 它将数据组织成表格，表格由行和列组成。</li><li><strong>表 (Table):</strong>  数据库中存储数据的基本单元。 每个表代表一个实体或对象，例如客户、订单、产品等。</li><li><strong>行 (Row) &#x2F; 记录 (Record):</strong>  表中的一行数据，代表一个实体或对象的具体信息。</li><li><strong>列 (Column) &#x2F; 字段 (Field):</strong>  表中的一列数据，代表实体或对象的某个属性。</li><li><strong>主键 (Primary Key):</strong>  用于唯一标识表中每一行的列。 主键的值不能重复，也不能为空。</li><li><strong>外键 (Foreign Key):</strong>  用于建立表与表之间关系的列。 外键指向另一个表的主键。</li><li><strong>关系 (Relationship):</strong>  表与表之间的联系。 关系可以是：<ul><li><strong>一对一 (One-to-One):</strong>  一个表中的一条记录对应另一个表中的一条记录。</li><li><strong>一对多 (One-to-Many):</strong>  一个表中的一条记录对应另一个表中的多条记录。</li><li><strong>多对多 (Many-to-Many):</strong>  一个表中的多条记录对应另一个表中的多条记录。 通常需要一个中间表来建立多对多关系。</li></ul></li><li><strong>SQL (Structured Query Language):</strong>  用于与关系型数据库进行交互的标准化语言。 可以使用 SQL 来查询、插入、更新和删除数据。</li></ul><p> 数据模型 #flashcard<br><img src="https://i.imgur.com/PhpEO1q.png"></p><ol><li><strong>客户端 - DBMS - 数据库关系</strong><ul><li>客户端（如电脑设备）通过数据库管理系统（DBMS）与数据库进行交互。DBMS 如同中间桥梁，管理和控制客户端对数据库的访问与操作。</li></ul></li><li><strong>数据库内容示例</strong><ul><li><strong>数据库相关信息表</strong>：<ul><li>字段包括 <code>id</code>、<code>name</code>、<code>price</code>、<code>type</code> 。</li><li>示例数据：<code>id</code> 为 1 时，<code>name</code> 是 MySQL，<code>price</code> 为 100，<code>type</code> 是数据库 ；还有 Oracle 等相关记录。</li></ul></li><li><strong>人员信息表</strong>：<ul><li>字段包括 <code>id</code>、<code>name</code>、<code>age</code>、<code>gender</code> 。</li><li>示例数据：记录了令狐冲（28 岁，男）、风清扬（68 岁，男）、东方不败（32 岁，男）等信息。  <!--ID: 1744130598878--></li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-MySQL概述&quot;&gt;&lt;a href=&quot;#1-MySQL概述&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL概述&quot;&gt;&lt;/a&gt;1. MySQL概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-数据库相关概念&quot;&gt;&lt;a href=&quot;#1-1-数据库相关概念&quot;</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://nagoriyuki0408.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.006 Introduction to Algorithms</title>
    <link href="https://nagoriyuki0408.github.io/2025/01/17/Algorithms/"/>
    <id>https://nagoriyuki0408.github.io/2025/01/17/Algorithms/</id>
    <published>2025-01-16T17:04:24.000Z</published>
    <updated>2025-01-16T17:15:42.576Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Lecture Overview</strong></p><p>• Administrivia </p><p>•Course Overview </p><p>•“Peak finding” problem — 1D and 2D versions</p><p><strong>Course Overview</strong></p><p>This course covers: </p><ol><li><p>Efficient procedures for solving problems on large inputs (Ex: U.S. Highway Map, Human Genome) </p></li><li><p>Scalability </p></li><li><p>Classic data structures and elementary algorithms (CLRS text) </p></li><li><p>Real implementations in Python </p></li><li><p>Fun problem sets!</p></li></ol><p>The course is divided into 8 modules — <strong>each of which has a motivating problem and problem set(s) (except for the last module)</strong>. Tentative module topics and motivating problems are as described below:</p><ol><li>Algorithmic Thinking: Peak Finding</li><li>Sorting &amp; Trees: Event Simulation</li><li>Hashing: Genome Comparison</li><li>Numerics:  RSA Encryption</li><li>Graphs: Rubik’s Cube</li><li>Shortest Paths: Caltech → MIT</li><li>Dynamic Programming: Image Compression</li><li>Advanced Topics</li></ol><p><strong>Peak Finder</strong></p><p><strong>One-dimensional Version</strong></p><p>Position 2 is a peak if and only if b ≥ a and b ≥ c. Position 9 is a peak if i ≥ h.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Lecture Overview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•	 Administrivia &lt;/p&gt;
&lt;p&gt;•	Course Overview &lt;/p&gt;
&lt;p&gt;•	“Peak finding” problem — 1D and 2D versions</summary>
      
    
    
    
    
    <category term="Data Structure" scheme="https://nagoriyuki0408.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>韩语</title>
    <link href="https://nagoriyuki0408.github.io/2024/12/05/%E9%9F%A9%E8%AF%AD/"/>
    <id>https://nagoriyuki0408.github.io/2024/12/05/%E9%9F%A9%E8%AF%AD/</id>
    <published>2024-12-05T04:14:08.000Z</published>
    <updated>2024-12-05T04:18:46.217Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>1. 辅音字母（14个）</strong></p><table><thead><tr><th>字母</th><th>发音（近似拼音）</th><th>说明</th></tr></thead><tbody><tr><td>ㄱ</td><td>g&#x2F;k</td><td>类似拼音“哥”或“科”</td></tr><tr><td>ㄴ</td><td>n</td><td>类似拼音“呢”</td></tr><tr><td>ㄷ</td><td>d&#x2F;t</td><td>类似拼音“的”或“特”</td></tr><tr><td>ㄹ</td><td>r&#x2F;l</td><td>类似拼音“勒”或“热”</td></tr><tr><td>ㅁ</td><td>m</td><td>类似拼音“么”</td></tr><tr><td>ㅂ</td><td>b&#x2F;p</td><td>类似拼音“波”或“坡”</td></tr><tr><td>ㅅ</td><td>s</td><td>类似拼音“思”</td></tr><tr><td>ㅇ</td><td>ng&#x2F;无音</td><td>词首无音，词尾“昂”</td></tr><tr><td>ㅈ</td><td>j&#x2F;ch</td><td>类似拼音“鸡”或“吃”</td></tr><tr><td>ㅊ</td><td>ch</td><td>比ㅈ稍强，类似“敕”</td></tr><tr><td>ㅋ</td><td>k</td><td>比ㄱ稍强，类似“克”</td></tr><tr><td>ㅌ</td><td>t</td><td>比ㄷ稍强，类似“特”</td></tr><tr><td>ㅍ</td><td>p</td><td>比ㅂ稍强，类似“破”</td></tr><tr><td>ㅎ</td><td>h</td><td>类似拼音“喝”</td></tr></tbody></table><hr><h3 id="2-元音字母（10个）"><a href="#2-元音字母（10个）" class="headerlink" title="2. 元音字母（10个）"></a><strong>2. 元音字母（10个）</strong></h3><table><thead><tr><th>字母</th><th>发音（近似拼音）</th><th>说明</th></tr></thead><tbody><tr><td>ㅏ</td><td>a</td><td>类似拼音“啊”</td></tr><tr><td>ㅑ</td><td>ya</td><td>类似拼音“呀”</td></tr><tr><td>ㅓ</td><td>eo</td><td>类似拼音“喔”</td></tr><tr><td>ㅕ</td><td>yeo</td><td>类似拼音“要”</td></tr><tr><td>ㅗ</td><td>o</td><td>类似拼音“哦”</td></tr><tr><td>ㅛ</td><td>yo</td><td>类似拼音“哟”</td></tr><tr><td>ㅜ</td><td>u</td><td>类似拼音“乌”</td></tr><tr><td>ㅠ</td><td>yu</td><td>类似拼音“雨”</td></tr><tr><td>ㅡ</td><td>eu</td><td>类似拼音“呃”</td></tr><tr><td>ㅣ</td><td>i</td><td>类似拼音“一”</td></tr></tbody></table><hr><h3 id="3-复合元音（11个）"><a href="#3-复合元音（11个）" class="headerlink" title="3. 复合元音（11个）"></a><strong>3. 复合元音（11个）</strong></h3><table><thead><tr><th>字母</th><th>发音（近似拼音）</th><th>说明</th></tr></thead><tbody><tr><td>ㅐ</td><td>ae</td><td>类似拼音“哎”</td></tr><tr><td>ㅒ</td><td>yae</td><td>类似拼音“噎”</td></tr><tr><td>ㅔ</td><td>e</td><td>类似拼音“欸”</td></tr><tr><td>ㅖ</td><td>ye</td><td>类似拼音“耶”</td></tr><tr><td>ㅘ</td><td>wa</td><td>类似拼音“哇”</td></tr><tr><td>ㅙ</td><td>wae</td><td>类似拼音“歪”</td></tr><tr><td>ㅚ</td><td>oe</td><td>类似拼音“喂”</td></tr><tr><td>ㅝ</td><td>wo</td><td>类似拼音“窝”</td></tr><tr><td>ㅞ</td><td>we</td><td>类似拼音“为”</td></tr><tr><td>ㅟ</td><td>wi</td><td>类似拼音“位”</td></tr><tr><td>ㅢ</td><td>ui</td><td>类似拼音“衣”</td></tr></tbody></table><hr><h3 id="4-双辅音（5个，紧音辅音）"><a href="#4-双辅音（5个，紧音辅音）" class="headerlink" title="4. 双辅音（5个，紧音辅音）"></a><strong>4. 双辅音（5个，紧音辅音）</strong></h3><table><thead><tr><th>字母</th><th>发音（近似拼音）</th><th>说明</th></tr></thead><tbody><tr><td>ㄲ</td><td>gg</td><td>比ㄱ更紧，发音较用力</td></tr><tr><td>ㄸ</td><td>dd</td><td>比ㄷ更紧，发音较用力</td></tr><tr><td>ㅃ</td><td>bb</td><td>比ㅂ更紧，发音较用力</td></tr><tr><td>ㅆ</td><td>ss</td><td>比ㅅ更紧，发音较用力</td></tr><tr><td>ㅉ</td><td>jj</td><td>比ㅈ更紧，发音较用力</td></tr></tbody></table><hr><h3 id="韩文字母特点"><a href="#韩文字母特点" class="headerlink" title="韩文字母特点"></a><strong>韩文字母特点</strong></h3><ul><li><p>组合方式</p><p>：韩文字母通过将辅音和元音按一定规则组合成音节，例如：</p><ul><li>“가” &#x3D; ㄱ (g) + ㅏ (a)</li><li>“안” &#x3D; ㅇ (无音) + ㅏ (a) + ㄴ (n)</li></ul></li><li><p><strong>简单高效</strong>：韩文字母由世宗大王发明，旨在使文字便于学习和使用。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;1. 辅音字母（14个）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字母&lt;/th&gt;
&lt;th&gt;发音（近似拼音）&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ㄱ&lt;/td&gt;
&lt;</summary>
      
    
    
    
    
    <category term="多语言学习" scheme="https://nagoriyuki0408.github.io/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>力扣3250单调数组对的数目1</title>
    <link href="https://nagoriyuki0408.github.io/2024/11/28/%E5%8A%9B%E6%89%A33250%E5%8D%95%E8%B0%83%E6%95%B0%E7%BB%84%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE1/"/>
    <id>https://nagoriyuki0408.github.io/2024/11/28/%E5%8A%9B%E6%89%A33250%E5%8D%95%E8%B0%83%E6%95%B0%E7%BB%84%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE1/</id>
    <published>2024-11-28T07:55:58.000Z</published>
    <updated>2024-11-30T20:04:59.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3250-单调数组对的数目-I"><a href="#3250-单调数组对的数目-I" class="headerlink" title="3250. 单调数组对的数目 I"></a><a href="https://leetcode.cn/problems/find-the-count-of-monotonic-pairs-i/">3250. 单调数组对的数目 I</a></h2><p>给你一个长度为 <code>n</code> 的 <strong>正</strong> 整数数组 <code>nums</code> 。</p><p>如果两个 <strong>非负</strong> 整数数组 <code>(arr1, arr2)</code> 满足以下条件，我们称它们是 <strong>单调</strong> 数组对：</p><ul><li>两个数组的长度都是 <code>n</code> 。</li><li><code>arr1</code> 是单调 <strong>非递减</strong> 的，换句话说 <code>arr1[0] &lt;= arr1[1] &lt;= ... &lt;= arr1[n - 1]</code> 。</li><li><code>arr2</code> 是单调 <strong>非递增</strong> 的，换句话说 <code>arr2[0] &gt;= arr2[1] &gt;= ... &gt;= arr2[n - 1]</code> 。</li><li>对于所有的 <code>0 &lt;= i &lt;= n - 1</code> 都有 <code>arr1[i] + arr2[i] ==· nums[i]</code> 。</li></ul><p>请你返回所有 <strong>单调</strong> 数组对的数目。</p><p>由于答案可能很大，请你将它对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>nums &#x3D; [2,3,2]</p><p><strong>输出：</strong>4</p><p><strong>解释：</strong></p><p>单调数组对包括：</p><ol><li><code>([0, 1, 1], [2, 2, 1])</code></li><li><code>([0, 1, 2], [2, 2, 0])</code></li><li><code>([0, 2, 2], [2, 1, 0])</code></li><li><code>([1, 2, 2], [1, 1, 0])</code></li></ol><p><strong>示例 2：</strong></p><p><strong>输入：</strong>nums &#x3D; [5,5,5,5]</p><p><strong>输出：</strong>126</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n == nums.length &lt;= 2000</code></li><li><code>1 &lt;= nums[i] &lt;= 50</code></li></ul><p>解决这道题，我面临的第一个问题就是，我读不懂题目，一般来说理解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3250-单调数组对的数目-I&quot;&gt;&lt;a href=&quot;#3250-单调数组对的数目-I&quot; class=&quot;headerlink&quot; title=&quot;3250. 单调数组对的数目 I&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/fi</summary>
      
    
    
    
    
    <category term="力扣" scheme="https://nagoriyuki0408.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
</feed>
