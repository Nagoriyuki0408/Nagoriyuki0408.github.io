<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柳瀬しおこうの夢</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-08T18:06:34.789Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SHIOKOU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gal:神咒神威神乐</title>
    <link href="http://example.com/2024/08/08/Gal-%E7%A5%9E%E5%92%92%E7%A5%9E%E5%A8%81%E7%A5%9E%E4%B9%90/"/>
    <id>http://example.com/2024/08/08/Gal-%E7%A5%9E%E5%92%92%E7%A5%9E%E5%A8%81%E7%A5%9E%E4%B9%90/</id>
    <published>2024-08-07T22:13:19.000Z</published>
    <updated>2024-08-08T18:06:34.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="故事梗概"><a href="#故事梗概" class="headerlink" title="故事梗概"></a>故事梗概</h2><p>建国の起源を遡れば、異形討伐の戦に行き着く神州・葦原中津国。<br>諸将が天子の奉戴を競い合い、数多の血が流れた動乱の時代は、<br>国土の東半に未開の領域が広がっている事実が明るみに出たことで、急転直下を迎える。</p><p>東征戦争。</p><p>建国の英雄憚になぞらえて、穢土を制した者こそが天下を握れる。<br>そうした野望に取り憑かれ、侵攻した諸将たちは、しかし東の軍勢によって敗れ去った。<br>それは常軌を逸したものであり、人知を超えた魔であったという。</p><p>そして三百年。<br>敗北の事実と国家の疲弊を諸外国に悟られぬよう、鎖国体制に入っていた神州だったが、<br>東から流入する陰気の汚染と開国を迫る外異を前に、今や存亡の危機にあった。</p><p>ゆえに陰気を払うべく、そして列強と渡り合うべく、ここに再度の東征が幕を開ける。<br>負けられぬ戦い。<br>湖に塩は不要。<br>それが混ざれば必然として戦が生じる。これは紛れもない生存競争。<br>征夷の将となった久雅竜胆は、汚染によって半異形となった者らを率いて空前の戦に身を投じる。<br>その果てに、彼らはいったい何を見るのか。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>久雅龙胆</p><p>壬生宗次郎</p><p>坂上霸吐</p><p>御门龙水</p><p>御门龙明</p><p>凶月咲耶</p><p>玖锭紫织</p><p>凶月刑士郎</p><p>摩多罗夜行</p><p>中院冷泉</p><h2 id="未定"><a href="#未定" class="headerlink" title="未定"></a>未定</h2><p>前半部分人物对话框是没有人物名称标注的，这让我读文本挺头疼的，不知道这是魔法野马的问题还是游戏本身就这样，希望后面的剧本能有人名吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;故事梗概&quot;&gt;&lt;a href=&quot;#故事梗概&quot; class=&quot;headerlink&quot; title=&quot;故事梗概&quot;&gt;&lt;/a&gt;故事梗概&lt;/h2&gt;&lt;p&gt;建国の起源を遡れば、異形討伐の戦に行き着く神州・葦原中津国。&lt;br&gt;諸将が天子の奉戴を競い合い、数多の血が流れた動乱の時代は</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>思考方式</title>
    <link href="http://example.com/2024/08/07/%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/08/07/%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/</id>
    <published>2024-08-06T21:07:24.000Z</published>
    <updated>2024-08-08T18:06:32.944Z</updated>
    
    <content type="html"><![CDATA[<p> s</p><p>有具体的问题，不要说大道理</p><p>生产资料造就了依附关系，人际交往需要做到对等交换（底层逻辑），制造公平交换的机会，回避不公平交换。交换是一种基于</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; s&lt;/p&gt;
&lt;p&gt;有具体的问题，不要说大道理&lt;/p&gt;
&lt;p&gt;生产资料造就了依附关系，人际交往需要做到对等交换（底层逻辑），制造公平交换的机会，回避不公平交换。交换是一种基于&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="思考方式" scheme="http://example.com/tags/%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>汉化：文言虚词</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E8%99%9A%E8%AF%8D/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E8%99%9A%E8%AF%8D/</id>
    <published>2024-08-06T01:38:04.000Z</published>
    <updated>2024-08-06T01:38:15.029Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、 之</strong></p><p>01、作助词用。主要用法有三种类型：</p><p>(1)相当于“的”，是定语的标志。</p><p>例如：①菊之爱，陱后鲜有闻。③水陆草木之花。</p><p>(2)用在主谓之间，取消句子独立性，起舒缓语气作用，无实义。</p><p>例如：①予独爱莲之出淤泥而不染。②无丝竹之乱耳，无案牍之劳形。</p><p>(3)起补足调音节和舒缓语气作用，无实义。</p><p>例如：①公将鼓之。②久之。③怅恨久之。</p><p>02、作代词用。（可以代人，代事，代物）</p><p>(1)人称代词，相当于现代汉语“我”、“他们”、“她们”、“它”、“它们”。</p><p>例如：①具答之。②亲戚畔之。③彼竭我盈，故克之。</p><p>(2)指示代词，相当于现代汉语“这”、“这样”“这件事”、“那”、“那样”等。</p><p>例如：①渔为甚异之。</p><p>(3)作动词用。相当于“到”、“往”、“去”。</p><p>例如：①辍耕之垄上。②送杜少府之任蜀州。</p><p>03、语法作用。</p><p>（1）宾语前置的标志，无实义。例如：①何陋之有？②宋何罪之有？</p><p>（2）定语后置标志，无实义。如：①马之千里者。②居庙堂之高则忧其民。</p><p><strong>二、 乎</strong></p><p>(1)语气词（一般用在句未）</p><p>表提问或反问，也可表猜测、感叹。如：</p><p>①死国可乎？②王侯将相宁有种乎？③是亦不可以已乎！</p><p>(2)介词（一般用在句中）</p><p>类似于“于”的用法。如：</p><p>①在乎山水之间也②颓然乎其间者</p><p><strong>三、 者</strong></p><p>1、结构助词</p><p>译“……的人”“……的事物”“……的情况”等，相当于名词性短语。如：</p><p>①若有作奸犯科及为忠善者，宜付有司论其刑赏。</p><p>2、语气助词，</p><p>用在作主语的名词或名词性短语之后表示停顿，谓语部分一般用“也”字结尾，起判断作用。如：</p><p>①陈胜者，阳城人也，字涉。②北山愚公者，年且九十。</p><p><strong>四、以</strong></p><p><strong>1、用作介词</strong></p><p>表示动作行为所涉及的的工具、物件、时间等可以译为“把”、“用”、“拿”、“在”、“从”等，或表示动作、行为所凭借的条件，译为“靠”、“凭借”、“根据”等。如：</p><p>（1）何以战？&#x2F;&#x2F;域民不以封疆之界。——凭借</p><p>（2）虽不能察，必以情。&#x2F;&#x2F;策之不以其道。——根据</p><p><strong>2、作连词</strong></p><p>表目的时，可译作“（用）来”,“以便”； 表顺接时，相当于“而”；表结果时，可译作“以致”；</p><p>表原因时，可译作“由于”、“因为”。如：</p><p>（1）属予作文以记之——（用）来</p><p>（2）以伤先帝之明——以致</p><p>（3）不以物喜，不以己悲。——因为</p><p>（4）卷石底以出。——相当于“而”</p><p><strong>3、用作动词</strong></p><p>可译作“认为”。如：</p><p>（1）皆以美于徐公。</p><p><strong>4、特殊用法：</strong></p><p>通假字，通“已”,已经。如：固以怪之矣。</p><p><strong>五、而</strong></p><p>1表顺接关系的连词</p><p>1、并列关系，一般不译，有时可译为“又”。</p><p>如：温故而知新，可以为师矣 《（论语）十则》）</p><p>2、承接关系</p><p>可译作“就”“接着”，或不译。</p><p>如：环而攻之而不胜。前一个“而”就表示承接关系。</p><p>3、递进关系</p><p>译作“而且”“并且”或不译。</p><p>如： ①饮少辄醉，而年又最高，故自号曰醉翁也（《醉翁亭记》）</p><p>②学而时习之，不亦说乎？</p><p>4、修饰关系</p><p>可译为“地”“着”，或不译。</p><p>如：①河曲智叟笑而止之曰②面山而居。</p><p>表转接关系的连词，译作“但是”“可是”“却”。</p><p>如：(1)可远观而不可亵玩焉。</p><p>(2)人不知而不愠，不亦君子乎？</p><p>(3)学而不思则罔</p><p><strong>六、其</strong></p><p><strong>1、代词</strong></p><p>(1)表示第三人称，译作“他”“他的”“他们”“他们的”“它”“它们”“它们的”。</p><p>①择其善者而从之，其不善者而改之。</p><p>(2)指示代词，可译为“那”“那个”“那些”“那里”；也可表示“其中的”，后面多为数词。</p><p>①其人视端容寂，若听茶声然。</p><p>②复前行，欲穷其林。</p><p>③其一犬坐于前。</p><p><strong>2、副词</strong></p><p>放在句首或句中，表示测度、反诘、婉商、期望等语气，常和放在句末的语气词配合，视情况可译为“大概”“或许”“恐怕”“一定”“怎么”“难道”等，或省去。</p><p>①其真无马耶？可译作：“难道”</p><p>②其真不知马也。可译为：大概</p><p>③其必曰：“先天下之忧而忧，后天下之乐而乐”乎。其：可译为“恐怕”。</p><p>④安陵君其许寡人！其：可译为“一定”。</p><p><strong>七、为</strong></p><p><strong>1、作介词时</strong></p><p>除表被动外都读作wèi，可译作“被”、“对”、“给”、“替”、“当”，“为了”、“因为”等。</p><p>如：①舌一吐而二虫尽为所吞&#x2F;&#x2F;山峦为晴雪所洗（wéi，被。）</p><p>②不足为外人道也。（wèi“向”“对”）</p><p>③为楚造云梯之械。（wèi，“给”）</p><p>④为其来也，臣请缚一人过王而行。(wèi，“当”)</p><p>⑤问渠哪得清如许，为有源头活水来（《观书有感》wèi，因为，由于）</p><p><strong>2、当“为”作动词时</strong></p><p>读wéi，可依据语境的不同，译成各种相应的动词，如：“做”，“当作”、“成为”，“雕刻”，“是”等。如：</p><p>①中峨冠而多髯者，为东坡。（是）</p><p>②温故而知新，可以为师矣。（当，成为）</p><p>③为宫室、器皿。（雕刻）</p><p>④通计一舟，为人五，为窗八。（有）</p><p>⑤橘生淮南则为橘，生淮北则为枳（称为，叫做）</p><p>⑥为小门于大门之侧而延晏子（造）</p><p><strong>3、特殊用法：</strong></p><p>或异二者之为，何哉？（名词，心理活动）</p><p><strong>八、于</strong></p><p><strong>1、引进动作</strong></p><p>时间、处所、范围、对象、方面、原因等，可灵活地译为“在”、“向”、“到”、“从”、“跟”、“对”、“给”等。例如：</p><p>①苟全性命于乱世，不求闻达于诸侯。（在）</p><p>②未尝不叹息痛恨于桓灵也（对）</p><p>③舜发于畎亩之中（从）</p><p>④欲报之于陛下也（向）</p><p><strong>2、放在形容词之后</strong></p><p>表示比较，一般可译为“比”，有时可译为“胜过”。</p><p>例如：①人固有一死，或重于太山，或轻于鸿毛</p><p>②皆以美于徐公。</p><p><strong>九、焉</strong></p><p><strong>1、疑问代词</strong></p><p>相当于“怎么”“哪里”。如：不入虎穴，焉得虎子（熟语）</p><p><strong>2、语气助词</strong></p><p>如：寒暑易节，始一反焉（《愚公移山》</p><p><strong>3、代词</strong></p><p>相当于“之”。如：忽啼求之，父异焉（《伤仲永》）</p><p><strong>4、兼词</strong></p><p>相当于“于何”“在哪里”。如：且焉置土石（《愚公移山》）</p><p><strong>5、兼词</strong></p><p>相当于“于此”“在这里”“在那里”。如：夫大国，难测也，惧有伏焉（《曹刿论战》）</p><p><strong>十、虽</strong></p><p>连词“虽”在文言文中主要有两种用法。</p><p><strong>1、表示假设，可译为“即使”。</strong></p><p>如：①虽千里弗敢易也，岂止五百里哉（《唐雎不辱使命》）</p><p>②虽乘奔御风，不以疾也（《三峡》）</p><p><strong>2、表示转折，可译为“虽然”</strong></p><p>如：故余虽愚，卒获有所闻（《送东阳马生序》）</p><p><strong>十一、然</strong></p><p><strong>1、代词，起指示作用，译作“这样”“如此”。</strong></p><p>如：父利其然也（《伤仲永》）</p><p><strong>2、连词，表转折关系，译作“然而”“但是”等。</strong></p><p>如：①然足下卜之鬼乎（《陈涉世家》）</p><p>②然侍卫之臣不懈于内《出师表》</p><p><strong>3、助词</strong></p><p>（1）用在形容词之后，作为词尾，译作“……的样子”。如：</p><p>翼然临于泉上、颓然乎其间者&#x2F;&#x2F;　望之蔚然而深秀者</p><p>（2）用于句尾，常与“如”“若”连用，构成“如……然”“若……然”格式，相当于“……的样子”“好像……似的”。如：</p><p>其人视端容寂，若听茶声然（《核舟记》）</p><p><strong>十二、以</strong></p><p><strong>1. 用作介词</strong></p><p>表示凭借，译为“凭、靠”。例：乃入见。问：“何以战？”（《曹刿论战》）</p><p>表示工具、方式、方法，译为“用、拿、把、按照”。策之不以其道。（《马说》）</p><p><strong>2. 用作连词</strong></p><p>表示并列、承接、修饰，“以”相当于“而”。</p><p>例：俯身倾耳以请</p><p>表示目的，译为“来、用来”。例：属予作文以记之 （《岳阳楼记》）</p><p>表示动作、行为产生的原因，可译为“因”，“因为”，“由于”。</p><p>例：不以物喜，不以己悲。（《岳阳楼记》）</p><p><strong>3. 用作副词</strong></p><p>译为“已”，“已经”。例：固以怪之矣。（《陈涉世家》）</p><p><strong>十三：则</strong></p><p><strong>1．连词</strong></p><p>（1）表示承接关系，可译为“就”。</p><p>例：居庙堂之高则忧其民。（《岳阳楼记》）</p><p>（2）表示假设关系，可译为“如果”，“那么”。</p><p>例：万众则不辩礼义而受之。（《鱼我所欲也》）&#x2F;</p><p>诚如是，则霸业可成。（《出师表》）</p><p>（3）表示转折关系，可译为“却”。</p><p>例：余则蕴袍敝衣处其间。（《送东阳马生序》）</p><p><strong>2．表示判断，可译为“就是”。</strong></p><p>例：此则岳阳楼之大观也。（《岳阳楼记》）</p><p><strong>十四、因</strong></p><p><strong>1. 连词，表示顺接上文，可译为“于是”、“就”。</strong></p><p>例：安陵君因使唐雎使于秦。（《唐雎不辱使命》）</p><p><strong>2. 介词，表示动作、行为发生的原因</strong></p><p>依据、方式，可分别译为“由于”、“凭借”、“依靠”。例：高祖因之以成帝业。（《隆中对》）</p><p><strong>3. 介词，可译为“根据”、“依照”。</strong></p><p>例：罔不因势象形。（《核舟记》）</p><p><strong>4. 副词，可译为“因此”。</strong></p><p>例：因以为号焉。（《五柳先生传》）</p><p><strong>十五、且</strong></p><p><strong>1. 副词</strong></p><p>（1）用在动词或数词前，表示动作行为将要发生，可译为“将”，“将要”、“将近”。</p><p>例：北山愚公者，年且九十。（《愚公移山》）</p><p>（2）表示行为的状态，可译为“姑且”、“暂且”。</p><p>例：存着且偷生，死者长已矣。（《石壕吏》）</p><p><strong>2．连词</strong></p><p>（1）表示递进，可译为“况且”。例：且焉置土石？（《愚公移山》）</p><p>（2）表示让步，可译为“尚且”、“还”。例：且欲与常马等不可得。（《马说》）</p><p>（3）表示并列或递进，可译为“和”、“而且”、“并且”。例：盖余之勤且艰若此。</p><p><strong>十六、乃</strong></p><p><strong>1．副词</strong></p><p>（1）可译为“竟然”。例：乃不知有汉，无论魏晋。（《桃花源记》）</p><p>（2）可译为“于是”、“才”、“就”。</p><p>例：乃重修岳阳楼。（于是，就）（《岳阳楼记》）</p><p><strong>2．判断词，可译为“是”、“就是”。</strong></p><p>当立者乃公子扶苏。（《陈涉世家》）</p><p><strong>3．第二人称代词，可译为“你”、“你的”。</strong></p><p>例：家祭无忘告乃翁。（《示儿》）</p><p><strong>十七、矣</strong></p><p><strong>1．句末语气词，表示肯定或判断推测语气，</strong>相当于“了”、“啊”。</p><p>例： 温故而知新，可以为师矣。（了）（《论语》十则）</p><p><strong>2．句末语气词，表示感叹语气，相当于“了”。</strong></p><p>例：甚矣，汝之不惠！（了）</p><p><strong>3．语气词，表命令或请求，相当于“了”、“啦”</strong></p><p>例：登轼而望之，曰：“可矣。”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一、 之&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;01、作助词用。主要用法有三种类型：&lt;/p&gt;
&lt;p&gt;(1)相当于“的”，是定语的标志。&lt;/p&gt;
&lt;p&gt;例如：①菊之爱，陱后鲜有闻。③水陆草木之花。&lt;/p&gt;
&lt;p&gt;(2)用在主谓之间，取消句子独立性，起舒缓语气作用，无</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>汉化：文言实词</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E5%AE%9E%E8%AF%8D/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E5%AE%9E%E8%AF%8D/</id>
    <published>2024-08-06T01:36:05.000Z</published>
    <updated>2024-08-06T01:36:54.555Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、爱</strong><br>（1）名词。恩惠。（古之遗爱也《左传》）<br>（2）动词<br>①加惠于人。（吴广素爱人。《陈涉世家》）<br>（此四君者，皆明智而忠信，宽厚而爱人。《过秦论》）<br>②喜爱，爱护。<br>（父母之爱子，则为之计深远。《触龙说赵太后》）<br>（爱其子，择师而教之。《师说》）<br>③吝惜，舍不得。<br>（齐国虽褊小，吾何爱一牛。《齐桓晋文之事》）<br>（不爱珍器重宝肥饶之地。《过秦论》）<br>④怜惜。<br>爱其二毛（怜惜鬓发花白的老人）。（《左传》）<br>国事至此，予不得爱身。（《〈指南录〉后序》）<br>⑤通””，隐蔽，躲藏。<br>爱而不见，搔首踟躇。（《静女》）<br>（3）形容词。吝啬。<br>百姓皆以王为爱也。（《齐桓晋文之事》）</p><p><strong>2、安</strong><br>（1）形容词。<br>①舒适，安适。<br>君子食无求饱，居无求安。（《论语•述而》）<br>予出官二年，怡然自安。（《琵琶行》）<br>②安稳。<br>风雨不动安如山。（《茅屋为秋风所破歌》）<br>③安全。<br>谢庄遂安。（《冯婉贞》）<br>④安定。<br>不患寡而患不均，不患贫而患不安。（《季氏将伐颛臾》）<br>（2）动词。<br>①养生。<br>衣食所安，弗敢专也，必以分人。（《曹刿论战》）<br>②安置，安放。<br>离山十里有王平安营。（《失街亭》）<br>③使……安定。<br>既来之，则安之。（《季氏将伐颛臾》）<br>（3）代词。哪里，怎麽。<br>沛公安在。（《鸿门宴》）<br>燕雀安知鸿鹄之志哉！（《陈涉世家》）</p><p><strong>3、被</strong><br>（1）名词。被子。<br>一日昼寝帐中，落被于地。（《杨修之死》）<br>（2）动词。<br>①覆盖。<br>大雪逾岭，被南越中数州。（《答韦中立论师道书》）<br>未几，成归，闻妻言，如被冰雪。（《促织》）<br>②遭受，遇到。<br>秦王复击轲，被八创。（《荆轲刺秦王》）<br>世之有饥穰，天之行也，禹、汤被之矣。（《论积贮疏》）<br>③施加，施及。<br>去乱而被之以治。（《荀子•不苟》）<br>（3）介词。表示被动。<br>信而见疑，忠而被谤。（《屈原列传》）<br>（4）pi ，通”披”，动词。<br>①穿在身上或披在身上。<br>将军身披坚执锐。（《陈涉世家》）<br>②披散，披着。<br>屈原至于江滨，被发行吟泽畔。（《屈原列传》）</p><p><strong>4、倍</strong><br>（1）动词。<br>①加倍。<br>虽倍赏累罚而不免于乱。（《五蠹》）<br>一人予二十金，骨微伤……一人倍之，伤肤。（《狱中杂记》）<br>②增加。<br>焉用亡邻以倍郑。（《烛之武退秦师》）<br>③通”背”，背向。<br>管仲反，入，倍屏而立，公不与言。（《管子•中匡》）<br>右背山陵。（《淮阴侯列传》）<br>④通”背”，违背。<br>倍道而行，则天下不能使之吉。（《荀子•天论》）<br>⑤背叛。<br>愿伯具言臣之不敢倍德也。（《鸿门宴》）<br>（2）量词。照原数加一次。<br>然言其户口，则视三十年以前增五倍焉。（《治平篇》）<br>今吾以十倍之地，请广于君。（《唐雎不辱使命》）<br>（3）副词。越发，更加，倍加。<br>独在异乡为异客，每逢佳节倍思亲。（《九月九日忆山东兄弟》）</p><p><strong>5、本</strong><br>（1）名词。<br>①草木的根。<br>芙蕖与草木诸花似觉稍异，然有根无树。（《芙蕖》）<br>②草木的干茎。<br>摇其本，以观其疏密。（《种树郭橐驼传》）<br>③根本。<br>父母者，人之本也。（《屈原列传》）<br>然墨之道，兼爱为本。（《中山狼传》）<br>④本业，指农桑。<br>强本而节用。（《天论》）<br>今背本而趋末，食者甚众，是天下之大残也。（《论积贮疏》）<br>⑤稿本。<br>今存其本不忍废。（《〈指南录〉后序》<br>⑥版本。<br>已后典籍皆为板本。（《活板》）<br>⑦奏本。<br>别具本章。（《狱中杂记》）<br>（2）量词。<br>①草木花卉一株称一本。<br>新松郁郁三千本。（陆游诗）<br>②书籍一册称一本。<br>若印数十百千本，则极为神速。（《活板》）<br>（3）动词。推究本原，考查。<br>抑本其成败之迹，而皆自于人欤。（《伶官传序》）<br>（4）形容词。原来的。<br>刘媪本姓实存。（《汉书》）<br>（5）副词。本来，原来。<br>本在冀州之南。（《愚公移山》）<br>柳敬亭者，扬之泰州人，本姓曹。（《刘敬亭传》）<br>（6）复合词。本心：指心的自然状态，本性（即所谓人所固有的羞恶廉耻之心）。<br>此其谓失其本心。（《鱼我所欲也》）<br>（7）介词。本着，根据。<br>本之《书》以求其质。（《答韦中立论师道书》）</p><p><strong>6、鄙</strong><br>（1）名词。边界地方。<br>蜀之鄙有二僧。（《为学》）<br>（2）动词。<br>①以……为边界（边邑）。<br>越国以鄙远，君知其难也。（《烛之武退秦师》）<br>②动词。轻视，看不起。<br>孔子鄙其小器。（《训俭示康》）<br>过我而不假道，鄙我也。（《左传》）<br>（3）形容词。鄙陋，见识浅，庸俗。<br>肉食者鄙。（《曹刿论战》）<br>人贱物亦鄙，不足迎后人。（《孔雀东南飞》）<br>（4）复合词。<br>①鄙人。<br>ⅰ、自称的谦词。<br>唐谢曰：”鄙人不知忌讳。”（《史记•冯唐列传》）<br>ⅱ、鄙俗，不开化的人。<br>北蛮夷之鄙人，未尝见天子，故振慑。（《荆轲刺秦王》）<br>ⅲ、乡下人。<br>余目睹将军悛悛（质朴的样子）如鄙人，口不能道辞。（《史记•李将军列传》）<br>②鄙贱：粗野而又地位低微。<br>鄙贱之人，不知将军宽之至此。（《廉颇蔺相如列传》）</p><p><strong>7、兵</strong><br>（1）名词。<br>①兵器。<br>收天下之兵，聚之咸阳。（《过秦论》）<br>②士兵，军队。<br>可汗大点兵。（《木兰诗》）<br>赵亦盛设兵以待秦，秦不敢动。（《廉颇蔺相如列传》）<br>③战略战术。<br>公不论兵，必大困。（《战国策》）<br>④战争。<br>兵旱相乘，天下大屈。（《论积贮疏》）<br>（2）动词。<br>①侵略。<br>无岁不受兵。（《十八史略》）<br>②以兵器杀人。<br>左右欲兵之。（《史记》）<br>（3）复合词。兵符：古代调兵用的凭证。用铜、玉或木石等制成，状如虎，又称虎符，剖成两半，国君和统帅各掌握一半，以便对证。<br>赢闻晋鄙之兵符常在王卧内。（《信陵君窃符救赵》）</p><p><strong>8、病</strong><br>（1）名词。<br>①重病。<br>君之病在肠胃。（《扁鹊见蔡桓公》）<br>②弊病，缺点。<br>人皆嗤吾固陋，吾不以为病。（《训俭示康》）<br>圣人非所以与熙也，寡人反取病焉。（《晏子使楚》）<br>（2）动词。<br>①生病。<br>凡人不病则不畏惧。（《订鬼》）<br>②使成病态。<br>以夭梅、病梅为业以求钱也。（《病梅馆记》）<br>③担心，忧虑。<br>君子病无能焉，不病人之不己知也。（《论语》）<br>④受困。<br>在陈绝粮，从者病。（《论语》）<br>⑤损害。<br>夫粜，二十病农，九十病末。（《史记•货殖列传》）<br>⑥责备，羞辱。<br>古人以俭为美德，今人乃以俭相诟病。（《训俭示康》）<br>（3）形容词。<br>①困苦。<br>向吾不为斯役，则久已病矣。（《捕蛇者说》）<br>②疲劳。<br>今日病矣，予助苗长矣。（《揠苗助长》）</p><p><strong>9、伯</strong><br>（1）名词。<br>①排行第一的，老大，古人同辈间的伯（孟）、仲、叔、季来排行老大、老二、老三、老四。<br>侯主侯伯，侯亚侯旅。（《诗经•周颂•载芟》）<br>②伯父。<br>汝泊何由发如漆。（杜甫《醉歌行》）<br>③女子对丈夫的尊称。<br>自伯之东，首如飞蓬。（《诗经•卫风•伯兮》）<br>④古代五等爵位的第三等。<br>秦伯素服郊次，乡师而哭。（《崤之战》）<br>⑤古代管理一方的长官。<br>二百一十国为州，州有伯。（《礼记•王制》）<br>⑥bà 通”霸”，春秋时诸侯国联盟的盟主。<br>桓公，五伯之上（首）也，争国而杀兄，其利大也。（《韩非子•难四》）<br>（2）副词。表尊敬。<br>若为河伯娶妇。（《西门豹治邺》）<br>（3）bǎi 数词。通”佰”，一百。<br>亡（没有）农夫之苦，有仟佰之得。（《论贵粟疏》）<br>（4）复合词。伯仲：原指兄弟的次第，后用以比喻不相上下的事物。</p><p><strong>10、曾</strong><br>（1）céng 副词。表时间的过去。曾经，已经，才。<br>江南好，风景旧曾谙。（白居易《忆江南》）<br>（2）zēng<br>①名词。指与自己隔着两代的亲属。<br>是高、曾时为一户者，至曾元时不分至十户不止。（《治平篇》）<br>②动词。通”增”，增加。<br>行拂乱其所为，所以动心忍性，曾益其所不能。（《生于忧患 死于安乐》）<br>③副词。表意外。竟然，居然，简直。<br>汝心之固，固不可彻，曾不若孀妻弱子。（《愚公移山》）</p><p><strong>11、察</strong><br>（1）动词。<br>①细看。<br>徐而察之。（《石钟山记》）<br>②看清楚。<br>明足以察秋毫之末，而不见舆薪。（《齐桓晋文之事》）<br>③详审。<br>向察众人之议，专欲误将军。（《赤壁之战》）<br>④明察，了解。<br>小人之狱，虽不能察，必以情。（《曹刿论战》）<br>⑤考察后加以推荐。<br>察臣孝廉。（《陈情表》）<br>（2）形容词。精明。<br>水至清则无鱼，人至察则无徒。（东方朔《答客难》）<br>（3）叠词。察察：洁净的样子。<br>人谁又能以身之察察，受物之汶汶者乎？（《屈原列传》）</p><p><strong>12、长cháng</strong><br>（1）名词。<br>①长度。<br>舟首尾长约八分有奇。（《核舟记》）<br>②高度。<br>孔子长九尺有六寸。（《史记》）<br>③长处，专长。<br>兼花之长而各去其短。（《芙蕖》）<br>（2）形容词。<br>①长的。<br>北市买长鞭。（《木兰诗》）<br>②高的。<br>今日被驱谴，小姑如我长。（《孔雀东南飞》）<br>③久。<br>天长地久有时尽。（《长恨歌》）<br>④远。<br>道阻且长。（《诗经》）<br>⑤大。<br>愿乘长风破万里浪。（《南史》）<br>⑥辽阔。<br>秋水共长天一色。（《滕王阁序》）<br>（3）动词。擅长。<br>西人长火器而短技击。（《冯婉贞》）<br>（4）副词。常，经常。<br>出师未捷身先死，长使英雄泪满襟。（杜甫《蜀相》）<br>zhǎng （1）动词。<br>①生长。<br>用叶者取叶初长足时。（《采草药》）<br>②抚育。<br>长吾女与汝女，待其嫁，如此而已。（《祭十二郎文》）<br>③增进。<br>教学相长。（《学记三则》）<br>（2）形容词。<br>①年龄大。<br>孰与君少长。（《鸿门宴》）<br>②排行第一的。<br>而长子迈将赴饶之德兴尉，送之至湖口。（《石钟山记》）<br>（3）名词。头领。<br>以三宝勇而多艺，推为长。（《冯婉贞》）</p><p><strong>13、朝</strong><br>cháo<br>（1）动词。<br>①诸侯在春天拜见天子，或臣属在早晨拜见国君。引申为朝见。<br>王夺郑伯政，郑伯不朝。（《左传》）<br>相如每朝时，常称病。（《廉颇蔺相如列传》）<br>②拜访。<br>临邛令谬为恭敬，日往朝相如。（《史记》）<br>③归。<br>江汉朝宗于海。（《尚书》）<br>（2）名词。<br>①朝廷。<br>于是入朝见威王。（《邹忌讽齐王纳谏》）<br>②朝代。指整个王朝，也指某一皇帝的一代。<br>三顾茅庐天下计，两朝开济老臣心。（杜甫《蜀相》）<br>③政事。<br>期年不听朝。（《吕氏春秋》）<br>（3）介词。对，向。<br>坐南朝北。<br>Zhāo<br>（1）名词。早晨。<br>朝发白帝，暮到江陵。（《三峡》）<br>（2）量词。天，日。<br>虽与之天下，不能一朝居也。（《孟子•告子下》）</p><p><strong>14、乘</strong><br>chéng<br>（1）动词，<br>①驾，坐。<br>乘犊车，从吏卒。（《赤壁之战》）<br>独与迈乘小舟至绝壁下。（《石钟山记》）<br>②升，登。<br>乘鄂渚而反顾兮，欤秋冬之绪风。（《涉江》）<br>③趋，顺应。<br>因利乘便，宰割天下，分裂山河。（《过秦论》）<br>④冒着。<br>余以乾隆三十九年十二月，自京师乘风雪，……至于泰安。（《登泰山记》）<br>⑤凭恃、依仗。<br>愿乘长风，破万里浪。（沈括《宋书》）<br>⑥交加，连接。<br>兵旱相乘，天下大屈。（《论积贮疏》）<br>（2）名词。佛教的教派或教法。<br>大乘佛教。<br>shèng<br>（1）名词。<br>①一车四马的总称。<br>致万乘之势，序八州而朝同列。（《过秦论》）<br>②春秋时晋国的史书叫”乘”。后称史书为”史乘”。<br>（2）量词。辆。<br>超乘者三百乘。（《崤之战》）<br>（3）数词。四。<br>以乘韦先，牛二十犒师。（《崤之战》）</p><p><strong>15、城</strong><br>（1）名词。<br>①城墙。<br>城非不高也，池非不深也。（《得道多助，失道寡助》）<br>②城市。<br>今日割五城，明日割十城，然后得一夕安寝。（《六国论》）<br>（2）动词。<br>①修筑城墙。<br>是月，城西宁。（《明史•太祖本纪》）<br>②守城。<br>（李）应庚发两路兵城南城。（《宋史•李庭芝传》）</p><p><strong>16、诚</strong><br>（1）名词。诚心诚意。<br>帝感其诚，命夸娥氏二子负二山。（《愚公移山》）<br>（2）副词。表肯定。确定，的确。<br>臣诚知不如徐公美。（《邹季讽齐王纳谏》）<br>（3）连词。表假设推论。果真，如果。<br>诚如是，则霸业可成，汉室可兴矣。（《隆中对》）</p><p><strong>17、池</strong><br>（1）名词。水塘，湖。<br>山顶有大池，相传以为燕荡。（《雁荡山》）<br>（2）名词。护城河。<br>山非不高也，池非不深也。（《得道多助，失道寡助》）</p><p><strong>18、除</strong><br>（1）名词。<br>①殿阶。<br>登自东除。（张衡《两京赋》）<br>②台阶。<br>黎明即起，洒扫庭除。（《朱子家训》）<br>③门屏之间。<br>扶辇下除。（《汉书》）<br>（2）动词。<br>①去掉，除去。<br>兴利除弊。（《答司马谏议书》）<br>除残去秽。（《赤壁之战》）<br>②修治。<br>即除魏阉废祠之址以葬之。（《五人墓碑记》）<br>③拜官授职。<br>予除右丞相兼枢密使。（《〈指南录〉后序》）</p><p><strong>19、传</strong><br>chuán<br>（1）动词。<br>①传送，传递。<br>得璧，传之美人。（《廉颇蔺相如列传》）<br>②传授。<br>师者，所以传道授业解惑也。（《师说》）<br>③流传。<br>此世所以不传也。（《石钟山记》）<br>④传达。<br>传上言谓康熙、乾隆、咸丰有开议勤殿故事。（《谭嗣同》）<br>⑤传位。<br>不传于贤而传于子。（《孟子》）<br>⑥动词。延续。<br>人人自安，无战争之患，传之万世。（《史记•秦始皇本纪》）<br>（2）名词。传闻，传说。<br>其所见焉，犹可欺也，而况于世之传也。（《荀子•非柏》）<br>zhuàn<br>名词。<br>（1）客舍。<br>舍相如广成传舍。（《廉颇蔺相如列传》）<br>（2）驿车，传达命令的马车。<br>横惧，乘传诣洛阳。（《汉书•高帝纪下》）<br>（3）传记。<br>作七十列传。（《史记•太史公自序》）<br>（4）注释或阐述经文的文字。<br>六艺经传皆通习之。（《师说》）</p><p><strong>20、辞</strong><br>（1）名词。<br>①诉讼的供词。<br>狱辞无谋故者。（《狱中杂记》）<br>②口实。<br>欲加之罪，其无辞乎？（《左传•僖公十年》）<br>③言辞，文辞。<br>而侯生曾无一言半辞送我。（《信陵君窃符救赵》）<br>④托辞，借口。<br>君子疾夫舍曰”欲之”而必为之辞。（《季氏将伐颛臾》）<br>⑤命令。<br>近者奉辞罚罪，旗麾南指，刘琮束手。（《赤壁之战》）<br>⑥名词。一种文体。<br>《归去来兮辞》<br>（2）动词。<br>①说话。<br>挟天子以征四方，动以朝廷为辞。（《赤壁之战》）<br>②告别，辞别。<br>今者出，未辞也，为之奈何。（《鸿门宴》）<br>③推辞，辞去。<br>如姬之欲为公子死，无所辞。（《信陵君窃符救赵》）<br>④计较。<br>大礼不辞小让。（《鸿门宴》）<br>（3）复合词。辞令：应酬的语言、文辞。<br>然皆祖屈原之从容辞令，莫敢直谏。（《屈原列传》）</p><p><strong>21、从</strong><br>cóng 动词。<br>①跟随。<br>一狼得骨止，一狼仍从。（《狼》）<br>②依顺，听从。<br>民弗从也。（《曹刿论战》）<br>臣从其计。（《廉颇蔺相如列传》）<br>③参与。<br>弟走从军阿姨死。（《琵琶行》）<br>④追赶。<br>佯北勿从。（《孙子•军争》）<br>⑤依傍，紧挨着。<br>樊哙从良坐。（《鸿门宴》）<br>⑥采取某种原则。<br>从宽、从严、从简、从缓<br>cóng，旧读zòng<br>（1）名词。<br>①随从的人。<br>其从如云。（《诗经》）<br>②副职。<br>魏从九品分正从。（《文献通考》）<br>③指堂房亲属。<br>昇死，其印为予群从所得。（《活板》）<br>（2）形容词。从属的。<br>从犯。<br>Zòng通”纵”<br>（1）形容词。直的。<br>衡（横）纵其亩。（《诗经》）<br>（2）名词。合纵的盟约。<br>于是从散约败，争割地而赂秦。（《过秦论》）<br>（3）动词。放纵。<br>欲不可从。（《礼记》）</p><p><strong>22、达</strong><br>（1）动词。<br>①通，透。<br>屋极有窗以达气。（《狱中杂记》）<br>②畅达。<br>撰长书以为贽，辞甚畅达。（《送东阳马生序》）<br>③至、到。<br>自昏达曙。（《促织》）<br>④到达。<br>指通豫南，达于汉阴，可乎？（《愚公移山》）<br>⑤通晓，明白。<br>仆山海狂人，不达世务。（《南史》）<br>⑥得志。<br>不求闻达于诸侯。（闻达：得志扬名。）（《出师表》）<br>⑦表达，告知。<br>词不达意。<br>（2）形容词。<br>①显贵的。<br>达官贵人。<br>②豁达。<br>高祖不修文学，而性明达。（《汉书》）<br>（3）复合词。达人：显达的人。<br>昔正考父煮粥以糊口，孟僖子知其后必有达人。（《训俭示康》）</p><p><strong>23、怠</strong><br>形容词。<br>（1）懈怠，松懈。<br>天大寒，砚水坚，手指不可屈伸，弗之怠。（《送东阳马生序》）<br>（2）轻慢，不恭敬。<br>守卒皆怠炎。（炎：人名）（《宋史•杨愿传》）<br>（3）疲倦。<br>怠而后游于清池。（《史记》）</p><p>24、殆<br>（1）形容词。<br>①危险。<br>知己知彼，百战不殆。（《孙子•谋攻》）<br>②精神疲倦而无所得。<br>学而不思则罔，思而不学则殆。（《论语•为政》）<br>③通”怠”，懒惰。<br>农者殆则土地荒。（《商君书•农战》）<br>（2）副词。<br>①表测度或不肯定。大概，恐怕。<br>郦元之所见，殆与余同，而言之不详。（《石钟山记》）<br>②表约略。几乎，接近，差不多。<br>扬州城下，进退不由，殆例送死。（《〈指南录〉后序》）</p><p><strong>25、当</strong><br>dāng<br>（1）动词。<br>①两者相抵。<br>募有能捕之者，当其租入。（《捕蛇者说》）<br>②抵御，抵抗。<br>非刘豫州莫可以当曹操者。（《赤壁之战》）<br>料大王士卒足以当项王乎。（《鸿门宴》）<br>③占据，把守。<br>一夫当关，万夫莫开。（《蜀道难》）<br>④阻拦。<br>有狼当道，人立而啼。（《中山狼传》）<br>⑤承担。<br>当仁不让于师。（《论语》）<br>⑥主持，执掌。<br>北邀当国者相见。（《〈指南录〉后序》）<br>⑦应当。<br>诸将吏敢复有言当迎操者，与此案同。（《赤壁之战》）<br>⑧判决，判罪。<br>吏当广所失亡多。（《李将军列传》）<br>（2）介词。<br>①表处所。对着，面对。<br>当窗理云鬓，对镜贴花黄。（《木兰辞》）<br>②表时间。值，在，正在。<br>当时时也，商君佐之。（《过秦论》）<br>（3）副词。<br>①表必然。必定，一定。<br>不久当归还，还必相迎取。（《孔雀东南飞》）<br>②表时间的未来。将，将要。<br>今当远离，临表涕零，不知所言。（《出师表》）<br>dàng<br>（1）动词。<br>①符合。<br>惴惴恐不当意。（《促织》）<br>②当作。<br>安步当车。（《战国策》）<br>③以为。<br>我当是相公呢！<br>（2）形容词。适宜。<br>此殊未当。（《采草药》）</p><p><strong>26、道</strong><br>（1）名词。<br>①道路。<br>会天大雨，道不通。（《陈涉世家》）<br>②途径，方法。<br>策之不以其道。（《马说》）<br>③风尚。<br>师道之不传也久已。（《师说》）<br>④道义。<br>伐无道，诛暴秦。（《陈涉世家》）<br>⑤思想，学说。<br>墨之道，兼爱为本。（《中山狼传》）<br>⑥道理，规律。<br>臣之所好也，道也。（《庖丁解牛》）<br>⑦意向。<br>道不同，不相为谋。（《论语》）<br>⑧历史上的行政区划名。唐分全国为十五道，隶属于中央。清末和民国初分一省为数道。<br>（2）动词。<br>①取道。<br>从郦山下，道芷阳间行。（《鸿门宴》）<br>②走路，赶路。<br>闻操已向荆州晨夜兼道。（《赤壁之战》）<br>③说，讲。<br>何可胜道也哉？（《游褒禅山记》）<br>④料想。<br>故园谁有书来。<br>⑤通”导”，引导。<br>道之以政。（《论语》）<br>⑥通”导”，疏导。<br>不如小决（决口），使道。（《左传》）</p><p><strong>27、得</strong><br>（1）名词。收获。<br>不如自行搜觅，冀有万一之得。（《促织》）<br>（2）动词。<br>①取得，获得。<br>遂不得履。（《郑人买履》）<br>②得意。<br>意气扬扬，甚自得也。（《史记》）<br>③所愿。 于彼计则得。（《中山狼》）</p><p><strong>28、度</strong><br>1、尺寸，量长短的标准。（吾忘持度）<br>2、限度，尺度。（生之有时而用之无度）<br>3、规章制度。（内立法度，务耕织，修守战之具）<br>4、越过。（万里赴戎机，关山度若飞 度日如年）<br>5、duó ,计算。（试使山东之国与陈涉度长絜大 度德量力）<br>6、duó ,揣度，估计。（平心而度之，吾果无一失乎）<br>7、duó ,考虑。（度义而后功）</p><p><strong>29、短</strong><br>1、短，与“长”相对。<br>2、不足；欠缺。（戎狄之所长，而中国之所短。）<br>3、缺点；短处。<br>4、诋毁。（短屈原于顷襄王）</p><p><strong>30、多</strong><br>1、数量大，与“寡”或“少”相对。<br>2、称赞；赞美。（故传天下不足多也。《论积贮疏》）<br>3、增加。（因物而多之，孰与骋能而化之？《荀子》）<br>4、大都，大多。</p><p><strong>31、发</strong><br>1、发射。（百发百中）<br>2、出，出发。（朝发夕至）<br>3、派遣。（发闾左谪戍渔阳九百人）<br>4、起，起用。（舜发于畎畝之中《孟子•告子下》）<br>5、打开，掀开。（涂有饿莩而不知发）<br>6、拿出。（有贤士大夫发五十金）<br>7、发觉，泄露。（恐前语发）<br>8、拨动。（施关发机）<br>9、发动。（非常之谋难于猝发）<br>10、发出，抒发。（发其志士之悲哉 发号施令）<br>11、花开。（野芳发而幽香，佳木秀而繁阴）</p><p><strong>32、方</strong><br>1、周围。（今齐地方千里《邹》<br>2、并排。（今操方连船舰《赤》）<br>3、正直。（方正之不容也《屈》）<br>5、方位、方向。（乃令史官记地动所从方起《张》）<br>6、当……时候。（方此之时）<br>7、正在。<br>8、将要。</p><p><strong>33、非</strong><br>1、不是。（六国破灭，非兵不利，战不善，弊在赂秦 非人不传 非亲非故）<br>2、不。（谪戍之众，非抗于九国之师也 非同小可）<br>3、过错，不对。（实迷途其未远，觉今是而昨非）<br>4、责怪，反对。（是是非非）<br>5、没，无。（才能不及中人，非有仲尼、墨翟之贤）</p><p><strong>34、复</strong><br>1返回；回来。（昭王南征而不复）<br>2恢复（更若役，复若赋，则何如）<br>3再，又（明年复攻赵，杀二万人）<br>4重复（山重水复疑无路）<br>5回答（王辞而不复）<br>6报复（有北面复匈奴之志。）<br>7免除赋税徭役（沛幸得复，丰未得复。）<br>8通”覆”，遮盖，盖上（复之以掌，虚若无物。）<br>9复算，追究（而翁归，自与汝复算耳。）</p><p><strong>35、负</strong><br>1背东西，以背载物（颁白者不负戴于道路矣）<br>2担负，使……承担（均之二策，宁许以负秦曲）<br>3依仗，凭借（秦贪，负其强，）<br>4对不起，辜负（臣诚恐见欺于王而负赵）<br>5违背，背弃（相如度秦王虽斋，决负约不偿城，乃使其从者衣褐，）<br>6失败（不知彼而知已，一胜一负）<br>7覆盖（苍山负雪，明烛天南。）<br>8亏欠，拖受，责通“债”（ 通家尚负责。）</p><p><strong>36、盖</strong><br>1、白茅编成的覆盖物。<br>2、建筑房屋。（盖屋）<br>3、车盖，车蓬。（日初出大如车盖）<br>4、遮盖，掩盖。（日月欲明而浮云盖之。《淮南子》）<br>5、崇尚。（盖威）<br>6、超过，胜过。（况刘豫州王室之胄，英才盖世，众士仰慕，若水之归海　　盖世无双）<br>7、加上。（盖章）<br>8、承接上文，表原因，“因为”。（盖失强援，不能独完）<br>9、承接上文，表推测，“大概”。（盖其至又深，则其至又加少矣）<br>10、通“盍”，何，何不。（技盖至此哉）</p><p><strong>37、鼓</strong><br>1、击鼓。（百姓闻王钟鼓之声《孟》齐人三鼓《曹刿论战》）<br>2、振动。（微风鼓浪《石》）<br>3、鼓（乐器）。瞽奏鼓（《书•胤征》）<br>4、弹奏。（赵王鼓瑟《廉》今王鼓乐于此《孟》）<br>5、古代夜间计时。（戊申晦，五鼓《登泰山记》）</p><p><strong>38、故</strong><br>1、事，事故。（父母俱存，兄弟无故）<br>2、旧，与”新”相对。（以故法为其国与此同）<br>3、衰老。（暮去朝来颜色故）<br>4、仍然。（累官故不失州郡也）<br>5、老朋友，引申为交情。（君安与项伯有故）<br>6、原因，缘故。（既克，公问其故）<br>7、故意，特意。（故遣将守关者）<br>8、原来 ，本来。（此物故非西产）<br>9、所以，因此。（故臣复取璧）<br>10、故事：旧事，前例。（而从六国破亡之故事）<br>11、死亡。（病故，物故）</p><p><strong>39、顾</strong><br>1、回头看；回头。（赢得仓皇北顾）<br>2、看。（顾野有麦场）<br>3、探问，拜访。（三顾臣于草庐之中）<br>4、顾惜，顾念。（子布、元表诸人各顾妻子）<br>5、考虑。（大行不顾细谨）<br>6、但是。（顾念蓄劣物终无所用&#x2F;顾吾念之，强秦之所以不敢加兵于赵者）<br>7、仔细端详。（顾玩）<br>8、表轻微转折（吾每念常痛于骨髓，顾不知计所出耳）<br>9、反而，难道（人之立志，顾不如蜀鄙之僧哉）</p><p><strong>40、固</strong><br>1、险固，坚固，坚牢。（秦孝公居崤函之固）<br>2、牢固。（君臣固守）<br>3、坚持，坚决。（乃辞谢，固请）<br>4、巩固，安定。（固国不以山溪之险）<br>5、固执，顽固。（汝心之固，固不可彻 固执己见）<br>6、必，一定。（女能固纳公乎《孟子•梁惠王上》）<br>7、本来。（至于颠覆，理固宜然）<br>8、乃，岂，表反诘。（仁人固如是乎《孟子•万章上》）<br>9、通“姑”，姑且。（将欲翕之，必固张之；将欲弱之，必固强之《老子》）</p><p><strong>41、归</strong><br>1、返回。（津泽皆归其根《梦》 予不得归矣《指》）<br>2、归还。（归璧于赵《廉》）<br>3、旧称女子出嫁。（吾妻来归《项》）</p><p><strong>42、国</strong><br>1、国家，国家的。（国破山河在，城春草木深）<br>2、诸侯国。（六国破灭，非兵不利）<br>3、国都。（京城登斯楼也，则有去国怀乡）<br>4、地区，地域。（逝将去女，适彼乐国）<br>5、国事。（等死，死国可乎）</p><p><strong>43、过</strong><br>1、走过，经过。（臣请缚一人过王而行 过目不忘 ）<br>2、超过，胜过。（过犹不及 矫枉过正）<br>3、过分。（以其境过清，不可久居 过甚其词）<br>4、过失，过错。（是谁之过与 闭门思过）<br>5、责备。（无乃尔是过与）<br>6、过访，访问，探望。（近腊月下，景气和畅，故山殊可过）</p><p><strong>44、何</strong><br>1、代词，哪里。（却看妻子愁何在）<br>2、什么，代词。（何时眼前突兀见此屋）<br>3、怎么，为什么，状语。（又何间焉）<br>4、何如：怎样，怎么样。（今日之事何如）<br>5、奈何：怎么办，奈—何：对—怎么办。（取吾璧，不予我城，奈何）<br>6、如–何：把—怎么办。（如太行王屋何）<br>7、多么。（水何澹澹，山岛竦峙。）<br>8、hè背、扛。（何蓑何笠）</p><p><strong>45、恨</strong><br>1、遗憾。（不满意辍耕之垄上，怅恨久之&#x2F;未尝不叹息痛恨于桓、灵也）<br>2、怨恨。（此恨绵绵无决期）<br>3、感到遗憾。（以是知公子恨之复返也）<br>4、恨恨：惆怅、悲伤。（生人作死别，恨恨那可论。）<br>区别：恨，憾，怨。“恨”和“憾”都表示遗憾。“怨”表示仇视、怀恨</p><p><strong>46、后</strong><br>1、 君主；君主的正妻。<br>2、 后代。<br>3、 后面。<br>4、 以后。<br>5、 落后。<br>6、 以……为后。（后天下之乐而乐）</p><p><strong>47、胡</strong><br>1、什么。（国胡以相恤）<br>2、为什么，怎么。（胡取禾三百廛兮）<br>3、古代我国西北部民族的统称。（胡人不敢南下而牧马）</p><p><strong>48、患</strong><br>1、忧虑，担心。（欲勿予，即患秦兵之来《廉颇蔺相如列传》则秦之所大欲，诸侯之所大患，固不在战矣。《六国论》）<br>2、祸患，祸害，灾祸。（为操后患《赤壁之战》夫祸患常积于忽微，而智勇多困于所溺）<br>3、危害。（故君之所以患于军者三）<br>4、疾病。（愈膏肓之患难 茜有眼患）<br>5、讳忌。（此数者用兵之患也）<br>6、厌恨。（赵宣子骤谏，公患之）<br>7、生病。（时有患疟疾者）</p><p><strong>49、或</strong><br>1、有人。（或曰：六国互丧，率赂秦也）<br>2、有的。（或以为死，或以为亡）<br>3、或许，也许。（则胜负之数，存亡之理，当与秦相较，或未易量）<br>4、有时，偶或。（马之千里者，一食或尽粟一石）<br>5、作语助，不译。（残贼公行，莫之或止）</p><p><strong>50、疾</strong><br>1、病。（君有疾在腠里，不治将恐深 讳疾忌医 慷慨得志之徒，其疾病而死《五》）<br>2、痛苦，疾病。（疾首蹙额）<br>3、缺点，毛病。（寡人有疾，寡人好色）<br>4、厌恶，憎恨。（君子疾夫舍曰“欲之”而必为之辞 《论》 屈平疾王听之不聪 《屈》 疾恶如仇）<br>5、通“嫉”，妒忌。（膑至，庞涓恐其贤于己，疾之）<br>6、急速。（鸟起马惊，疾逸道左《柳》）<br>7、加强。（声非加疾也《劝》）</p><p><strong>51、及</strong><br>1、赶上，追上。（追张仪，不及）<br>2、到，至。（微夫人之力不及此）<br>3、达到。（及里城）<br>4、涉及，牵连。（一人飞升，仙及鸡犬 此其近者祸及身）<br>5、趁着。（而不及令今有功于国）<br>6、比得上，赶得上。（徐公何能及君也）<br>7、和，并。（凡我父兄昆弟及国子姓）</p><p><strong>52、即</strong><br>1、靠近，接近。（匪来贸丝，来即我谋）<br>2、立即，马上。（项伯即入见沛公）<br>3、当，当时。（项王即日因留沛公与饮）<br>4、倘若，如果。（虏多且近，即有急，奈何）<br>5、与”则”的用法相同，相当于”那就”的意思。（且壮士不死即已，死即举大名耳）<br>6、即使。（其伤于缚者，即幸留）<br>7、就，就是。（闻鸡鸣。即起盥栉）<br>8、登上帝位。（昭帝即位，数年，匈奴与汉和亲）</p><p><strong>53、既</strong><br>1、尽，完。（言未既）<br>2、已经，—以后。（既克，公问其故）<br>3、既然。（将军既帝室之胄）<br>4、既—-又—并列关系。（三军既惑且疑）<br>5、既而：不久。（既而得其尸于井）<br>6、全、都。（肴核既尽，杯盘狼藉）<br>7、既望：农历每月十六日。（壬之秋，七月既望。苏子与客泛舟）</p><p><strong>54、假</strong><br>1、不真，虚伪，假装。（乃悟前狼假寐，盖以诱敌 弄假成真 假仁假义）<br>2、借。（以是人多以书假余）<br>3、凭借，借助。（君子生非异也，善假于物也 狐假虎威）<br>4、犹“贷”，宽容，原谅。（愿大王少假借之）<br>5、给予。（遂乃开仓廪，假贫民《汉书•龚遂传》）<br>6、假如，如果。（假有人焉，举我言复我，亦必疑其诳）</p><p><strong>55、间</strong><br>1、两事物的当中。（凡天地之间）<br>2、中间，期间。（奉命于危难之间）<br>3、一会儿。（扁鹊见蔡桓公，立有间）<br>4、指房屋的间数。（安得广厦千万间）<br>5、间隙，空隙。（彼节者有间）<br>6、隔离。（遂与外人间隔）<br>7、间或。（间以诗记所遭）<br>8、离间。（谗人间之可谓穷矣）<br>9、参与。（肉食者谋之，又何间焉）<br>10、间月：隔月，一个月以上。（骨微伤，病间月）<br>11、间关：形容鸟声宛转。（间关莺语花底滑）<br>12、间谍。（秦间来人，赵奢善食而遣之）<br>13、表时间有时、偶然。（数月之后，时时而间进）<br>14、表状态，从小路。（从郦山下，道芷阳间行）<br>15、表情态，秘密地、悄悄地。（侯生乃屏人间语曰）</p><p><strong>56、见</strong><br>1、看见。（昨夜见军帖，可汗大点兵）<br>2、召见。（曹刿请见）<br>3、拜见。（冉有、季路见于孔子曰）<br>4、会见。（一日不见，如三秋矣）<br>5、见识，见解。（真知灼见 一得之见）<br>6、被。（信而见疑，忠而被谤）<br>7、听见，听说。（从兹耳界应清静，免见啾啾毁誉声——白居易）<br>8、知道，觉得。（何以见得）</p><p><strong>57、解</strong><br>1、剖开，分解动物的肢体。（庖丁为文惠君解牛）<br>2、把系着的东西解开。（悉埋于地，解其棕缚）<br>3、解开，使分开。（少年大骇，急解令休止）<br>4、解释，解答。（师者，所以传道受业解惑也）<br>5、理解，懂得。（其为惑也，终不解矣）<br>6、消散、离散。（得选兵八万人，进兵击秦军，秦军解去，遂救邯郸，存赵）<br>7、分裂、涣散。（天下土崩瓦解）<br>8、解救、消除。（今有一言，可以解燕国之患，而报军之仇者，何如）<br>9、通“懈”，松解，懈怠。（胡虏益解）</p><p><strong>58、进</strong><br>1、前进。（余船以次俱进《赤》其进愈难《游》）<br>2、进献。（群臣进谏《邹》相如前进缶《廉》）<br>3、出来做官。（进亦忧、退亦忧《岳阳楼记》）</p><p><strong>59、尽</strong><br>1、完了；没有了。<br>2、死。<br>3、全部用出。<br>4、竭尽；使……完尽。（智者尽其谋）<br>5、尽头。<br>6、穷尽。<br>7、明白。（听其言，曰而尽。）<br>8、极；全。（尽善尽美）</p><p><strong>60、就</strong><br>1、接近，依靠。（金就砺则利）<br>2、赴任，就职。（连辟公府不就）<br>3、完成，达到目的。（轲自知事不就）<br>4、成就。（当”日知其所亡”以就懿德）<br>5、即，随即。（已股落腹裂，斯须就毙）<br>6、走向，走上。（若无罪而就死地）<br>7、上车、上路。（荆轲遂就车而去）</p><p><strong>61、举</strong><br>1、举起，抬起。（举所佩玉玦以示之者三 举案齐眉 举足轻重）<br>2、举出，提出。（举类迩而见义远 举一反三）<br>3、举行，发动。（今亡亦死，举大计亦死）<br>4、推举，举荐。（孙叔敖举于海）<br>5、攻下，占领。（南取汉中，西举巴蜀）<br>6、拿。（吾不能举全吴之地）<br>7、全，尽。（杀人如不能举 举国上下）</p><p><strong>62、绝</strong><br>1、断绝。（不绝如缕 络绎不绝 韦编三绝）<br>2、终止，消失。（忽然抚尺一下，群响毕绝）<br>3、隔断。（自云先世避秦时乱，率妻子邑人来此绝境）<br>4、穷尽。（绝处逢生）<br>5、极，最，非常。（佛印绝类弥勒）<br>6、到了极点。（以为妙绝）<br>7、完全，绝对。（绝无踪响 绝无仅有）<br>8、横渡。（假舟楫者，非能水也，而绝江河）</p><p><strong>63、堪</strong><br>1、经得起，忍受。（更那堪冷落清秋节）<br>2、能够，可以。（可堪回首，佛狸祠下）<br>3、能够，可以。（出师一表真名世，千载谁堪伯仲间）<br>4、胜任。（不堪吏人妇，岂合今郎君）</p><p><strong>64、克</strong><br>1、能够。（如其克谐，天下可定也）<br>2、战胜，攻破。（然操遂能克绍）<br>3、克制。（克已复礼为仁）<br>4、肩负，引申为担当、胜任，担当家务。（子克家）<br>5、克制、约束。（克已奉公）<br>6、限定、约定。（与克期俱至）<br>7、通“刻”，刀刻、雕刻。（更克画，平斗斛度量文章）</p><p><strong>65、类</strong><br>1、种类。（有植土龛岩，亦此类耳）<br>2、事例。（举类迩而见义远）<br>3、类似，象。（中会殿阁，类兰若）<br>4、类推。（义不杀少而杀众，不可谓知类）<br>5、条例。（法不能独立，类不能自行）<br>6、大都、大多。（近岁风俗尤多侈靡，走卒类士服，农夫蹑丝履）</p><p><strong>66、怜</strong><br>1、怜悯，同情。（独不怜公子姊耶？）<br>2、可怜：可爱。（自名秦罗敷，可怜体无比）<br>3、疼爱、爱惜。（丈夫亦爱怜其少子乎）<br>4、爱戴。（项燕为楚将，数有功，爱士卒，楚人怜之）<br>5、值得同情。（可怜身上衣正单，心忧炭贱愿天寒）<br>6、可惜。（戍卒叫，函谷举，楚人一炬，可怜焦土）</p><p><strong>67、临</strong><br>1、从高处朝向低处，面对。（据亿丈之城，临不测之渊，以为固）<br>2、面对。（未尝不临文嗟悼，不能喻之于怀 如临大敌）<br>3、到。（双喜临门 身临其境）<br>4、正当，将要。（先帝知臣谨慎，故临崩寄臣以大事也 临阵磨枪 临渴掘井）</p><p><strong>68、弥 弥</strong><br>1、满，遍。（夜雪初霁，荠麦弥望）<br>2、越，更加。（奉之弥繁，侵入愈急）<br>3、弥留：病危将死。（病日至秦。既弥留）<br>4、经、终。（既而弥月不雨，民方以为忧）</p><p><strong>69、名</strong><br>1、名字，名称。（有五谷之实而不有其名《芙》盖当时未有雁荡山之名《梦》）<br>2、取名，得名。（以其乃华山之阳名之也《游》而此独以钟名《石》皆后人以贯休诗名之也《梦》）</p><p><strong>70、末</strong><br>1、&lt;名&gt;树梢。《左传·昭公十一年》：“末大必折。”<br>2、&lt;名&gt;事情、物件的端或尾。《齐桓晋文之事》：“明足以察秋毫之末。”<br>3、&lt;名&gt;末尾；尽头。《核舟记》：“鲁直左手执卷末，右手指卷。”<br>4、&lt;名&gt;不重要的或非根本的。《论积贮疏》：“使天下各食其力，末技游食之民，转而缘南亩。”<br>5、&lt;名&gt;时间或顺序在后。贾思勰《树木》：“吴末，甘橘成，岁得绢数千匹。”</p><p><strong>71、莫</strong><br>1、通”暮”读mu，日落的时候，傍晚。（至莫夜月明）<br>2、没有（谁），没有（什么）。（非刘豫州莫可以当曹操者）<br>3、不，不要。（一夫当关，万夫莫开）<br>4、莫如：不如。（莫如以吾所长攻敌短）<br>5、通”漠”，广大。（今子有大树，患其无用，何不树之无何有之乡，广莫之野）<br>6、表测度、或许。（其事体莫须有）</p><p><strong>72、乃</strong><br>1、副词，可译为“是”“就是”，表判断。（以其乃华山之阳名之也）<br>2、你，你的。（与尔三矢，尔其无忘乃父之志　　　家祭无忘告乃翁——陆游）<br>3、如此。（子无乃称。《庄子》）<br>4、仅。（至东城乃有二十八骑）<br>5、于是，就。（良乃入，具告沛公）<br>6、才。（于是为长安君约车百乘，质于齐，兵乃出）<br>7、竟，竟然，居然。（巫医乐师百工之人，君子不齿，今其智乃反不能及，何也）</p><p><strong>73、内</strong><br>1、里面，跟“外”相对。（少间，帘内掷一纸出）<br>2、内部，常指国家内部，朝廷内部。（然侍卫之臣不懈于内）<br>3、内心。（今将军外托服从之名而内怀犹豫之计）<br>4、内室。（家有一堂二内）<br>5、通“纳”，接纳。（距关毋内诸侯）<br>6、通“纳”，放进。（内狼于囊）<br>8、交纳。（百姓内粟千石，拜爵一级）</p><p><strong>74、判</strong><br>1、古代官职。<br>2、判词。<br>3、分开；分离。（遂判十二国，合为七国）<br>4、分辨。（强弱胜负已判）<br>5、裁判狱讼。</p><p><strong>75、期</strong><br>1、限定和约定的时间、时日。（名词）（道不通，度以失期 后会有期）<br>2、约定。（动词）（君与家君期日中，日中不至，则是无信 不期而遇）<br>3、希望。（非相仇也，期有得耳）<br>4、限度。（征敛无期）<br>5、必，至。（况修短随化，终期于尽）<br>6、jī,周，整。（期年之后，虽欲言，无可进者）</p><p><strong>76、奇</strong><br>1、奇特的，罕见的，不平常的。（以事秦之心礼天下之奇才）<br>2、以—-为奇，惊异。（大将军邓骘奇其才）<br>3、零数。（舟首尾长约八分有奇）<br>4、适宜，适合。（今日违情义，恐此事非奇）<br>5、珍贵的。（此奇货可居）<br>6、使人不测的。（若兵来则出奇兵击之）<br>7、佳、好、宜。（奇文共欣赏，疑义相与析）<br>8、怪物、异物。（奇生怪）</p><p><strong>77、迁</strong><br>1、迁移。（战，守，迁皆不及施）<br>2、改变。（终继五国迁灭，何哉）<br>3、调动官职。（再迁为太史令）<br>4、贬谪，放逐。（是夕始觉有迁谪意）</p><p><strong>78、请</strong><br>1、请求，请求对方做某件事。（君不如肉袒伏斧质请罪）<br>2、请求，相当于请允许我，请让我。（请奉盆缶秦王以相娱乐）<br>3、请教，请示。（诸将请所之）<br>4、宴请。（乃置酒请之）<br>5、请命：①请求保全生命或解除疾苦②请示③请求任命官职<br>6、愿意。（请献十金）<br>7、谒见、谒问。（公子闻之，往请，欲厚遗之，不肯受）<br>8、邀请、约请。（乃请宾客，约车骑百余乘，欲以客往赴秦军）</p><p><strong>79、穷</strong><br>1、困窘，处境困难。（人穷则反本，故劳苦倦极）<br>2、不得志，不显贵，与”达”相对。（穷则独善其身，达则兼济天下）<br>3、贫困。（所识穷乏者得我欤）<br>4、穷尽。（穷予生之光阴以疗梅也哉）<br>5、寻求到尽头。（复前行，欲穷其林）<br>6、僻、荒。（穷巷陋室穷山恶水）<br>7、困窘。（公孙衍穷张仪）<br>8、穷冬，严冬。（穷冬烈风，大雪深数尺，足肤皲裂而不知）</p><p><strong>80、求</strong><br>1、寻求、需求。（求人可使报秦者《廉》以斧斤考击而求之《石》）<br>2、请求。（求而不得者也送）</p><p><strong>81、去</strong><br>1、离开。（欲呼张良与俱去）<br>2、过去的。（我从去年辞帝京，谪居卧病浔阳城）<br>3、除去，除掉。（为汉家除残去秽）<br>4、距，距离。（沛公军在霸上，相去四十里）<br>5、表示动作的趋势。（风流总被雨打风吹去）<br>6、丢弃、厌弃、失掉。（人所畔者，天所去也）<br>7、前往、到……去。（公然抱茅入竹去）<br>8、去去：越去越远，往前走了又走。（念去去，千里烟波，暮霭沈沈楚天阔）</p><p><strong>82、劝</strong><br>1、勉励，奖励。（一曰主用足，二曰民赋少，三曰劝农功）<br>2、劝说。（时周瑜受使至番阳，肃劝权召瑜还）<br>3、受到鼓励。（夫有功者必赏，则爵禄厚必劝）</p><p><strong>83、却</strong><br>1、退，退回。（相如因持壁却立）<br>2、使……退，击退。（后秦击赵者再，李牧连却之）<br>3、拒绝，推却。（却之为不恭）<br>4、还，再。（何当共剪西窗烛，却话巴山夜雨时）<br>5、回头。（却看妻子愁何在，漫卷诗书喜欲狂）<br>6、去掉、消除。（医得眼前疮，剜却心头肉）<br>7、但是、可是。（逢人渐觉乡音异，却恨莺声似故山）</p><p><strong>84、如</strong><br>1、依照，遵从，顺。（万事如意 如愿以偿 如法炮制）<br>2、好像，如同。（杀人如不能举，刑人如恐不胜 如出一辙 如此而已 如饥似渴 如丧考妣）<br>3、及，比得上。（沛公默然，曰：“固不如也”）<br>4、到……去。（沛公起如厕，因招樊哙出）<br>5、若，假如。（如有离违，宜别图之，以济大事）</p><p><strong>85、若</strong><br>1、似乎，好像。（山有小口，仿佛若有光）<br>2、假如。（若舍郑以为东道主）<br>3、你。（不者，若属皆且为所虏）<br>4、及，比得上。（曾不若孀妻弱子）<br>5、至于，至如。（若夫霪雨霏霏，连月不开）</p><p><strong>86、善</strong><br>1、好事，好的行为。（积善成德，而神明自得）<br>2、友好，亲善。（素善留侯张良）<br>3、擅长：善于。（君子生非异也，善假于物也）<br>4、通”缮”，修治。引申为揩拭。（善刀而藏之）<br>5、表示同意的答词，可译为”好””对”。（先主曰”善”）<br>6、善才：唐时著名琵琶师，后也作以指琵琶师或曲师。（尝学琵琶于穆、曹二善才）<br>7、优点、长处。（采儒墨之善，撮明法之要）<br>8、做好 、处理好。（工欲善其事，必先利其器）<br>9、喜欢、羡慕。善乃物之得时，感吾生之行休（）</p><p><strong>87、稍</strong><br>1、官府发给的粮食。（县官日有廪稍之供）<br>2、逐渐；慢慢地。稍出近之）<br>3、稍微。</p><p><strong>88、少</strong><br>1、数量小，不多。（少私寡欲）<br>2、不足，缺少。（少条失敬：缺少教养，没有规矩。）<br>3、轻视。（显王左右素习知苏秦，皆少之《史记•苏秦列传》）<br>4、表示时间很短，不多时。（少时，一狼径去）<br>5、稍微，略微。（太后之色少解 少安毋躁）<br>6、shào ，年轻，年轻人。（老臣贱息舒祺，最少，不肖）</p><p><strong>89、涉</strong><br>1、徒步渡水；引申为渡过。（楚人有涉江者）<br>2、进入，到。（驱中国士众远涉江湖之间）<br>3、经历，经过。（今少卿抱不测罪，涉旬月，迫季东）<br>4、涉猎：泛览群书而不一定求其精</p><p><strong>90、胜</strong><br>1、能承受，胜任，禁得起。（驴不胜怒，蹄之）<br>2、尽。（不违农时，谷不可胜食也 不可胜数 美不胜收 不胜枚举）<br>3、胜利。（此所谓战胜于朝廷 百战百胜）<br>4、超过，胜过。（日出江花红胜火，春来江水绿如蓝 略胜一筹）<br>5、优美的。（予观夫巴陵胜状，在洞庭一湖 引人入胜）</p><p><strong>91、识</strong><br>1、懂得，认识。（相逢何必曾相识）<br>2、知识，见识。（鄙夫寡识）<br>3、记住。（因笑谓迈曰：”汝识之乎”）</p><p><strong>92、使</strong><br>1、派遣，命令。（怀王使屈原造为宪令）<br>2、使，让。（不如因而厚遇之，使归赵）<br>3、出使。（是时屈平既疏，不复在位，使于齐）<br>4、使唤。（人皆得以隶使之）<br>5、使者。（大王派一介之使至赵）<br>6、使命。（时周瑜受使至番阳）<br>7、主使，指使。（周公之逮所由使也）<br>8、假使。（向使三国各爱其地）</p><p><strong>93、是</strong><br>1、正确，不错，与“非”相对。（觉今是而昨非 是非分明）<br>2、以为是。（各行其是）<br>3、判断词，是。（同行十二年，不知木兰是女郎）<br>4、这。（是社稷之臣也，何以伐为）<br>5、作语助。（唯利是图）</p><p><strong>94、适</strong><br>1、到……去。（余自齐安舟行适临汝）<br>2、女子，出嫁。（贫贱有此女，始适还家门）<br>3、顺从，适合。（处分适兄意，那得自任专）<br>4、恰好。（从上观之适与地平）<br>5、刚才。（适为虞人逐）<br>6、同“谪”，被流放。（发闾左适戍渔阳九百人）<br>7、流放，贬职。（又以适去，竟不自得）</p><p><strong>95、书</strong><br>1、写，记下。（乃丹书帛曰”陈胜王”）<br>2、文字。（卒买鱼烹食，得鱼腹中书）<br>3、书信。（烽火连三月，家书抵万金）<br>4、书籍，书。（家贫，无以致书以观）<br>5、国书。（拜送书于庭）<br>6、书法、字体。（举世唯知其书）<br>7、特指《尚书》，泛指一切经书。”（《书》曰：“满招损，谦得益）</p><p><strong>96、孰</strong><br>1、通”熟”，仔细。（唯大王与群臣孰计议之）<br>2、谁，哪个。（人非生而知之者，孰能无惑）<br>3、孰与：与……比，哪一个更……，哪里比得上。（我孰与城北徐公美）<br>4、成熟。（寒暑和节，而五谷以孰）<br>5、 孰若：哪如、哪里比得上</p><p><strong>97、属</strong><br>1、连接，连缀。（衡少善属文，游于三辅）<br>2、通”嘱”嘱托。（属予作文以记之）<br>3、隶属。（十三学得琵琶成，名属教坊第一部）<br>4、掌管。（在骨髓，司命之所属）<br>5、类。（忠之属也，可以一战）<br>6、等、辈。（若属皆且为所虏）<br>7、系、是。（查明属实，事属可行）</p><p><strong>98、数</strong><br>1、数目。（愿令得补黑衣之数）<br>2、若干。（数口之家，可以无饥矣）<br>3、命运。（则胜负之数，存亡之理，当与秦相较，或未易量）<br>4、shǔ ,计算。（蒙冲斗舰乃以千数 不可胜数 数九寒天 数典忘祖）<br>5、shǔ ，列举罪状。（数吕师孟叔侄为逆）<br>6、shuò ,屡次。（扶苏以数谏故，上使外将兵 数见不鲜）<br>7、cù ，密。（数罟不入洿池）</p><p><strong>99、遂</strong><br>1、水道。<br>2、通达。<br>3、成功。<br>4、称心。<br>5、于是；就。（遂逐齐师(出自《曹刿论战》)<br>6、终于；竟。（裴矩遂能廷折,不肯面从）</p><p><strong>100、率</strong><br>1、遵循；遵从。<br>2、率领。<br>3、给……做榜样。<br>4、大概；大致。<br>5、一概；全部。<br>6、率疲弊之卒，将数百之众（带领，率领）<br>7、大率用根者，若有宿根，须取无茎叶时采（大致，一般，这个意义又说成”大率”）<br>8、六国互丧，率赂秦耶（全都，一概）<br>9、将率不能（主将）<br>10、此吾所以敢率性就死不顾汝也（顺着、沿着）<br>11、有军功者各以率受上爵（规格、标准）<br>12、建始以来，日食地震，以率言之，三倍春秋（频率、比率）</p><p><strong>101、说</strong><br>1、陈述，告诉。（及郡下，诣太守，说如此）<br>2、杂说（一种文体）。（故为之说，以俟夫观人风者得焉）<br>3、学说，主张。（著书立说）<br>4、shuì,劝别人听从自己的意见。（游说）<br>5、通“悦”，喜欢，高兴。（秦伯说，与郑人盟）</p><p><strong>102、私</strong><br>1、私下。（私握臣手《廉》从道旁私语《柳》）<br>2、偏爱。（吾妻之美我者，私我也《邹》）<br>3、与“公”相对。（公私之积犹可哀痛《论》）</p><p><strong>103、素</strong><br>1、白色的生绢。（十三能织素，十四学裁衣）<br>2、白色的。（则素湍绿潭，回清倒影）<br>3、空，白白地。（彼君子兮，不素餐兮）<br>4、向来，一向。（素善留侯张良）<br>5、真情、本心。（披心腹，见情素）<br>6、没有文采的。（秦伯素服郊次，乡师而哭）</p><p><strong>104、汤</strong><br>1、热水，开水。（臣请就汤镬）<br>2、汤药。（臣侍汤药，未曾废离）<br>3、同”烫”，用热水焐。（疾在腠里，汤慰之所及也）<br>4、汤池：1就温泉砌成的浴池2防守严密的护城河。<br>5、汤汤：大水急流的样子。（浩浩汤汤，横无际涯）</p><p><strong>105、涕</strong><br>1、眼泪。（蒋氏大戚，汪然出涕曰）<br>2、哭泣。士皆垂泪涕泣（）<br>3、涕零：流泪。（临表涕零，不知所言）<br>4、鼻涕。（目泪下，鼻涕长一尺）</p><p><strong>106、通</strong><br>1、到达。<br>2、交往；往来。<br>3、畅通；来往无阻。（我可以往，彼可以来，曰通）<br>4、流通；交换。<br>5、通晓；懂得。<br>6、通婚。<br>7、共同的；普通的。<br>8、量词。</p><p><strong>107、徒</strong><br>1、同伙，一类人。（郯子之徒，其贤不及孔子）<br>2、徒然，白白地。（秦城恐不可得，徒见欺）<br>3、只，仅仅。（徒以吾两人在也）<br>4、步行。（班白者多徒行）<br>5、徒属：所属的人。（召令徒属曰：”公等遇雨，皆已失期”）<br>6、门人、弟子。（仲尼之徒无道桓文之事者，是以后世无传焉）<br>7、指服劳役的犯人。（高祖亭长，为送徒郦山）</p><p><strong>108、图</strong><br>1、地图；图画。<br>2、谋划；想办法。（入则与王图议国事）<br>4、图谋；谋取。<br>5、预料；料想。（不图子自归）<br>6、绘画。<br>7、摹拟；模仿。</p><p><strong>109、退</strong><br>1、退却；后退。（进退无颜仪）<br>2、退回；返回。（敬亭退而凝神定气）<br>3、离去。（贤人进而奸人退）<br>4、减退。<br>5、引退。（是进亦忧，退亦忧）</p><p><strong>110、亡</strong><br>1、逃亡，逃跑。（亡去不义，不可不语 亡命之徒）<br>2、逃跑的（士兵）。（追亡逐北，伏尸百万）<br>3、丢失。（秦无亡矢遗镞之费，而天下诸侯以困矣 亡羊补牢 名存实亡）<br>4、死亡。（会刘表新亡）<br>5、灭亡。（亡国之音）<br>6、通“无”，没有。（河曲智叟亡以应）</p><p><strong>111、王</strong><br>1 、一国的君主。（三十日不还，则请立太子为王）<br>2、称王，统治天下。（沛公欲王关中）<br>3、王子：君主的儿子，也指贵族子弟。（妃嫔媵嫱，王子皇孙）<br>4、王师：封建时代政府的军队。（王师北定中原日，家祭毋忘告乃翁）</p><p><strong>112、望</strong><br>1、向远处看。（吾尝跂而望矣，不如登高之博见也 望尘莫及）<br>2、看。（望文生义）<br>3、盼望，希望。（日夜望将军至，岂敢反乎 望子成龙 喜出望外）<br>4、名望。（先达德隆望尊）<br>5、农历每月十五日。（适冬之望日前后）</p><p><strong>113、恶</strong><br>1、厌恶，嫉妒。（表恶其能而不能用也）<br>2、丑，劣，不好的。（廉君宣恶言）<br>3、怎么，哪。（以小易大，彼恶知之）</p><p><strong>114、微</strong><br>1、细小，轻微。（则名微而众寡）<br>2、贫贱。（虞舜侧微《书•舜典序》）<br>3、衰败。（故夫三桓之子孙微矣《论语•季氏》）<br>4、隐匿。（白公奔山而缢，其徒微之《左传•哀公十六年》）<br>5、暗暗的。（微闻有鼠作作索索）<br>6、稍微，略微。（见其发矢十中八九，但微颔之）</p><p><strong>115、闻</strong><br>1、听见。（顺风而呼，声非加疾也，而闻者彰 耳闻目见 闻鸡起舞）<br>2、见闻，知识。（博闻强识）<br>3、达，传报。（举吏民能假贷贫民者以名闻《汉书•武帝纪》）<br>4、嗅。（闻到香味）<br>5、声誉，名声。（不能称前时之闻）</p><p><strong>116、相</strong><br>1、互相。（当与秦相较 相依如命 相敬如宾 心心相印）<br>2、表示动作只涉及一方，有指代作用。（狼不敢前，眈眈相向）<br>3、xiàng ,观察，仔细看。（相机而动）<br>4、xiàng ,相貌，容貌。（相貌堂堂 凶相毕露）<br>5、xiàng ,帮助，辅助。（吉人天相）<br>6、xiàng ,辅佐君主的大臣，宰相。（王侯将相宁有种乎）</p><p><strong>117、谢</strong><br>1、推辞，谢绝。（阿母谢媒人 闭门谢客）<br>2、道歉。（旦日不可不蚤自来谢项王）<br>3、辞别，辞谢。（乃令张良留谢）<br>4、感谢。（哙拜谢，起，立而饮之 谢天谢地）<br>5、告诉。（使君谢罗敷：“宁可共载不？”）<br>6、凋谢，凋落。（花开花谢）</p><p><strong>118、悉</strong><br>1、都，全。（赵王悉召群臣议）<br>2、周全，详尽。（古之治天下，至孅至悉也）<br>3、知道。（丞相亮其悉朕意）<br>4、尽其所有。（料大王之卒，悉之不过三十万）<br>5、详尽地叙述。（书不能悉意，略陈固陋）</p><p><strong>119、信</strong><br>1、诚实，不欺，讲信用。（言而有信）<br>2、信任。（愿陛下亲之信之）<br>3、相信。（忌不自信）<br>4、信用。（小信未孚，神弗福也）<br>5、使者，送信的人。（自可断来信，徐徐更谓之）<br>6、凭证，凭据。（是皆不足以执信也）<br>7、确实，的确。（烟涛微茫信难求 信赏必罚）<br>8、随意。（低眉信手续续弹 信口雌黄 信口开河 信笔涂鸦）<br>9、shēn，同“伸”，伸张。（欲信大义于天下）</p><p><strong>120、兴</strong><br>1、起来，兴起：风雨兴焉(劝) 忧劳可以兴国，逸豫可以亡身（伶）<br>2、发动：抑王兴甲兵， 危士臣（齐）大兴师伐秦(屈)<br>3、兴致：遥襟甫畅，逸兴遄飞（滕）</p><p><strong>121、行</strong><br>1、行动：大行不顾细谨（鸿）<br>2、品德行为：辱人贱行(五) 其行廉(屈)<br>3、实行，做：余嘉其能行古道（师）<br>4、行走：道芷阳间行(鸿) 草行露宿(指)<br>5、将要：行将为人所并(赤)<br>6、行列：涕 落百余行(孔)<br>7、军队编制：蹑足行伍之间(过)<br>8、经：行年四岁，舅夺母志（陈）<br>9、行李：出使的人：行李之往来，共其乏困（烛）</p><p><strong>122、幸</strong><br>1、幸而：大王亦幸•赦臣（廉）故幸•来告良（鸿）<br>2、宠爱：缦立远视，而望幸•焉（阿）如姬最幸•（信）<br>3、宠信：君幸•于赵王（廉）</p><p><strong>123、修</strong><br>1、饰，装饰。（美要眇兮宜修《楚辞•九歌•湘君》）<br>2、理，整治。（内立法度，务耕织，修守战之具）<br>3、兴建，修建。（乃重修岳阳楼，增其旧制）<br>4、编撰，撰写。（修史）<br>5、学习，研究。（自修）<br>6、善，美好。（伊中情之信修兮）<br>7、长，高。（邹忌修八尺有余 此地有崇山峻岭，茂林修竹）</p><p><strong>124、徐</strong><br>1、不徐不疾（迟缓）<br>2、清风徐来，水波不兴（慢慢地、缓缓地）</p><p><strong>125、许</strong><br>1、答应、允许。（宁许以负秦曲《廉》）<br>2、大约。（潭中鱼可百许头《小石潭记》 高可二黍许《核舟记》）<br>3、期望。（塞上长城空自许，镜中衰鬓已先斑）<br>4、处所。（不知何许人也）</p><p><strong>126、阳</strong><br>1、山的南面，水的北面。（以其乃华山之阳名之也）<br>2、阳光，太阳。（斜阳草树，寻常巷陌）<br>3、温暖。（春日载阳，有鸣仓庚）<br>4、通“佯”，表面上，假装。（儋阳为傅其奴）<br>5、出的，外露的。（周秦古玺，多作阳文）</p><p><strong>127、要</strong><br>1、重要，简要。（增减要语，奉行者莫辨也）<br>2、险要。（筑石寨土堡于要隘）<br>3、需要，符合，适合。（凡先王之法，有要于时也）<br>4、同”邀”，邀请。（张良出，要项伯）<br>5、要挟。（惟大辟无吏可要，然犹质其首）<br>6、相约，誓约。（虽与府吏要，渠会永无缘）<br>7、要点、关键。（要在安国家，利人民）<br>8、希望。（若要人不知，除非已莫为）<br>9、总括、概括。（要之，治平之久，天地不能不生人）<br>10、约束、控制。（然地亦穷险，唯京师要其道）</p><p><strong>128、宜</strong><br>1、适宜，合适。（将军禽操，宜在今日）<br>2、应当，应该。（诚宜开张圣听）<br>3、表推测，大概。（今阴阳不调，宜更历之过也）</p><p><strong>129、遗</strong><br>1、遗失，丢失。（秦无亡矢遗镞之费，而天下诸侯以困矣）<br>2、遗失之物。（夜不闭户，路不拾遗）<br>3、遗留，剩下。（蒙故业，因遗策 不遗余力）<br>4、wèi ，给予。（是以先帝简拔以遗陛下）<br>5、剩余的。（地有遗利，民有遗力）</p><p><strong>130、贻</strong><br>1、赠给；送给。（尝贻予核舟一，盖大苏泛赤壁云）<br>2、遗留。（贻训 我之怀矣。自贻伊戚）</p><p><strong>131、易</strong><br>1、交换；互换。（秦以十五城请易寡人之璧《廉》 罢夫羸老易子而咬其骨《论》）<br>2、改变。（缙绅而能不易其志者《五》）<br>3、容易。（由俭入奢易《训》 岂得之难而失之易欤《伶》）<br>3、轻视。（是以古之易财《五》）<br>4、地势，平坦，平易。（由是贼中险易远近虚实尽知之）<br>5、很，非常。（荣禄固操、莽之才，绝世之雄，待之恐不易易）</p><p><strong>132、阴</strong><br>1、山的北面，水的南面。（指通豫南，达于汉阴）<br>2、阴暗。（朝晖夕阴，气象万千）<br>3、阴冷，寒。（阴风怒号，浊浪排空）<br>4、阴影，树荫。（故审堂下之阴，而知日月之行）<br>5、暗中，暗地里。（阴知奸党名姓，一时收禽）<br>6、凹入的。（惟汉印多用阴文）<br>7、阴险。（性阴密，忍诛杀，不见喜怒）</p><p><strong>133、引</strong><br>1、引导：左右引•相如至（廉）<br>2、牵引、拽：或欲引•相如去（廉）见人方引•婴儿欲投之江中（察）<br>3、后退：相如引•车避匿（廉）引•次江北（赤）</p><p><strong>134、右</strong><br>1、右边，与“左”相对。（然视其左右，来而记之者已少）<br>2、高；上。明代以前的右为尊贵位。（在廉颇之右(廉)位）<br>3、古代战车上坐在右边担任警卫的叫车右。（梁弘御戎，莱驹为右）<br>4、尊重；重视。（守成尚文，遭遇右武）<br>5、赞助；亲近。（右韩而左文）<br>6、古称世家大族为”右族”、”右姓”。（时国王骄奢，又多豪右，共为不轨）</p><p><strong>135、逾</strong><br>1、超过，越过。（老翁逾墙走）<br>2、过分；过度。</p><p><strong>136、狱</strong><br>1、案件；官司。（小大之狱，虽不能察，必以情。）<br>2、监狱。<br>3、罪状；过失。（有某姓兄弟，以把持公仓，法应立决，监狱具矣）</p><p><strong>137、再</strong><br>1、第二次。（一鼓作气，再而衰）<br>2、二；两。</p><p><strong>138、造</strong><br>1、到……去。（径造庐访成，视成所蓄）<br>2、不知便可登峰造极不（到达某一境界）<br>3、制造；建造。（因造玉清宫，伐山取材）<br>4、制定。（怀王使屈原造为宪令）<br>5、培养，造就。（小子有造）<br>6、造化：指天地、大自然。（造化钟神秀，阴阳割昏晓）</p><p><strong>139、知</strong><br>1、知道，了解。（人非生而知之者，孰能无惑）<br>2、识别。（其真不知马也）<br>3、感觉，觉得。（不知口体之奉不若人）<br>4、主持。（子产其知政矣）<br>5、交好；相亲。（公孙明知叔孙于齐）<br>6、见解；知识。（孰谓汝多知乎？）<br>7、交情。（绝宾客之知。）<br>8、朋友。（悲歌辞旧爱，衔泪觅新知）<br>9、通“智”。智慧；聪明。（则知明而行无过矣）</p><p><strong>140、置</strong><br>1、安置。（今以钟磬置水中）<br>2、设立。（内外多置小门）<br>3、购置，添置。（郑人有且置履者。）<br>4、放弃。（沛公则置车骑，脱身独骑）<br>5、驿站。</p><p><strong>141、致</strong><br>1、送达，送来。（存问致赐《汉书•武帝纪》）<br>2、表达，表示。（论天下事势，致殷勤之意）<br>3、达到。（假舆马者，非利足也，而致千里）<br>4、得到，取得。（每岁致数百金）<br>5、招致。（不爱珍器重宝肥饶之地，以致天下之士）<br>6、致使，使。（何意致不厚）<br>7、尽，极。（衡善机巧，尤致思于天文阴阳历算 专心致志）<br>8、情趣，情致。（所以兴怀，其致一也 闲情逸致）</p><p><strong>142、质</strong><br>1、质问。（余立侍左右，援疑质理）<br>2、质地。（永州之野产异蛇，黑质而白章）<br>3、刑具。杀人时作垫用的砧板。（君不如肉袒伏斧质请罪）<br>4、通“贽”；见面礼。名词（厚币委质事楚）<br>5、本质。（非天质之卑 形者神之质）<br>6、人质。（有复言令长安君为质者）<br>7、正、刚刚。（质明，避哨竹林中）</p><p><strong>143、治</strong><br>1、治理，管理。（故治国无法则乱）<br>2、医治。（君有疾在腠理，不治将恐深）<br>3、惩处。（不效则治臣之罪）<br>4、部署，训练。（今治水军八十万众）<br>5、讲究，研究。（奚暇治礼义哉？）<br>6、对付。（同心一意，共治曹操）<br>7、治理得好，与”乱”相对。（明于治乱，娴于辞令）<br>8、整理。（于是约车治装，载券契而行）</p><p><strong>144、诸</strong><br>1、众多；各个。（诸如此类 赵王与大将军廉颇诸大臣谋）<br>2、相当于“之于”。（投诸渤海之尾）<br>3、第三人称，他、她、它（们）。（告诸往者而知来者）</p><p><strong>145、贼</strong><br>1、祸患。（淫侈之俗日日以长，是天下之贼也）<br>2、强盗。（贼二人得我，我幸皆杀之矣）<br>3、杀人者；作乱的人。（几落贼手死）<br>4、狠毒。（董卓狼戾贼忍）<br>5、伤害；杀害。（二人相憎，而欲相贼也）<br>6、作乱叛国或外来侵犯的人。（忍能对面为盗贼）<br>7、凶狠，残忍。（董卓狼戾 贼忍）</p><p><strong>146、族</strong><br>1、家族；同姓的亲属。<br>2、类。（士大夫之族，曰师曰弟子云者）<br>3、灭族。（族秦者秦也）<br>4、丛聚、集结之处。（虽然，每至于族，吾见其难为）</p><p><strong>147、卒</strong><br>1、士兵；吏卒；古代军队的编制，一百人为卒。（夫以疾病之卒御狐疑之众）<br>2、死；完毕。（初，鲁肃闻刘表卒）<br>3、终于，最终。（卒相与欢，为刎颈之交）<br>4、cu通“猝”。突然，仓促。（五万兵难卒合）</p><p><strong>148、走</strong><br>1、跑。（双兔傍地走，安能辨我是雄雌）<br>2、逃跑。（老翁逾墙走，老妇出门看）<br>3、仆人。（太史公牛马走司马迁再拜言）<br>4、轻快。（豫备走舸，系于其尾）<br>5、奔向、趋附。（窃计欲亡赵走燕）1（古代指疾行，即跑）<br>6、谦称、我。（走虽为敏）</p><p><strong>149、左</strong><br>1、左边，与“右”相对。<br>2、较低的地位。（余左迁九江郡司马）<br>3、不正；邪僻。（执左道而乱政）<br>4、不合。（身正而事左）<br>5、不赞助。（右韩而左魏）</p><p><strong>150、坐</strong><br>1|、座位。（公子引侯生坐上坐《信》）<br>2、坐着，坐下。（项王，项伯东向坐）<br>3、犯罪或错误。（何坐？曰坐盗《晏子使楚》）<br>4、通”座”。（座位因击沛公于坐）<br>5、因为。（由于停车坐爱枫林晚）<br>6、坐守。（与其坐而待亡，孰若起而拯之）<br>7、坐落，位置所在。（坐北朝南）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1、爱&lt;/strong&gt;&lt;br&gt;（1）名词。恩惠。（古之遗爱也《左传》）&lt;br&gt;（2）动词&lt;br&gt;①加惠于人。（吴广素爱人。《陈涉世家》）&lt;br&gt;（此四君者，皆明智而忠信，宽厚而爱人。《过秦论》）&lt;br&gt;②喜爱，爱护。&lt;br&gt;（父母之爱子，则为之计深远。《触</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>汉化：文言文固定句式</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E6%96%87%E5%9B%BA%E5%AE%9A%E5%8F%A5%E5%BC%8F/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E6%96%87%E5%9B%BA%E5%AE%9A%E5%8F%A5%E5%BC%8F/</id>
    <published>2024-08-06T01:33:48.000Z</published>
    <updated>2024-08-06T01:33:58.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="無乃……乎？"><a href="#無乃……乎？" class="headerlink" title="無乃……乎？"></a>無乃……乎？</h3><p>這是一種表示測度語氣的固定格式，它表明的是對某種情況的估計或者對某件事情的認識。一般可譯為「恐怕……吧」或者「只怕……吧」。例子是很多的。如：</p><p>①勞師以襲遠，非所聞也。師勞力竭，遠主備之，無乃不可乎？（應譯為：使軍隊疲勞去襲擊遠方的國家，沒有聽到過這樣的事。軍隊疲勞力量竭盡，遠方的君主對這件事有準備，恐怕不行吧？）《崤之戰》。</p><p>②暮婚而晨別，無乃太匆忙？（應譯為：晚上結婚而早上就得離別，只怕太匆忙了吧？）《新婚別》</p><p>教材中有一篇古文叫《季氏將伐顓臾》，其中有一句話，也屬於這種固定格式。「求！無乃爾是過與？」（句中劃線句應譯為：冉求！恐怕該責備的是你們吧？）</p><h3 id="……孰與……"><a href="#……孰與……" class="headerlink" title="……孰與……"></a>……孰與……</h3><p>這是一種用來表比較的固定格式，用來比較兩個人的高下、優劣或兩件事的得失、好壞。它又可以分為兩類。一類是句中提出了比較內容的，一類是句中沒有提出比較內容的。前者應翻譯成：「……與……相比，誰（哪一樣）……」，後者應譯為：「……與……比較起來怎麼樣」。這種格式在古文中出現的頻率是非常高的。如下面的例子：</p><p>①吾孰與城北徐公美？《鄒忌諷齊王納諫》（我跟城北的徐公相比誰更漂亮？）</p><p>②沛公曰：「孰與君少長？」《鴻門宴》（（項伯）跟你相比，誰的年紀大，誰的年紀小？）</p><p>③公之視廉將軍孰與秦王？《廉頗藺相如列傳》（你們看廉將軍跟秦王相比，怎麼樣？）</p><p>④某業所就，孰與仲多？《原君》（我所完成的功業跟二哥相比，誰更多？）</p><p>文中的三個加線句均應譯為「你跟我比怎麼樣呢」。</p><h3 id="……之謂也-其……之謂也"><a href="#……之謂也-其……之謂也" class="headerlink" title="……之謂也 其……之謂也"></a>……之謂也 其……之謂也</h3><p>這是賓語提前的一種固定格式，是一種表示總結性的判斷句。應該強調一下的是在這種格式中的「之」屬於結構助詞，起到的是提賓的作用。句首有「其」的也屬於這種格式，而「其」屬於句首語氣助詞，表推測，應譯為「大概」。這種固定格式可譯為「說的就是……啊」，或者譯為「大概說的就是……啊」。請看下面例句：</p><p>①聞道百，以為莫己若者，我之謂也。《莊子·秋水》（聽到了一些道理，以為天下沒有誰超過自己了，說的就是我這種人啊！）</p><p>②詩曰：「他人有心，予忖度之。」——夫子之謂也。《孟子·齊桓晉文之事》（《詩經》上說：「別人有什麼心思，我猜測得到它。」說的就是夫子這樣的人啊！）</p><h3 id="……之謂也-其……之謂也-1"><a href="#……之謂也-其……之謂也-1" class="headerlink" title="……之謂也 其……之謂也"></a>……之謂也 其……之謂也</h3><p>這是賓語提前的一種固定格式，是一種表示總結性的判斷句。應該強調一下的是在這種格式中的「之」屬於結構助詞，起到的是提賓的作用。句首有「其」的也屬於這種格式，而「其」屬於句首語氣助詞，表推測，應譯為「大概」。這種固定格式可譯為「說的就是……啊」，或者譯為「大概說的就是……啊」。請看下面例句：</p><p>①聞道百，以為莫己若者，我之謂也。《莊子·秋水》（聽到了一些道理，以為天下沒有誰超過自己了，說的就是我這種人啊！）</p><p>②詩曰：「他人有心，予忖度之。」——夫子之謂也。《孟子·齊桓晉文之事》（《詩經》上說：「別人有什麼心思，我猜測得到它。」說的就是夫子這樣的人啊！）</p><p>③太史公曰：「傳曰：『其身正，不令則行；其身不正，雖令不從。』其李將軍之謂也。《史記·李將軍列傳》（太史公說：「《論語》上說：『他自身端正，不下達命令人民就會行動；他自身不端正，即使下達命令他的百姓也不會聽從。』大概說的就是李將軍這樣的人吧！」）</p><h3 id="得無……乎？-得無……耶？"><a href="#得無……乎？-得無……耶？" class="headerlink" title="得無……乎？ 得無……耶？"></a>得無……乎？ 得無……耶？</h3><p>這是一種表揣測疑問語氣的固定格式，表示對某種情況的推測。應譯為現代漢語的下面三種格式：恐怕……吧； 莫非……吧； 該不會……吧</p><p>這種格式在古文中出現的頻率也是相當高的。請看下面的例子：</p><p>①覽物之情，得無異乎？《岳陽樓記》（看到自然景物所產生的思想感情，恐怕不一樣吧？）</p><p>②得無教我獵蟲所耶？《促織》（莫非告訴我捕捉蟋蟀的地方吧？）</p><p>③若輩得無苦貧乎？《記王忠肅公翱事》（你們恐怕被窮困所苦吧？）</p><p>④得無楚之水土使民善盜耶？《晏子使楚》（莫非楚國的水土使老百姓善於偷盜吧？）</p><p>⑤日飲食得無衰乎？《觸龍說趙太后》（每天的飲食該不會減少吧？）</p><h3 id="奈……何-如……何-若……何"><a href="#奈……何-如……何-若……何" class="headerlink" title="奈……何 如……何 若……何"></a>奈……何 如……何 若……何</h3><p>這三個格式的用法是一樣的，都表示怎樣對待或處置某人某事。需要強調的是，「奈」、「如」、「若」是動詞，含有「對付」、「處置」、「辦理」一類的意思；而「何」則是補語，作「怎麼」、「怎樣」講。在中間插入的內容屬於「奈」、「如」、「若」的賓語。整個格式可譯為「把……怎麼樣」，或「對……怎麼辦」。先看下面例句。</p><p>①以君之力，曾不能損魁父之丘，如王屋、太行何？（《愚公移山》）</p><p>②試問古來幾曾見破鏡能重圓？則較死為苦也，將奈之何？（《與妻書》）</p><p>③力拔山兮氣蓋世，時不力兮騅不逝。騅不逝兮可奈何？虞兮虞兮奈若何？（《垓下歌》）</p><p>上面的三個例句中加線的句子應分別譯為：</p><p>①把太行山和王屋山能怎麼樣呢？</p><p>②（我們）對這種情況怎麼辦呢？</p><p>③虞姬虞姬把你怎麼樣呢？</p><h3 id="何有於……？"><a href="#何有於……？" class="headerlink" title="何有於……？"></a>何有於……？</h3><p>這是一種表反問的固定格式。需要強調的是，這種格式究其實質是兩種特殊句式的緊縮和移位。一是由介詞「於」與它的賓語構成的介賓短語後置，在原句作補語，翻譯過來必須還原到動詞謂語之前充當狀語；一是疑問句中疑問代詞作賓語謂賓前置，也就是說「有」的賓語是疑問代詞「何」，它前置了，在翻譯的時候，也必須還原到「有」的前面。知道了這一點再去理解這種格式就容易得多了。這種固定格式的意思是：「對於……來說，又有什麼……呢？」請看下面的例句。</p><p>例句：子曰：「默而識之，學而不厭，誨人不倦，何有於我哉？」（應譯為「對於我來說又有什麼呢？」）</p><h3 id="何……為？"><a href="#何……為？" class="headerlink" title="何……為？"></a>何……為？</h3><p>這種固定格式的正確翻譯為：「還要……做什麼？」或者：「要……幹什麼？」請看下面例句：</p><p>例句：①如今人方為刀俎，我為魚肉，何辭為？（《史記·項羽本紀》）劃線句應譯為：「還要告辭做什麼呢？」</p><p>例句：②項王笑曰：「天之王我，我何渡為？」（《史記·項羽本紀》）劃線句應譯為：「這是上天要滅亡我，我還要渡江做什麼呢？」</p><h3 id="不亦……乎？"><a href="#不亦……乎？" class="headerlink" title="不亦……乎？"></a>不亦……乎？</h3><p>這是一種表示反問的固定格式。最需要強調的是這種格式中的「亦」。這是一個很容易產生誤解的詞，稍一疏忽就可能把它理解為副詞，其實，它是一個助詞，沒有實在意義，只有加強語氣的作用。這種固定格式可譯為：「不是……嗎？」或者譯為：「豈不是……嗎？」</p><p>在古文中，這種固定格式的出現頻率是很高的。下面的幾個例句：</p><p>①舟已行矣，而劍不行，求劍若此，不亦惑乎？（《呂氏春秋·察今》）句中的化線處應譯為：「像這樣尋找劍，豈不是太糊塗了嗎？」</p><p>②吾射不亦精乎？（《賣油翁》）句中的劃線處應譯為：「我射箭的本領不是很高明嗎？」</p><p>③子曰：「學而時習之，不亦說乎？有朋自遠方來，不亦樂乎？人不知而不慍，不亦君子乎？」（《論語》）句中的劃線處應譯為：「學習並且不時地溫習它，不是很快樂了的嗎？有同學從遠方來，不也是很高興的事嗎？別人不了解自己而不惱怒，不也是君子嗎？」</p><h3 id="有……者"><a href="#有……者" class="headerlink" title="有……者"></a>有……者</h3><p>這種固定格式常用於敘事的開頭，以突出敘事的對象。必須強調的是，這種格式還有兩種情況。一是敘述的對象「人」在句首出現了，如「楚人有涉江者」，此刻，「有……者」屬於定語後置；二是敘述的對象在句中沒有出現，不屬於定語後置，如「杭有賣柑者」。請看下面例子：</p><p>人有亡斧者。（《韓非子》）在這個句子中，「人」出現了，因此，「有……者」屬於定語後置，應譯為：「有一個丟了斧子的人。」</p><p>邑有成名者，操童子業，久不售。（《促織》）在這個句子中，敘述的對象沒有出現，因而不屬於定語後置，應譯為：「城裏有個叫成名的人。」</p><h3 id="何……之有？"><a href="#何……之有？" class="headerlink" title="何……之有？"></a>何……之有？</h3><p>這也是一種賓語提前的固定格式。句中的「何……」是「有」的賓語，「之」屬於結構助詞，表示提賓。這種格式可譯為：「有什麼……呢？」如下面的例子：</p><p>①宋何罪之有？（《墨子·公輸》）應譯為：「宋國有什麼罪過呢？」</p><p>②子曰：「君子居之，何陋之有？」（《論語》）應譯為：「君子住在裏面，有什麼簡陋呢？</p><p>③夫晉，何厭（通「饜」）之有？（《左傳·崤之戰》）應譯為：「那晉國有什麼可滿足的呢？」</p><p>④若不憂德之不建，而患貨之不足，將吊不暇，何賀之有？」（《叔向賀貧》）應譯為：「如果不憂慮德行沒有完善，卻憂慮財物不足，將要哀悼還來不及，有什麼可祝賀的呢？」</p><h3 id="唯（惟）……是……-惟……之為……"><a href="#唯（惟）……是……-惟……之為……" class="headerlink" title="唯（惟）……是…… 惟……之為……"></a>唯（惟）……是…… 惟……之為……</h3><p>這種固定格式也是一種賓語提前的格式。需要再強調一下的是，在這種格式中的「是」與「之為」，均屬於結構助詞，起到的是提賓作用；而唯（惟），表示的則是動作的唯一性，譯為「只」。這種格式在成語中使用的頻率是很高的。請看下面的例句：</p><p>① 惟命是從；</p><p>② 惟利是圖；</p><p>③ 唯你是問；</p><p>④ 唯仁是親；</p><p>⑤ 唯才是舉；</p><p>⑥ 無乃爾是過與？</p><h3 id="所以……-所以……者"><a href="#所以……-所以……者" class="headerlink" title="所以…… 所以……者"></a>所以…… 所以……者</h3><p>所＋介詞（以、從、與）＋動詞（或動詞性短語）</p><p>這是古文中十分常見的固定格式，是一種名詞性的「所」字短語。首先我們得知道，在古文中的「所以」與現代漢語中的「所以」是完全不同的，現代漢語中的「所以」是一個複音虛詞，用在因果複句的後一分句，表結果，而在古代漢語中，可以說什麼都可以表示，就是不能表示結果。那麼，他都能表示什麼呢？它可以表示動作所涉及到的原因、根據、工具、處所、辦法、憑藉等。下面我們來看一些例子：</p><p>①吾所以為此者，以先國家之急而後私仇也。（《廉頗藺相如列傳》）（表原因）</p><p>②故釋先王之成法，而法其所以為法者。（《呂氏春秋·察今》）（表根據）</p><p>③筆，所以書也。（表工具）</p><p>④是吾劍之所從墜。（《呂氏春秋·察今》）（表處所）</p><p>⑤吾知所以距（通「拒」）子者，吾不言。（《墨子·公輸》）（表辦法）</p><p>⑥師者，所以傳道受業解惑也。（《師說》）（表憑藉）</p><p>⑦聖者，非所與熙（通「嬉」）也。（《墨子》·公輸》）（表憑藉。應譯為：「聖人是不能與他隨便開玩笑的。」）</p><p>⑧此所以學者不可以不深思而慎取之也。（《游褒禪山記》）(表原因)</p><p>⑨天地之所以養人者，原不過此數也。（《治平篇》）（表方法）</p><p>⑩臣所以去親戚而事君者，徒慕君之高義。（《史記·廉頗藺相如列傳》）（表原因）</p><h3 id="……何所……"><a href="#……何所……" class="headerlink" title="……何所……"></a>……何所……</h3><p>這是一種表疑問的固定格式，是「所……者（為）何」的緊縮和移位。懂得了這一點，也就等於知道了在閱讀古文中遇上了這種固定格式時應該如何翻譯了。請看下面的例子：</p><p>①問女何所思？問女何所憶？（《木蘭詩》）</p><p>②賣炭得錢何所營？（《賣炭翁》）</p><p>③白雪飄飄何所似？</p><p>④我有親父母，逼迫兼弟兄。以我應他人，君還何所望？（《孔雀東南飛》）</p><h3 id="有所……-無所……"><a href="#有所……-無所……" class="headerlink" title="有所…… 無所……"></a>有所…… 無所……</h3><p>這兩種固定格式在古文中出現的頻率就更高了，可以說比比皆是。需要強調的是，「有」、「無」是動詞，「所……」是名詞性的「所」字短語作它們的賓語。這兩種固定格式的翻譯比較靈活。請看下面的例子。</p><p>①財物無所取，婦女無所幸。（《鴻門宴》）可譯為：「對財物沒有取什麼，對婦女沒有寵幸誰」</p><p>②吾家後日當甚貧，貧無所苦，清淨過日而已。（《與妻書》）句中劃線的地方，可譯為：「貧困沒有什麼可苦惱的。」</p><p>③吾入關，秋毫不敢有所近。（同上）句中劃線處，可譯為：「一絲一毫的財物都不敢接近。」</p><h3 id="有以……-無以……"><a href="#有以……-無以……" class="headerlink" title="有以…… 無以……"></a>有以…… 無以……</h3><p>這兩種固定格式與上面講的實際上是一回事，因為「有以」與「無以」是「有（所）以」與「無（所）以」的省寫。「有」、「無」仍是動詞，「（所）以……」是「有」或「無」的賓語。如「軍中無以為樂」，就是「軍中無所以為樂」，但不必機械地譯為「軍中沒有用來作樂的東西」，可改變語法結構譯成「軍中沒有什麼用來作樂的」。「有以……」的譯法類同。如下面的例子：</p><p>①故不積跬步，無以至千里；不積小流，無以成江海。（《勸學》）可靈活地譯為「沒有用來達到千里的方法」和「沒有用來匯聚成的江海的方法」。</p><p>②臣乃得有以報太子。（《荊軻刺秦王》）可譯為：「我才有用來報答太子的方法。」</p><p>還應該強調一下，「有以」常和「未」連用，此時，與「有以」的用法相同。</p><p>如：臣未有以報也。（《莊暴見孟子》）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;無乃……乎？&quot;&gt;&lt;a href=&quot;#無乃……乎？&quot; class=&quot;headerlink&quot; title=&quot;無乃……乎？&quot;&gt;&lt;/a&gt;無乃……乎？&lt;/h3&gt;&lt;p&gt;這是一種表示測度語氣的固定格式，它表明的是對某種情況的估計或者對某件事情的認識。一般可譯為「恐怕……吧」或者</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>汉化：词类活用</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E8%AF%8D%E7%B1%BB%E6%B4%BB%E7%94%A8/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E8%AF%8D%E7%B1%BB%E6%B4%BB%E7%94%A8/</id>
    <published>2024-08-06T01:30:06.000Z</published>
    <updated>2024-08-06T01:31:39.325Z</updated>
    
    <content type="html"><![CDATA[<p>文言文中有個難關，就是<strong>詞類活用</strong>。</p><p>若果不能理解詞類活用，你很有可能會被一兩個字纏著，甚至解錯文章。</p><p>所以，小編就爲大家整理了詞類活用全攻略！</p><h2 id="詞類活用-是什麽？"><a href="#詞類活用-是什麽？" class="headerlink" title="詞類活用 是什麽？"></a>詞類活用 是什麽？</h2><p><img src="https://learnsmart.edu.hk/wp-content/uploads/2022/08/download-27.png.webp" alt="詞類活用"></p><p><strong>在特定的語言環境中，文言文部分詞語的詞性會被臨時改變。</strong></p><p><strong>在文言文中，詞類活用現象是非常普遍，****是文言文語法特點之一。</strong></p><h2 id="詞類活用-類型"><a href="#詞類活用-類型" class="headerlink" title="詞類活用 類型"></a>詞類活用 類型</h2><p>詞類活用主要有：</p><p><strong>名詞活用為動詞</strong></p><p><strong>動詞活用為名詞</strong></p><p><strong>形容詞活用為動詞</strong></p><p><strong>數詞活用為動詞等</strong></p><h2 id="名詞活用為動詞"><a href="#名詞活用為動詞" class="headerlink" title="名詞活用為動詞"></a>名詞活用為動詞</h2><p>名詞活用為動詞，一般情況下是<strong>兩個名詞連用，必有一個名詞作動詞；副詞（adverb）後面直接帶名詞，名詞就活用為動詞。</strong></p><p>活用後的意義仍和這個名詞的意義密切相關，只是動作化而已。</p><p>例如：</p><p>吾從而<strong>師</strong>之。</p><p>原意：名詞 老師，活用為動詞 以……為老師、向……..學習</p><p>其他例子：</p><p>其<strong>下</strong>聖人也遠矣</p><p>原意：名詞 下方，活用為動詞 不及、不如</p><p>“一狼洞其中”（《狼》）中的“洞”，原為名詞，洞穴，轉化為動詞“打洞”之義。</p><p>婦撫兒乳（《口技》）“乳”轉化為動詞“喂乳”。</p><p><strong>禮</strong>天下之奇才 “禮”轉化為動詞“禮待”。</p><p>不能名其一處也（《口技》）“名”轉化為動詞“說出”。</p><h2 id="一般名詞作狀語"><a href="#一般名詞作狀語" class="headerlink" title="一般名詞作狀語"></a>一般名詞作狀語</h2><p>①表示動作行為發生的處所。如“途中兩狼，綴行甚遠”（《狼》）中的“途”，原意為道路，這裏作狀語，是“在道路上”的意思。</p><p>②表示動作行為的依據、手段或工具。如“失期，法皆斬”（《陳涉世家》）中的“法”，原意是“法律”，這裏作狀語，修飾動詞“斬”，表示行為的依據，是“按照法律”的意思。</p><p>③表示行為的身份或對待的方式。如“君為我呼入，吾得兄事之”（《項羽本紀》）中的“兄”，本為名詞，轉化為狀語，是“用對待兄長的禮節”的意思。</p><p>④表示動作行為的特征或狀態。如“其一犬坐於前”（《狼》）中的“犬”，本是名詞“狗”，在這兒作狀語，意思是“像狗一樣”。</p><h2 id="動詞活用為名詞"><a href="#動詞活用為名詞" class="headerlink" title="動詞活用為名詞"></a>動詞活用為名詞</h2><p><strong>動詞出現在主語或賓語的位置上，表示與這個動作行為有關的人或事，這時它就活用作名詞。</strong></p><p>例子：</p><p>吾射不亦精乎”（《賣油翁》）中的“射”，本是動詞“射箭”，這裏轉化為名詞“射箭的本領”。</p><h2 id="形容詞活用為名詞"><a href="#形容詞活用為名詞" class="headerlink" title="形容詞活用為名詞"></a>形容詞活用為名詞</h2><p><strong>在句子中，形容詞如果處於主語或賓語的位置，具有明顯的表示人或身份的特征和意義，形容詞就轉化為名詞。</strong></p><p>例子：</p><p>是故<strong>聖</strong>益聖，<strong>愚</strong>益愚</p><p><strong>聖</strong> 原意 形容詞 具有智慧、道德 活用為名詞 聖人</p><p><strong>愚</strong> 原意 形容詞 愚昧 活用為名詞 愚昧的人</p><h2 id="形容詞作動詞"><a href="#形容詞作動詞" class="headerlink" title="形容詞作動詞"></a>形容詞作動詞</h2><p><strong>形容詞後面帶了賓語（Object），形容詞就轉化為動詞。</strong></p><p>例：復前行，欲<strong>窮</strong>其林。（陶淵明《桃花源記》）<br>（<strong>窮</strong>：原為形容詞，這裡活用為動詞，可譯為「走完」）</p><p><strong>其他例子：</strong></p><p>“天下苦秦久矣”（《陳涉世家》）中的“苦”，因帶賓語“秦”，意為“（對秦王朝的殘暴統治）感到苦惱”</p><p>於其身也則<strong>恥</strong>師焉</p><p>原爲 恥辱、可恥，活用為動詞當作可恥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文言文中有個難關，就是&lt;strong&gt;詞類活用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若果不能理解詞類活用，你很有可能會被一兩個字纏著，甚至解錯文章。&lt;/p&gt;
&lt;p&gt;所以，小編就爲大家整理了詞類活用全攻略！&lt;/p&gt;
&lt;h2 id=&quot;詞類活用-是什麽？&quot;&gt;&lt;a href=&quot;#詞類</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>汉化：文言文句式</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E6%96%87%E5%8F%A5%E5%BC%8F/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E6%96%87%E8%A8%80%E6%96%87%E5%8F%A5%E5%BC%8F/</id>
    <published>2024-08-06T01:28:30.000Z</published>
    <updated>2024-08-06T01:40:37.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判斷句"><a href="#判斷句" class="headerlink" title="判斷句"></a>判斷句</h2><p>所謂判斷句，就是以名詞、代詞或名詞性短語為謂語對主語進行判斷的句式。</p><p><strong>1.“……者，……也”“……，……也”“……，……者也”“……者，……”“……者，……者也”“……，……”“……，……者”等形式。</strong>如：“廉頗者，趙之良將也。”</p><p>①陳勝者，陽城人也。</p><p>②項脊軒，舊南閣子也。</p><p>③南陽劉子驥，高尚士也。</p><p>④噌吰者，周景王之無射也。</p><p>⑤七略四庫，天子之書。</p><p>⑥宮中府中，俱為一體。</p><p>⑦梁，吾仇也，燕王，吾所立。</p><p>⑧此三者，吾遺恨也。</p><p>⑨賂秦而力虧，破滅之道也。</p><p>⑩斯用兵之效也。</p><p><strong>2.採用副詞“乃”“即”“則”“皆”“是”“誠”“為”等表示判斷。</strong>如：“此乃臣效命之秋也。”</p><p>①問今是何世，乃不知有漢。</p><p>②不知天上宮闕，今夕是何年。</p><p>③即今之傫然在墓者。</p><p>④梁父即楚將項燕。</p><p>⑤此則岳陽樓之大觀也。</p><p>⑥非死,則徙爾。</p><p>⑦此皆良實，志慮忠純。</p><p>⑧此誠危急存亡之秋也。</p><p>⑨如今人方為刀俎，我為魚肉。</p><p>⑩我本楚狂人，鳳歌笑孔丘。</p><p><strong>3.採用否定副詞“非”表示否定。</strong>如：“六國破滅，非兵不利，戰不善，弊在賂秦。”</p><p>①登高而招,臂非加長也,而見者遠。</p><p>②城非不高也,池非不深也,兵革非不堅利也。</p><p>③非挾太山以超北海之類也。</p><p><strong>4、語義上主謂直接判斷：</strong></p><p>①劉備天下梟雄。</p><p>②其劍自舟中墜於水，遽契其舟，曰：“是吾劍之所從墜。”</p><h2 id="被動句"><a href="#被動句" class="headerlink" title="被動句"></a>被動句</h2><p><strong>文言文中，有些語句的主語是動作的承受者，這種句式就是被動句。</strong></p><p>其常見類型有：</p><p><strong>1.“見”“……見……於”“於”表被動。</strong>如：“吾長見笑於大方之家。”</p><p>①臣誠恐見欺於王。</p><p>②秦城恐不可得，徒見欺。</p><p>③故內惑於鄭袖，外欺於張儀。</p><p>④李氏子藩，年十七，不拘於時，學於余。</p><p>⑤家叔以余貧苦，遂見用於小邑。</p><p><strong>2.“為”“為……所”表被動。</strong>如：“而身死國滅，為天下笑。”</p><p>① 父母宗族，皆為戮沒。</p><p>②為國者無使為積威之所劫哉。</p><p>③為予群從所得。</p><p>④恐為操所先。</p><p>⑤其後楚日以削,數十年,竟為秦所滅。</p><p><strong>3.“受”“受……於”表被動。</strong>如：“受制於人。”</p><h2 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a>省略句</h2><p><strong>文言文中，普遍存在着省略成分的情況，對省略成分的把握，有助於完整理解句子的意思。</strong></p><p>文言文中的省略句通常有：</p><p><strong>1.省略主語。</strong><br>（1）承前省。如：“永州之野產異蛇，（異蛇）黑質而白章。”<br>（2）承後省（也作蒙後省）。如：“沛公謂張良曰：‘（公）度我至軍中，公乃入。’”<br>（3）自述省。如：“（予）愛是溪，（予）得其尤絕者家焉。”<br>（4）對話省。如：“（孟子）曰：‘獨樂樂，與人樂樂，孰樂？’（王）曰：‘不若與人。’”</p><p><strong>2.省略謂語。</strong>如：“一鼓作氣，再（鼓）而衰，三（鼓）而竭。”</p><p><strong>3.省略賓語。</strong>如：“可燒而走（之）也。”</p><p><strong>4.省略介詞賓語。</strong>如：“公閲畢，即解貂覆生，為（之）掩户。”</p><p><strong>5.省略介詞“於”。</strong>如：“今以鐘磬置（於）水中，雖大風浪不能鳴焉。”<br>①冉氏嘗居也，故姓是溪為冉溪。<br>②故西門豹為鄴令,名聞天下。<br>③均之二策,寧許以負秦曲。<br>④皆出山下平地，蓋上出也。<br>⑤今當遠離,臨表涕零,不知所言。<br>⑥漁工水師雖知而不能言。<br>⑦國人莫敢言,道路以目。<br>⑧使將士更休,而自坐帷幕。<br>⑨士志於道而恥惡衣惡食者,未足與議也。</p><h2 id="倒裝句"><a href="#倒裝句" class="headerlink" title="倒裝句"></a>倒裝句</h2><p><strong>文言中的倒裝句，是相對於現代漢語的句序而言的，基於此，我們將文言倒裝句式分為賓語前置、定語後置、狀語後置、主謂倒裝等。</strong></p><p><strong>1.賓語前置</strong></p><p>所謂賓語前置，就是通常作賓語的成分，置於謂語動詞的前面，以示強調。如：“洎不之信”中的“之”就是前置的賓語。賓語前置通常分為四種情況。</p><p>（1）疑問句中，疑問代詞作賓語，賓語前置。如：“大王來何操？”</p><p>（2）否定句中，代詞作賓語，賓語前置。如：“古之人不余欺也。”</p><p>（3）藉助“之”“是”將賓語提前。如：“句讀之不知，惑之不解。”“孜孜焉唯進修是急,未之多見也。”</p><p>（4）介賓短語中賓語前置。如：“不然，籍何以至此？”</p><p><strong>2.定語後置</strong></p><p>通常定語應該放置於中心詞的前面，但文言語句中卻有很多句子將定語放在中心詞之後。如：“蚓無爪牙之利，筋骨之強，上食埃土，下飲黃泉，用心一也。”其中的“利”“強”都是後置定語。文言中的定語後置有以下幾種情況。</p><p>（1）用“者”的後置。如：“馬之千里者,一食或盡粟一石。”</p><p><strong>3.介賓短語後置 (狀語後置）</strong></p><p>文言文中，介詞結構作狀語往往都會置於句後作補語。如：“貧者語於富者曰”“於富者”就是置於句後作補語的介賓短語。</p><p>標誌詞：於、以</p><p><strong>4.主謂倒裝</strong></p><p>這種情況很少，往往是為了表示強烈的感嘆。如：“甚矣，汝之不惠。”“美哉,我少年中國。”</p><p>①保民而王，莫之能御也。</p><p>②王無異於百姓之以王為愛也。</p><p>③德何如，則可以王矣？</p><p>④何由知吾可也？</p><p>⑤甚矣，烏紗之橫，皂隸之俗哉！</p><p>⑥欲祠韋蘇州、白樂天諸公於其中</p><p>⑦故凡為愚者，莫我若也。</p><p>⑧凡人不能教子女者，亦非欲陷其罪惡。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判斷句&quot;&gt;&lt;a href=&quot;#判斷句&quot; class=&quot;headerlink&quot; title=&quot;判斷句&quot;&gt;&lt;/a&gt;判斷句&lt;/h2&gt;&lt;p&gt;所謂判斷句，就是以名詞、代詞或名詞性短語為謂語對主語進行判斷的句式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.“……者，……也”“……，…</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>汉化：中文敬语</title>
    <link href="http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E4%B8%AD%E6%96%87%E6%95%AC%E8%AF%AD/"/>
    <id>http://example.com/2024/08/06/%E6%B1%89%E5%8C%96%EF%BC%9A%E4%B8%AD%E6%96%87%E6%95%AC%E8%AF%AD/</id>
    <published>2024-08-06T01:06:27.000Z</published>
    <updated>2024-08-06T01:43:12.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中国古代常用敬词："><a href="#中国古代常用敬词：" class="headerlink" title="中国古代常用敬词："></a><strong>中国古代常用敬词：</strong></h2><h2 id="1、“拜”字族："><a href="#1、“拜”字族：" class="headerlink" title="1、“拜”字族："></a>1、“拜”字族：</h2><p>　　拜读：读对方作品；拜会：和对方见面；拜望：看望或探望对方；拜托：请对方帮忙；拜读：读对方作品。</p><h2 id="2、“奉”字族："><a href="#2、“奉”字族：" class="headerlink" title="2、“奉”字族："></a>2、“奉”字族：</h2><p>　　奉告：告诉对方；奉还：对方的物品归还；奉送：赠送对方礼物。</p><h2 id="3、“高”字族："><a href="#3、“高”字族：" class="headerlink" title="3、“高”字族："></a>3、“高”字族：</h2><p>　　高就：询问对方在哪里工作；高龄、高寿：指老人家年龄；高见：指对方的见解；高攀：和他人交朋友或结成亲戚；高堂：称对方父母。</p><p>　　高足：称对方的学生或徒弟；</p><h2 id="4、“贵”字族："><a href="#4、“贵”字族：" class="headerlink" title="4、“贵”字族："></a>4、“贵”字族：</h2><p>　　贵姓：询问对方的姓；贵庚：敬辞，问人年龄；贵恙：敬辞，称对方的病。</p><h2 id="5、“惠”字族："><a href="#5、“惠”字族：" class="headerlink" title="5、“惠”字族："></a>5、“惠”字族：</h2><p>　　惠赠：指对方赠予（财物）；惠存：多用于送对方相片、书籍等纪念品；惠顾：商家称顾客到来；惠临：敬辞，指对方到自己这里来；惠赠：敬辞，指对方赠予（财物）；惠允：敬辞，指对方允许自己做某事。</p><h2 id="6、“令”字族："><a href="#6、“令”字族：" class="headerlink" title="6、“令”字族："></a>6、“令”字族：</h2><p>　　令尊：尊称对方的父亲；令堂：敬辞，称对方的母亲；令爱（媛）：敬辞，称对方的女儿；令郎：敬辞，称对方的儿儿子；令亲：敬辞，称对方的亲戚。</p><h2 id="7、“宝”字族："><a href="#7、“宝”字族：" class="headerlink" title="7、“宝”字族："></a>7、“宝”字族：</h2><p>　　宝号：称对方的店铺；宝眷：称对方的家眷。</p><h2 id="8、“呈”字族："><a href="#8、“呈”字族：" class="headerlink" title="8、“呈”字族："></a>8、“呈”字族：</h2><p>　　呈正：指把自己的作品送交别人批评指正。呈报：指用公文向上级报告；呈请：指用公文向上级请示。</p><h2 id="9、“垂”字族："><a href="#9、“垂”字族：" class="headerlink" title="9、“垂”字族："></a>9、“垂”字族：</h2><p>　　垂询：称对方（多指顾客）对本企业事务的询问；垂问：敬辞，表示别人（多指长辈或上级）对自己的询问。垂爱：（书）敬辞，称对方（多指长辈或上级）对自己的爱护（多用于书信）。</p><h2 id="10、“光”字族："><a href="#10、“光”字族：" class="headerlink" title="10、“光”字族："></a>10、“光”字族：</h2><p>　　光临：称对方到来；光顾：商家多用以欢迎顾客。</p><h2 id="11、其它敬词："><a href="#11、其它敬词：" class="headerlink" title="11、其它敬词："></a>11、其它敬词：</h2><p>　　壁还：用于归还对方物品；俯就：请对方同意担任某一职务；斧正：请对方修改文章；恭候：用于等待对方；借问：用于向别人打听事情；雅正：把自己的书画等送人时表示请对方指教；鼎力：用于向对方表示感谢；华诞：称对方的生日；海涵：称对方写的字或画的画。</p><p><strong>中国古代常用谦词：</strong></p><h2 id="1、“家”字族："><a href="#1、“家”字族：" class="headerlink" title="1、“家”字族："></a>1、“家”字族：</h2><p>  用于对别人称比自己辈分高或年纪大的亲属。</p><p>　　家父、家严：谦辞，对别人称自己的父亲；家慈：称自己的母亲；家兄：称自己的兄长。</p><h2 id="2、“舍”字族："><a href="#2、“舍”字族：" class="headerlink" title="2、“舍”字族："></a>2、“舍”字族：</h2><p>　　用于对别人称比自己辈分低或年龄小的亲属。</p><p>　　舍侄：称自己的侄子；舍弟：称自己的弟弟；舍亲：称自己的亲人；舍间：谦称自己的家，也称“舍下”。</p><h2 id="3、“鄙”字族："><a href="#3、“鄙”字族：" class="headerlink" title="3、“鄙”字族："></a>3、“鄙”字族：</h2><p>　　鄙人：谦称自己；鄙意：自己的意见；鄙见：自己的见解。</p><h2 id="4、“愚”字族"><a href="#4、“愚”字族" class="headerlink" title="4、“愚”字族"></a>4、“愚”字族</h2><p>　　愚兄：向比自己年轻的人称自己；愚见：自己的见解。</p><h2 id="5、“敝”字族："><a href="#5、“敝”字族：" class="headerlink" title="5、“敝”字族："></a>5、“敝”字族：</h2><p>　　敝人：谦称自己；敝姓：谦称自己的姓；敝校：谦称自己的学校。</p><h2 id="6、“拙”字族："><a href="#6、“拙”字族：" class="headerlink" title="6、“拙”字族："></a>6、“拙”字族：</h2><p>　　拙笔：谦称自己的父亲或书画；拙著、拙作：谦称自己的文章；拙见：谦称自己的见解。</p><h2 id="7、“小”字族："><a href="#7、“小”字族：" class="headerlink" title="7、“小”字族："></a>7、“小”字族：</h2><p>　　小人：地位低的人自称；小店：谦称自己的商店。</p><h2 id="8、“敢”字族："><a href="#8、“敢”字族：" class="headerlink" title="8、“敢”字族："></a>8、“敢”字族：</h2><p>　　表示冒昧地请示别人：敢问：用于向对方询问问题；敢请：用于请求对方做某事；敢烦：用于麻烦对方做某事。</p><h2 id="9、“家”字族："><a href="#9、“家”字族：" class="headerlink" title="9、“家”字族："></a>9、“家”字族：</h2><p>　　家父：谦辞，对别人称自己的父亲；家母：谦辞，对别人称自己的母亲。</p><h2 id="10、“见”字族："><a href="#10、“见”字族：" class="headerlink" title="10、“见”字族："></a>10、“见”字族：</h2><p>　　见谅：客套话，表示请人谅解；</p><p>　　见教：客套话，指教（我），如“有何见教”。</p><h3 id="古代的生活雅语："><a href="#古代的生活雅语：" class="headerlink" title="古代的生活雅语："></a><strong>古代的生活雅语：</strong></h3><p>　　请人原谅说“包涵”；求人帮忙说“劳驾”；向人提问说“请教”；</p><p>　　得人惠顾说“借光”；归还物品说“奉还”；未及迎接说“失迎”；</p><p>　　需要考虑说“斟酌”；请人勿送说“留步”；对方到场说“光临”；</p><p>　　接受好意说“领情”；与人相见说“您好”；问人姓氏说“贵姓”；</p><p>　　问人住址说“府上”；请改文章说“斧正”；接受好意说“领情”；</p><p>　　求人指点说“赐教”；得人帮助说“谢谢”；祝人健康说“保重”；</p><p>　　向人祝贺说“恭喜”；老人年龄说“高寿”；身体不适说“欠安”；</p><p>　　自己住家说“寒舍”；女士年龄称“芳龄”；称人女儿为“千金”；</p><p>　　送礼给人说“笑纳”；送人照片说“惠存”；欢迎购买说“惠顾”；</p><p>　　希望照顾说“关照”；请人赴约说“赏光”；对方来信说“惠书”；</p><p>　　需要考虑说“斟酌”；无法满足说“抱歉”；请人协助说“费心”；</p><p>　　言行不妥“对不起”；慰问他人说“辛苦”；迎接客人说“欢迎”；</p><p>　　宾客来到说“光临”；等候别人说“恭候”；麻烦别人说“打扰”；</p><p>　　客人入座说“请坐”；陪伴朋友说“奉陪”；临分别时说“再见”；</p><p>　　中途先走说“失陪”；请人勿送说“留步”；送人远行说“平安”；</p><p>　　请人决定说“钧裁”；接受教益说“领教”；谢人爱意说“错爱”；</p><p>　　受人夸奖说“过奖”；交友结亲说“高攀”；祝人健康说“保重”；</p><p>　　书信结尾说“敬礼”；问候教师说“教祺”；致意编辑说“编安”。</p><p>　　与人相见说“您好”；问人住址说“府上”；初次见面说“久仰”；</p><p>　　长期未见说“久违”；求人帮忙说“劳驾”；向人询问说“请问”；</p><p>　　请人解答说“请教”；求人办事说“拜托”；称人夫妇为“伉俪”；</p><p>　　尊称老师为“恩师”；称人学生人“高足”；平辈年龄问“贵庚”。</p><h3 id="“别”之雅语"><a href="#“别”之雅语" class="headerlink" title="“别”之雅语"></a><strong>“别”之雅语</strong></h3><p>　　分手辞别曰“告别”；握手告辞曰“握别”；拱手辞别曰“揖别”；</p><p>　　挥手告辞曰“挥别”；亲吻离去曰“吻别”；叩拜辞行曰“拜别”；</p><p>　　设宴送行曰“饯别”，致谢告辞曰“谢别”，临别赠礼曰“赠别”；</p><p>　　离别留言曰“留别”；前往送行曰“送别”；丢开离去曰“抛别”；</p><p>　　不愿分别曰“惜别”、“恋别”；长久分别曰“阔别”、“长别”；</p><p>　　永久分别曰“永别”、“诀别”。</p><h3 id="“笔”之雅语"><a href="#“笔”之雅语" class="headerlink" title="“笔”之雅语"></a><strong>“笔”之雅语</strong></h3><p>　　开始写作叫“动笔”；提笔撰文和作画叫“命笔”；</p><p>　　轻松自如的文字叫“逸笔”；写作过程的中断叫“辍笔”；</p><p>　　文章臃肿的文字叫“赘笔”；个人亲自动手写叫“亲笔”；</p><p>　　对上写信的谦称叫“谨笔”；本人口授他人写叫“代笔”；</p><p>　　对下写信的谦称叫“草笔”；文章韵味风格叫“文笔”；</p><p>　　皇帝书写的文字叫“御笔”；读后感写的文字叫“随笔”；</p><p>　　与题旨无关的话叫“闲笔”；结束后补充文字的话叫“余笔”；</p><p>　　细致的文字绘画叫“工笔”；请人书画的稿酬叫“润笔”；</p><p>　　无聊庸俗的文字叫“歪笔”；动手拟订集体名义的文稿叫“执笔”；</p><p>　　文章写得好的地方叫“妙笔”；练习性的写作叫“练笔”；</p><p>　　愉快地作文或作画叫“欣然命笔”；</p><p>　　好的文章或语句叫“成功之笔”；</p><p>　　在前段文章中为后段文章埋伏的线索叫“伏笔”。</p><h3 id="中国古代其他谦词敬词雅语："><a href="#中国古代其他谦词敬词雅语：" class="headerlink" title="中国古代其他谦词敬词雅语："></a><strong>中国古代其他谦词敬词雅语：</strong></h3><p>　　台甫：敬辞，旧时用于问人的表字大号；台驾：敬辞，旧称对方；</p><p>　　台端：敬辞，旧时称对方，（多用于机关、团体等给个人的函件）；</p><p>　　台安、台祺、台馁：您安好、吉祥、平安；</p><p>　　台鉴：旧时书信套语，用在开头的称呼之后，表示请对方看信；</p><p>　　钧谕：书信中称尊长所说的话。还有钧裁、钧安等；</p><p>　　玉成：成全。例：深望玉成此事；</p><p>　　玉体、玉音：指对方身体或言行；</p><p>　　违教：指离开某人后未见面（多用于书信）；</p><p>　　雅教：称对方对自己的指教；拜教：恭敬地接受教诲；</p><p>　　昆玉：对别人弟兄的敬称；稽迟：拖延、不及时；</p><p>　　潭府：尊称他人的宅第。如潭第多福；</p><p>　　惠鉴、钧鉴、雅鉴、台鉴、台览：请您审阅、审查、指教；</p><p>　　谨悉：恭敬地知道；谨启：恭敬地陈述；</p><p>　　兹有：现在有；顷按、顷奉：刚刚接到；奉箴：接到来信；</p><p>　　鉴于：考虑到；本拟：本来打算；</p><p>　　业示：已经在；迳与：直接地同；赓即：接着立即；</p><p>　　不日：不久，不多天；不时：随时；</p><p>　　歉难：因不能满足对方的要求而表示歉意；</p><p>　　孔殷：十分急切；售罄：卖完；</p><p>　　鉴宥：请原谅；不克：不能；</p><p>　　瑕疵：微小的弱点；迭函：屡次发信；</p><p>　　为荷、是荷：接受你的恩惠（如复函为荷）；</p><p>　　寒门：称自己贫寒的家庭；寒舍：谦辞，称自己的家；</p><p>　　惠纳、笑纳：接受；卓夺：高明的决断；</p><p>　　时祉、近祉：现在幸福、近来蛮不错；</p><p>　　商安、教祺：经商、教书安好；</p><p>　　卫冕：指竞赛中保住上次获得的冠军称号；</p><p>　　借光：客套话，用于请别人给自己方便或向人询问；</p><p>　　借重：指借用其他人的力量，多用做敬辞；</p><p>　　金婚：欧洲风俗称结婚五十周年；</p><p>　　金兰：可用做结拜为兄弟姐妹的代称，如“义结金兰”；</p><p>　　问鼎：指谋图夺取政权（中性词）；</p><p>　　劳步：敬辞，用于谢别人来访；</p><p>　　蒙尘：（书）蒙受灰尘，（指君主因战乱逃亡大外）；</p><p>　　名讳：旧时指尊长或所尊敬的人的名字；</p><p>　　内眷：指女眷；内人：对别人称自己的妻子；</p><p>　　赏脸：客套话，用于请对方接受自己的要求或赠品；</p><p>　　泰山、泰水：岳父、岳母；</p><p>　　托福：客套话，依赖别人的富气使自己幸运；</p><p>　　当轴：旧时指政府领导者；挡驾：婉辞，谢绝来客访问；</p><p>　　丁忧：遭到父母的丧事；</p><p>　　鼎力：敬辞，大力（表示请托或感谢时用）；</p><p>　　斗胆：形容大胆（多用作谦词）；高堂：（书）指父母；</p><p>　　独夫：残暴无道为人民所憎恨的统治者；</p><p>　　方家：“大方之家”的简称，多指精通某种学问、艺术的人；</p><p>　　父执：父亲的朋友；付梓：把稿件交付刊印；</p><p>　　阁下：敬辞，称对方，多用于外交场合；更衣：婉辞，上厕所；</p><p>　　股肱：比喻左右辅助得力的人（书）；合卺（jǐn）：成婚；</p><p>　　归天、归西：婉辞，人死之称；归省：（书）回家省亲；</p><p>　　海涵：敬辞，大度包容（多用于请人特别原谅时）；</p><p>　　红案：厨工的分工上指做菜的工作；</p><p>　　白案：厨工的分工上指蒸饭之类的工作；</p><p>　　候光：敬辞，等候光临；候教：敬辞，等候指教；</p><p>　　后学：后进的学者或读书人，多用作谦辞；</p><p>　　麾下：将帅的部下，也作敬辞，称将帅；</p><p>　　刍荛（chúráo割草打柴的人）之见：称自己浅陋的看法；</p><p>　　过奖、过誉：用于自己受到表扬或夸奖；</p><p>　　马齿徒增：称自己白白增增长年岁；</p><p>　　涂鸦：称自己字写得不好或画画得不好；</p><p>　　借重：指借用其他人的力量，多用做敬辞；</p><p>　　托福：依赖别人的富气使自己幸运。更衣：婉辞，上厕所；</p><p>　　割爱：放弃心爱的东西（婉辞）；</p><p>　　割席：指与朋友绝交（典出管宁、华歆）；</p><p>　　进见：前去会见，（多指见首长）。晋见：即进见；</p><p>　　进言：向人提意见（尊敬或客气的口气），如“向您进一言”；</p><p>　　觐见：（书）朝见（君主）；</p><p>　　驾临：敬辞，称对方到来；</p><p>　　金兰：可用做结拜为兄弟姐妹的代称，如“义结金兰”；</p><p>　　问鼎：指谋图夺取政权（中性词）；</p><p>　　蒙尘：（书）蒙受灰尘，（指君主因战乱逃亡大外）；</p><p>　　名讳：旧时指尊长或所尊敬的人的名字；</p><p>　　外舅：（书）岳父。代字：女子尚示定亲，如“代字闺中”；</p><p>　　当轴：旧时指政府领导者挡驾：婉辞，谢绝来客访问；</p><p>　　独夫：残暴无道为人民所憎恨的统治者；</p><p>　　父执：父亲的朋友；付梓：把稿件交付刊印；</p><p>　　阁下：敬辞，称对方，多用于外交场合；</p><p>　　后裔：已经死去的人的子孙；</p><p>　　股肱：比喻左右辅助得力的人（书）；</p><p>　　桂冠：光荣的称号。</p><h3 id="文言文写作的方式"><a href="#文言文写作的方式" class="headerlink" title="文言文写作的方式"></a>文言文写作的方式</h3><h4 id="用词"><a href="#用词" class="headerlink" title="用词"></a>用词</h4><p>实词</p><p>虚词</p><p>助词</p><h4 id="句式"><a href="#句式" class="headerlink" title="句式"></a>句式</h4><p>倒装句</p><p>被动句</p><h1 id="信1"><a href="#信1" class="headerlink" title="信1"></a>信1</h1><p>新春の候、時下ますますご健勝のこととお慶び申し上げます。<br>时值新春，敬祝身体健康。<br>先日はわたくしのような者を訪ねてくださり、誠にありがとうございました。ろくなおもてなしも出来ぬまま、あなたのご期待に沿うこと能わず、申し訳なく思っております。<br>先日来访敝人，感激不尽。没有像样的招待，违背了您的期待，真是非常抱歉。<br>ですが、お許しください。わたくしはこの地で静かに過ごしていくのが分相応。もはや形骸ですらありませんが、凶月（きょうげつ）の里を離れるつもりはありません。<br>还请原谅，我正适合于此地安静生活，尽管连形骸已不复存，但我仍不打算离开凶月村。<br>まして新しき都に移るなどと……彼の地に居場所があるとは思えませぬし、求められているとも思えぬのです。<br>您有建议我移居新都等等……但我不觉得除此地以外还存在容身之所，也不觉得会有其他地方需要我。<br>無論、あなたがわたくしを思いやってくださったこと、理解しているつもりです。そのうえでどうかご寛恕くださいますようお願いしたく、こうして筆を執った次第にございます。<br>诚然，我愿意相信您是在为我着想。因此，我执笔于此，恳求得到您的谅解。<br>わたくしどもの汚名を晴らす。そう仰っていましたね。頂いた貴方の著書も、拝読させていただきました。<br>您说过想要雪清我等的污名。您所赠亲笔的著作，我已经拜读过了。<br>少し美文調がすぎるのと、過激な言葉が多いように感じますが、ええなかなか、特に竜胆（りんどう）様のご気性に関する考察は、正鵠（せいこく）を射ていると思います。<br>我觉得文辞有些优雅过头（华丽），激烈的言语也比较多（激进），但优点是有的，特别是关于竜胆大人性情的考察，正中靶心。<br>あの方は、非常に清廉な御人柄でありました。清すぎて魚が棲めぬ……その通りでしょう。高潔をもって鳴る士（さむらい）の頭領たる定めに順じ、息の仕方も忘れているようなところがございました。<br>那位大人是非常清廉的人，水至清则无鱼……正是如此。以高尚、洁净的品性遵循着武家头领的使命，甚至不留有喘息的余地。<br>ゆえに大義の何たるかを常に問い、彼女の水に耐えられぬ者らが生じてしまった。それについてはまったく然り。あの時分、わたくしどもから見ましても、竜胆様は異端でしかなかったのです。理解の及ばぬ御方であると、そう捉えていたことを否定はしません。<br>所以总是在质问大义为何，以至于有人忍受不了她这一池的水。其实可以理解（完全是这样的），在那时的我们看来，竜胆大人也不过只是异端，无法理解的人，这一点无法否认。<br>しかし、いえ、だからこそと言うべきでしょうか。<br>@0但是，也许正因为如此。<br>わたくしや兄様（あにさま）、そして覇吐（はばき）様は、芯から竜胆様を敬愛しておりました。無論、宗次郎（そうじろう）様、夜行（やこう）様、龍水（りゅうすい）様、紫織（しおり）様、皆同じであったと思います。<br>我与兄长大人，霸吐大人，都从心底敬爱着竜胆大人。当然，宗次郎大人，夜行大人，龍水大人，紫织大人，我想也是一样的。<br>それをもって烈士、英傑とあなたは称え、逆賊、奸賊と世人は言う。ですがその真実がどうであれ、すでに歴史上の人物と化してしまった今ではもう、どうでもいいのでございます。<br>因此他们被您称为烈士、英杰，而被世人称为逆贼、奸贼。但无论真相如何，对如今已化为历史人物的他们而言，已经无所谓了。<br>賢しらなことを言ってごめんなさい。あなたの志を軽く見ているわけではありません。この国の未来を背負う若者たちに、正しき過去を学ばせたい。誠、高邁（こうまい）な理想であると存じます。<br>抱歉，说了如同智者@一般的话。我绝没有小看您志向的意思。想让背负着这个国家未来的年轻人了解真正的历史。我深知这是高远的理想。<br>ですが、どうでしょう。あなたの生徒さんたちは、明日の食事に困るほど飢えているでしょうか？この寒空の下、粗末な着物一つで凍えているでしょうか？二親どころか家すらなく、孤独に震えているでしょうか？<br>但这是好是坏呢。您的学生们，有饥饿到为明天的食物困扰吗？有在这片寒冬中，只身穿一件布衣而冻僵吗？还是没有父母，没有家人，孤独地@颤抖着吗？<br>いいえ、そんなことはないでしょう。生まれや血筋の良し悪しで、差別などされていないと聞いています。そうした国になったのだと、他ならぬあなたが仰ったことなのですから。<br>应该没有吧，我听说已不再有人会因为出生血统的优劣而遭受歧视。如今已经成为了这样的国家，这不是别人，正是您告诉我的。<br>それで、わたくしは満足です。この凶月咲耶（きょうげつさくや）、娘の時分に願った夢が叶えられたと知りました。<br>这足以让我满足了。凶月咲耶，已经实现了处子之时祈望的梦想。<br>言ってしまえば、わたくしどもはもう救われているのです。竜胆様に率いられ、あの東征に参加したのは偏に稚拙な恋心……その一心でございました。<br>换言之，我等已经得到了救赎。被竜胆大人率领，参加那场东征纯粹是因为稚拙的爱慕之情……唯此恋心@一颗而已。<br>名利を求めたということも否定はしません。ですがそれは、生きるため。歪み者として生まれた己が、せめて人並みの幸せを得るために必要なことだと信じたからです。ええ、特に兄様はそうでした。この咲耶を愛してくださり……<br>不否定其中有追求名利的意图。但那是为了活着。我相信这是对于生而身负扭曲的我们，为了得到与常人一样的幸福而必要的信念。是的，特別是对兄长大人而言。深爱着咲耶……<br>いえ、やめましょう。老女の惚気など見苦しいだけですね。<br>还是算了吧，老女人的滥情只会让人觉得难看。<br>ともかくわたくしが言いたいのは、昔日の我々が求めた世が、今こうしてあるということ。現在を生きているあなたからすれば不満もあるのでしょうけれど、それは今の世代が解決すべき問題です。年寄りを担ぎ上げるものではありません。<br>我想说的是。我们往日所追求的世界，已然成为了现实。对于活在当下的您而言，可能仍有不满之处吧。但那是当今世代该解決的问题，不该再由老人肩负。<br>ただ、こうも思います。あの輝ける日々、色褪せない情景、わたくしにとって何よりも大切な、黄金の記憶……<br>只是，我是这么想的。那些闪耀着的日子，永不褪色的光景。对我而言，都是无比重要的，黄金色的记忆……<br>それが凄烈で、凄惨で、目を背けるような悲劇を内包していたことも踏まえたうえで、やはり振り返ってみれば美しいと……楽しく、幸せで、夢のようなものであったと、わたくしは思うのでございます。<br>那些壮烈、凄惨，让人想要掩目而过的悲剧@。如今回顾起来，却是非常美丽……快乐、幸福、如同梦幻一般。<br>ゆえによろしければ、優しいあなた。遠く離れた世代の友人。この咲耶が語る夢の話に、お付き合いいただけないものでしょうか。<br>如果可以的话，温柔的您啊。身处远方的忘年之友。可否奉陪一下咲耶的天方夜潭？<br>我が意を得たりと、ほくそ笑んではいけませんよ。こんなことは、今の世の誰一人として信じられぬ話でしょうから。<br>可别因为是正如您意，就傻笑出来哦。毕竟这是如今世界的人不会相信的故事。<br>ええ、おそらくはあなたさえ、悪質な空言であると眉を顰めることでしょう。それくらい、正史からは外れている幻想の類。逸史に彩られた、これは化外（けがい）の物語。<br>就算是您也会觉得是性质恶劣的玩笑，而皱紧眉头吧。就是如此偏离正史的，如幻想般的，被逸史点缀@的化外的故事。<br>伝奇小説の題材としては、それ相応に優秀でしょうね。あなたにそうした才があるなら、本にしてみるのもよいでしょう。そのときは楽しく拝読させていただきます。<br>以传奇小说类而言，应该相当优秀吧。如果您有意的话就写成书吧，届时我会乐意拜读的。<br>では、よいでしょうか？長くなりましたが、これからさらに長大な文（ふみ）となります。<br>那么，可以开始了吗？虽然会变得比较冗长，但接下来的文章会更长。<br>この手の技能は夜行様が飛び抜けていらっしゃいましたが、わたくしも話が長いことに関しては兄様をよく閉口させていた身です。あなたが途中で匙を投げないことだろうかと、そんな心配を禁じ得ません。<br>这种长篇大论是夜行大人最擅长的，而我的多言，也是令兄长厌烦不已的。我不禁担心，您会不会在中途弃读。<br>紫織様や竜胆様なら、おそらく数行で纏めるでしょう。龍水様は愚痴の多い方でしたから、すぐに取り留めがなくなるかしら？宗次郎様はどうでしょう？覇吐様なら総てを笑い話になさるでしょうね。<br>紫织大人和竜胆大人的话，应该能于几行内总结出来吧。龍水大人是爱抱怨的人，应该会立刻度废话连篇吧。宗次郎大人会如何呢，霸吐大人大概会把一切都讲成笑话吧。<br>ああ本当に、なんと愛しく誇らしい、わたくしの同志たちであったでしょう。惚気はしないと言った傍からこのような……どうかお許しください。今、咲耶の心は娘の時分に立ち返りつつあるのです。<br>啊啊，何等令人怜爱，自豪，我昔日的同志们啊。明明刚说了不要滥情，立刻又这样了……还请原谅。现在，咲耶的心又回到了处子的时候。<br>そう、筆を止めれば聴こえてくる、深々と積もる雪の音。それに既知感を覚えるのです。<br>是的，一停下笔就能听见。厚雪不断堆积的声音，让我产生了一种既知感。<br>ええ、既知感。当時のわたくしはそんなものを知らなかったし、正しく言えば概念自体この世に存在しなかったのです。<br>没错，既知感，当时的我并不知道这种概念，准确来讲，<em>这个概念本身就不存在于世间</em>。<br>面食らっておられるかしら？意味が分からぬと首を捻っていることでしょう。ですがこの程度で違和を覚えているようですと、これから先に付き合っていくのは辛いでしょうね。<br>感到一头雾水了吗？因不明所以而歪头@了吧。但只是这种程度就感到不适了的话，可是没法继续读下去的。<br>たとえば輪廻、たとえば修羅道、そして悲想天、八大地獄……人の行き着く先、魂の結末。どれもあなたからすれば死後という概念に当て嵌る一例として、真偽はともかく常識の範疇であるはず。<br>比如轮回，比如修罗道，以及悲想天，八大地狱……人的归宿，灵魂的终末。在你看来，无论哪个都是死后的这一概念的例证，不说真假，全都应该在常识的范畴。<br>ですがわたくしどもが生きたとき、それらは根こそぎ何処にも存在しませんでした。<br>但是，在我们的时代，是不存在这些的。<br>想像してみるとよいでしょう。罰も救いも再起も何も、一切存在しない無道の世を。法（かみ）がいないということを。<br>试着想象一下吧，没有惩罚，没有救赎，没有重来，一切都不存在的无道之世，没有[法则]（神明）。<br>死はただ、暗黒。無明であり、ゆえに信心というものが生まれない。畏れというものが何処にもない。<br>死亡唯有黒暗。无明，也自然不会诞生信仰。畏惧@也不复存在。<br>人たるものが本来持ちえる、潜在的な敬虔さ。高みの何者かに見られているかもしれないから、行動に制限をかけるという枷が無いこと。<br>人本应具备的，潜意识下的敬畏、虔诚。因为也许被高位的存在所注视着，而行动有所限制。这种枷锁一旦消失的话……<br>自分を律するものは自分でしかないということ。<br>能约束自己的也唯有自己。<br>平たく言えば、誰もが神を僭称していたと表現すればよいでしょうか。このわたくしも例外ではなく、凶月咲耶の宇宙のみを絶対の法として生きていました。それがどれだけ危険なことか、あなたならお分かりでしょう。<br>简言之，我们可以说所有人都自诩为神，我也不例外，以凶月咲耶这个宇宙的绝对法则而活着。你应该明白这是多么危险的事吧。<br>自己愛性人格障害……昨今ではそういう名で呼ばれる病理だそうで。あなたが著書の中で我々をそう分析していらしたこと、素直に感銘を受けています。当時は、それがごく当たり前な人の在り方だったのですから。<br>自恋性人格障碍……现在似乎用这个名字来称呼这种病，您在著作中也如此分析了我们。我由衷地感谢您（铭感）为在那时，人的生活方式莫过于此。<br>夜行様曰く、天狗道。これはそうした世を生きたわたくしどもの物語。<br>夜行大人有言，名为天狗道。这是我等生活于此世的故事。<br>あの意地悪く、洒落者で、純粋だけれど酷く濁った陰陽師殿……我々の中でもっとも天狗の世に適応して見えた彼は、こう仰っていました。<br>那个爱捉弄人，洒脱@、纯粹却又极度浑浊的阴阳师殿下……乍看之下在我们之中最适合天狗之世的他，曾这样说过。<br>神など不要。<br>不需要神。<br>そして竜胆様は、こう仰っていました。<br>然后，竜胆大人这么说了。<br>人には神が必要だ。<br>人需要神。<br>紫織様と宗次郎様は言ったものです。<br>紫织大人和宗次郎大人则是这样说的。<br>もう適当な奴が神になれ。<br>谁@来当神都行。<br>おかしいでしょう？これについては意見が本当にばらばらで、龍水様など最後まで議論に加わらなかったくらいです。<br>很可笑吧？意见四分五裂，甚至龍水大人直到最后都没有参加讨论。<br>ただどんな結論になろうとも、それに付き合ってやると言わんばかりの態度は、まあその、わたくしの目から見ても愛らしくありましたが……<br>那种无论结论如何，自己都会奉陪的态度，该怎么说呢，在我看来，是非常可爱……<br>覇吐様と兄様が、どんな意見であったかはまだ伏せておきます。そしてもちろん、わたくしも。<br>霸吐大人和兄长大人的意见暂且埋个伏笔。当然，我也一样。<br>この文を読み終えたとき、あなたがどのような感想を持ったか、よければお聞かせ願いたく。これより逸史を紐解いていきたいと思います。<br>当您读完这句话时，您有产生什么感想吗？如果您愿意的话，还请告诉我。接下来，我要解开逸史上的绳系。<br>そう、あれは、新春の候。今と同じく、雪の降る秀真の都が始まりでした。<br>没错，那是，新春之时，和现在一样，在雪花飘落着的秀真之都，一切开始了。<br>我々の出逢い。我々の定め。思えばあの瞬間に、総ては決まっていたのかもしれません。<br>现在回首，也许我们的相遇，我们的命运，在那一瞬间已经定下了。<br>春が来れば、この雪も消え去るように。<br>正如春阳消瑞雪一般。@<br>狂い咲く、刹那の徒花が散りゆくように……<br>正如狂放盛开，刹那凋零的徒花一般……</p><h1 id="信2"><a href="#信2" class="headerlink" title="信2"></a>信2</h1><p>こうしてわたくしたちの東征は、圧倒的な大敗というかたちでその緒戦を終えました。<br>就这样，我们的东征初战以压倒性的大败告终。<br>さあ、どうでございましょう。すでにあなたは、困惑しておられるのではないでしょう。<br>觉得如何？想必您已感到困惑了吧。<br>自分が知らされている歴史と違う。穢土不和之関。いえ、今風に言うなら関ヶ原でしょうか。そこで交戦の記録などなかったはずだと。<br>与您所知道的历史不符，在秽士的不和之关，不，现在该称之为关原吧，那里并没有留下任何交战记录。<br>いやそれ以前に、化外の描写がまりにも荒唐無稽で、たちの悪い冗談としか思えない。そう考えておられることと存じます。<br>在此之前，对化外的描都写过于荒谬，只能让人以为是性质恶劣的玩笑，我知道您也是这么想的。<br>あなた方の認識では、化外すなわち異民族。朝（ちょう）に臣従していない穢土の原住民というものでしかなく、夷（えびす）と言ったところで結局は人。このような超常の魔物然とした存在など、現実的に有り得ない。馬鹿げていると思うはずです。<br>在你们的认知中，化外即为异族。只是不归化的秽土土著，尽管被鄙为蛮夷，但终究还是人。而在故事中这种超越常理的魔物在现实中必不可能存在，只会让人觉得是戏弄之言。<br>歪みという概念も、穢土との混血児をさした蔑称にすぎないと。。。今ではそのように解釈されていますからね。早々からついていけないと呆れられても、仕方がないと思っております。<br>扭曲者这一概念也不过是对秽土混血儿的蔑称……现在的认知就是这样的。您觉得跟不上节奏，陷入无奈，也是没办法的事。<br>ええ、実際に、あなた方の認識も間違ってはおりません。当時のわたくしたちよりも、あるいは正答に近いとさえ言えるでしょう。<br>其实，你们的认知并没有错。甚至可以说比当时的我们更接近真相。<br>しかしその上で断言します。これは総て真実であり、わたくしにあなたをからかう意図などまったくないと。<br>但我敢在此之上断言，这些全都是真实的，其中绝无一丝一毫捉弄您的意思。<br>まあ、信じるのは難しい話でしょうし、それを強要するつもりもありませんが、この緒戦における大敗が歴史から抹消されているという件については、幾らか理解も及ぶでしょう。<br>嘛，应该很难相信吧。我也不打算强行让您认可，但是关于这次惨遭大败的初战在历史上被抹消一事，您或许有所理解了吧。<br>早い話、外聞が悪いということですね。はためく皇旗のもと、陛下の神兵たる東征軍は破竹の勢いで進軍した。ということにしておきたい政治。あからさまに言えば見栄と申しましょうか。少なからず、史書にはそういう面があるということ。常識のはずです。<br>简而言之就是面子。在高扬的皇旗之下，陛下的神兵东征军以破竹之势胜利进军……政治上必须得如此。直白地说，可以称之为虚荣作祟吗，不少的史书都有这样一面，也是常识。<br>実際、竜胆様は歴史に名を残そうなどと考えていたわけではないでしょうから。。。最初に申しました通り、今現在のわたくしどもがどのように評価されているかは、どうでもいいのでございます。<br>事实上，竜胆大人应该没有想过在史书上留名这样的事吧……正如我在开始所说的，事到如今，无论我们被予以什么样的评价，都已无所谓了。<br>しかしこうして振り返ってみるに、あのときの大敗で亡くなった方々を史上から消すというのは、竜胆様のお好みではないとも思いました。<br>但如今回首，将那次大败中的牺牲的烈士从历史上抹消一事，想必竜胆大人绝不会认可吧。<br>そしてもちろん、このわたくしも、生涯初の禍憑きで引き起こされた惨劇を忘れたことなどありませんし、今も重く受け止めています。<br>无论，我也一样，从未忘记今生第一次引发灾凭所造成的惨剧。现在也觉得非常沉重。<br>そうした意味で、あなたには知ってほしい。そのよう願うのは、図々しいことでしょうか。<br>这种意义上，我希望您能知道。这种请求能被算作是厚脸皮吗？<br>我々のことはどうでもいい。ですがあそこで斃れた方々を、初めから居なかったようには思わないでほしい。他の何を信じていただかなくても構いませんが、それだけは、どうか切に願います。<br>我们的事情已经无所谓了，但是我不想让那些阵亡的烈士被认为一开始就不曾存在过。即使不相信其他事也好，但这一点请您务必相信。<br>それくらい、あれは凄惨な出来事で、現実にわたくしたちは壊滅しました。<br>就是如此惨烈，现实意义上我们也遭到了毁灭。<br>総員死傷。一万名からなる東征の第一陣で無傷な者など一人もおらず、死者は九割を超えました。事実上の全滅と、そう言って何ら問題はないでしょう。<br>全员的死伤，一万东征军初阵中无人无伤，战死者超过九成。说是事实上全灭也没有问题。<br>我々も、当然無事ではすみませんでした。しかしあなたが、もしもここまでの話を信じていらっしゃるのなら、逆に解せぬとお思いかもしれません。<br>当然我们也不可能幸免。但如果您能相信这些事的话，反而会感到困惑不解吧。<br>では、どうしておまえは生きていると。それほどの敵に蹂躙されて、なぜその程度で済んでいると。<br>所以，为什么我还活着，受到如此敌人的蹂躏，为何只有这些。<br>ええ、まさしく然り。当時のわたくしたちにしましても、それが最大の謎でした。<br>嗯，确实如此。在当时的我们看来，这也是最大的谜团。<br>両腕を失った紫織様。猛毒に冒された宗次郎様。光を失った夜行様。原形を保てなくなった爾子様に丁禮様。<br>紫织大人失去了双臂，宗次郎大人遭到剧毒侵蚀，夜行大人失去了光明，还有无法维持原形的尔子和丁礼大人……<br>兄様は禍憑きの力そのものを失いましたし、わたくしも精神の均衡を崩しました。それぞれ最大の武器を奪われたも同然でしたが、しかし生きている。死んではいない<br>兄长大人失去了灾凭之力，我的精神也崩溃了。各自被剥夺了最强的武器，但仍然活着，并没有死。<br>その事実に、誰よりも首を傾げていたのは他ならぬわたくしたち自信です。最前線で天魔と戦い、完膚なきまでに打ちのめされて、命を拾うなど有り得ない。<br>对这个事实感到大惑不解的人，不是别人，正是我们自己。在最前线与天魔战斗，被打得体无完肤，不可能活命。<br>それほどまでにあれは絶望的なものでしたし、そもそも彼らがなぜ退いたのかも分からない。<br>当时就是如此绝望，甚至也不知道他们为什么会撤退。<br>生き残りに気付かなかった？大方を潰したので満足した？いいえ、絶対にない話です。あれはそのように甘い存在ではありません。<br>是因为没有注意到幸存者吗？还是仅仅击溃了大部分就满足了？绝无此事，他们不会天真如此。<br>では誰かが撃退したのかと言われれば、それこそ一番有り得ない。ええ、本当に謎だったのです。少なくともあのときは。<br>那么，是有其他人击退了他们吗？这正是最不可能的。嗯，真是个谜团啊，至少当时是……<br>それについての真相はいずれ明らかになりますが、今はまだ伏せましょう。単に死ななかったというだけの我々よりも、さらに奇怪なことがありましたから。<br>关于此事的真相早晚会水落石出，暂且个伏笔吧。比起仅是没有死掉的我们，有着更为离奇的事。<br>竜胆様と覇吐様は、このとき間違いなく死んでたのです。なにの比喩でもなく、そのままの意味で、御二方は亡くなられました。<br>竜胆大人和霸吐大人，那个时候绝对是死了的，不是比喻，而是真正意义上的死亡。<br>ではなぜ？当然の疑問でしょうが、それにつきましてもここで語ることは出来ません。<br>那是为何？抱有此问理所当然。于此相关的事现在也无法吐露。<br>ただこの敗北が、我々にとって決定的な契機となったこと。異常な状態からの再起が、必然としてわたくしたちに変質を求めたこと。<br>只是这次的败北，成为了我们决定性的契机，于窘态之中再度奋起，必然会是相应的质变。<br>東征戦争はまだ終わらない。ゆえに前へ進まなければならない。疑問も不安も押し込めて、先へ先へ、勝利するまで。<br>东征还未结束，于此我们必须前进，咽下疑问与不安，不断前行，直至胜利……<br>当時のわたくしたちがどうだったかを、嘘偽りなく記していきたく思いますので、諸々の謎は棚上げにしたままとさせてください。<br>我想不带谎言地真实记录下当时的真实情况， 还请容我将这些谜团暂且搁置吧。<br>しかし、あなたはもう辟易とされておられるかもしれませんし、読み手の気分を無視したまま駄文を書き連ねる愚は控えたいともいます。<br>或许您已有些吃不消了吧，考虑到读者的心情，我也不想进行多余的废话。<br>ゆえにひとまず、ここで中断としておきましょう。この後も逸史の物語を知るか否かはあなたの判断にお任せします。<br>所以暂且止步于此吧。接下来是否要了解逸史的故事，将取决给您的判断。<br>壊滅した我々のもとへ、東征の本隊を引き連れた中院冷泉様が現れたのは数日後。続きを書くなら、きっとそこからになるでしょうね。<br>跟随在溃败的我们脚步之后，中院冷泉大人率领的东征本队于数日到达……若故事还要继续下去的话，果然得从这里开始。<br>先に申し上げた通り、このときのわたくしは精神の均衡を失っておりましたから、あくまでも伝聞ということになりますが。<br>就如我之前所说，当时的我精神已经崩溃了，至少是之后听人说的。<br>皆様、相当な衝撃を受けておられたと聞いています。わたくしも含めて、あまり格好の良い状態でなかったことは確かですね。<br>据说大家都受到了相当的冲击，包含我在内，当时的状态确实不太好。<br>そうした脆さは、思えば当然のことでしょう。何よりも己を信じ、愛していた我々ですから、自負を砕かれるということは世界の崩壊に等しかったのです。<br>这种脆弱也是理所当然的。正因为我们无比相信自己，爱着自己。自负被打破等同着世界的崩溃。<br>誰（た）がために立たんとするや。どなたも、それが見えなくなっていたのでしょう。ただお一人を除いては。<br>为谁而立……无论是谁都看不清这一点了吧。唯一人除外。<br>竜胆様は本当にお強いの御方、あの方だけは、やはり我々と質が違う。<br>竜胆大人当真是心性强大之人，唯那位大人有着与我们质的不同啊。<br>皆、強くそのように思った日のこと。<br>大家都强烈地感悟到的那一天。<br>この続きを、まだ知りたいと思われるか。そしてその場合、どちら側の話がよろしいか。<br>您还想了解接下来的故事吗？ 在这种情况下，您想知道哪边的故事？<br>わたくしたち女の側と、覇吐様たちの殿御側の。。。このときは、なにやらそのようになっていたらしいのです。どうも少し、気恥ずかしいことですね。<br>是我们女子同胞的故事？还是霸吐大人他们那些男人的故事？在当时事情好像就变成了这个样子，总觉得有点不好意思。<br>おそらく無意識に、お互い顔を合わせたくなかったのでしょう。本当、格好の悪いこと。今思い返すと、微笑ましくさえ感じるほどです。<br>也许是由于彼此下意识地忌讳着见到对方吧。真是难看啊。现在回首，不禁觉得好笑。<br>さあ、それではそういうことで、お返事を待っております。<br>那么就是这样吧，我敬候着您的回信。<br>あなたはいったい、どうされますか？<br>您到底会作何选择呢？</p><h1 id="信3"><a href="#信3" class="headerlink" title="信3"></a>信3</h1><p>そして<br>然后<br>わたくしたちの東征は、そのように終わりました。<br>我们的东征，以这样的形式结束了<br>戦の結末だけを見るならば、勝利したのはわたくしたち、穢土を制圧し、化外を斃すという当初の目的は見事果たされ、この神州に新たな世が訪れることは、確かに約束されたのです。<br>以战斗的结果来看的话是我们获胜了。压制秽土讨伐化外这样最初的目的精彩地完成了，神州大地将迎来崭新的世界，确实如承诺一般。<br>ええ、これより世界は変わっていきます。穢土という異物がなくなったことで純化され、本当の理が動き始める。<br>对，世界将就此改变。随着秽土这一异物的消失而得到纯化，正当的理将开始运作了。<br>それを夜明けと言うのは違うでしょう。なぜなら、黄昏の後にくるのは無名の闇。。。事実このときのわたくしたちは、そうした夜の中にいたのです。光を失ったことにより、前に進むことが出来なくなっておりました。<br>若说这是黎明不太合适吧。因为在这片黄昏之后，到来的是无名的黑暗……事实上在这个时候我们就处在这样的长夜之中。失去了光明，难以在这片黑暗中前行。<br>そう、特に覇吐様は誰よりも自己を責めて消沈され、許されるなら抱いてやりたいと、心より思ったほどでございます。<br>是的，特别是霸吐大人比谁都自责而消沉无比，如果能被允许的话真想拥抱他，我发自内心地想着。<br>ですが、そのようなことは出来なかった。わたくしの都合ではなく、覇吐様がそれを望んでなどいなかったから。<br>但这是做不到的。不是考虑到我的情况，而是霸吐大人并不希望这样。<br>あの方を癒せるのは、竜胆様しかいないのだと分かっていたから。<br>我明白能治愈那位大人的唯有竜胆大人一人。<br>我々の将、東征を率いた気高い姫、久雅竜胆はもういない。その事実が皆に重くのしかかり、勝利を祝う気持ちなど持てなかった。<br>我等的主将，率军东征的高贵公主，久雅竜胆已经不在了。这个沉重的事实压垮了我们，连祝胜的心情也全无。<br>わたくしや龍水様はもちろんのこと、あのいつも独立独歩な宗次郎さまや紫織様、夜行様でさえ気抜けしておられたのを覚えています。はい、言うまでもなく兄様も。。。<br>自不用说我和龍水大人，就连一直以来我行我素的宗次郎大人，紫织大人，甚至夜行大人都有些气馁。是的，不用说兄长大人也是如此……<br>どこか弛緩し、覇気を持てず、まるで糸の切れた凧のようにとでも言うべきでしょうか。<br>松懈着，失去了霸气，说是如短线的风筝一般最贴切吧。<br>ああいったものをこそ、敗北感を表現するのだろうと思います。戦に勝利はしたものの、このときのわたくしたちは間違いなく敗兵でした。<br>这样一副败相，可以说是败北感吧。纵然取得了战斗的胜利，但此时的我们却是毫无疑问的败北之兵。<br>胸に誉れの温かみはなく、輝けるものを見出せず、ただ漠然とした不安、恐怖、これから何か恐ろしいことが始まりそうだ。。。<br>胸中没有荣誉加身的激动，眼中亦无丝毫光彩。有的只是模糊的不安感与恐惧。<br>程度の差はあれ、皆がそういったものを背負っていました。なぜなら、あのときいったい何があったかまったく理解できなかったのですから。<br>程度参差，大家都背负着这种心情。毕竟，那时发生的一切我们都没能理解。<br>なぜ竜胆様は逝ったのだろう。その身に何が起こったのだろう。答えは不明。どれだけ考えても分からない。<br>为何竜胆大人逝世了？她身上到底发生了什么？问答不明，不管怎么想都无从得知。<br>強いて言うなら夜行様、あの方だけは推論を立てられていたのかもしれません。帰還のの間に何度か議論もしましたが、そこでの態度を振り返るに、そうだったのではと思います。<br>非要说的话夜行大人，那位大人也许推测出来了什么。在归程途中也讨论过几次，如今回想那时他的态度，原来如此。<br>そしてそれは、夜行様でも明言を避けたということ。いつも謎めいたことを仰る方でしたが、基本的には饒舌な彼が言葉を濁すなど初めてで。。。つまりそこまで事態は重い。<br>而且，就连夜行大人也回避着明言。总是说些神秘的话，向来饶舌的他却头一次地含糊其辞。也就是说，事态已经严重到这种地步了。<br>夢や冗談ではないのだと痛感した我々は、秀真への距離が近づくごとに言葉少なくなっていき、ある種の疎外感覚えるようになっていました。<br>既非梦境也非玩笑，深知如此的我们。随着离秀真愈近愈加缄口无言，像是存在着某种疏离感一般。<br>いいえ、あれは嫌悪感だったのかもしれません。<br>不，也许是厌恶感吧。<br>わたくしたち以外の者は、皆一様に笑い昂ぶり、万歳、万歳、目出度い、目出度いと、それしか言おうとしなかったから。<br>除我们之外的人都放声大笑着，高呼着万岁，可喜可贺，只是这副样子。<br>まるでそう、彼らがカラクリ細工のようで。。。<br>他们就好像是一种机关工艺品一样……<br>竜胆様の死を悼まない、その不条理に疑問を持たなければ怒りもしない。<br>既不为竜胆大人的死哀痛，也不对这不合理的事抱有疑问，也自然没有悲愤。<br>なんでこれは。どういうことだ。この者たちは本当に自分と同じ人間なのか。<br>为什么会这样？到底怎么回事？这些人真的和我们一样同为有血有肉的人类吗？<br>などと。。。ええ、思いましたとも。身が震えるほどに恐怖と嫌悪を感じながら。<br>等等……这样想过。一边感受着令人颤抖的恐惧与厌恶。<br>思えばそれが、この後に繋がる総ての兆候だったのかもしれません。<br>如今想来，这也许就是连接着之后一切的征兆吧。<br>竜胆様がそうであったように。異端と呼ばれた彼女の魅せられていた我々は、彼女のいない空下で異端と成り果てたのでしょう。<br>正如竜胆大人一样。被她的，世人称之为异端的灵魂所吸引的我等，在她不在的这片天空下也被当作了异端。<br>それを後悔はしていません。恥であるとも思いません。ただこのときは悲しかった。なぜ我々しかいないのだと。<br>但我并不后悔，也不觉羞耻。当时有的只是悲愤。为何会如此作想的只有我们？<br>竜胆様に率いられたのは皆同じなのに、なぜあなた達のなかには彼女のの欠片がないのだと。<br>明明都由竜胆大人率领着东征，为何你们的心中不曾有过她的一块残片？<br>それほどまでに、久雅竜胆という存在は軽いのかと。<br>久雅竜胆这个存在对你们来说就这种份量吗？<br>忘れないで。捨てないで。我らの将を当たり前に風化させようとしないでほしい。<br>不要忘记，不要舍弃。不要理所当然地将我们的主将淡忘。<br>なぜあなた達は、自分のことしか考えぬのだ。。。<br>为何你们的眼中只有自己……<br>と、笑ってしまう話です。ほんのついこの間までは、己も彼らと同じものであったくせに。<br>就是这样惹人发笑的事。就在不久之前，明明我们也跟他们一样。<br>自己愛のみで駆動する、意志なき軍勢。黄昏を消した後にひしめき合う無明の群体。。。<br>这些由自爱所驱动着，无意志的士卒。在这片黄昏消逝之后，聚集在一起无明的群体……<br>初めてそれを認識し、初めて恐ろしいと思った日のこと。<br>那是我初次认识到，也是初次感到恐惧的一天。<br>秀真に帰り着いた我々が、その後どのようになっていたか。。。あなたもご存知のことでしょう。そこは概ね、史書の通りでございます。<br>而回到秀真的我们，在那这之后遭遇了什么呢……您应该有所耳闻吧。大致上如史书所记载的一样。<br>そう、あの論功行賞。冬は開けて春となり、出陣の日から丸一年が経過していた卯月の某日。<br>是的，那次论功行赏。冬去春至，时隔出征一年卯月的一天。<br>それぞれ功に見合った冠位を授けると仰った、中院の御当主様。<br>说着要依据各自的功劳授予应得冠位的中院当家主。<br>御所において、皇主陛下を初めとした文武百官そろったその場で、己こそがここの主と言わんばかりの彼の諌める者などは、一人たりともいなかったのです。<br>在皇宫里，以皇主陛下为首的文武百官齐聚的会场上，他把自己视为这里的主人一般，而没有一个人敢于劝谏。<br>あの場の中院冷泉様は、何か名状しがたく鬼気迫った、穢土の天魔たちを遙かに在する禍々しいものであるかのように見えたのです。<br>那个场合的中院冷泉大人，像是被某种难以名状的鬼气凭依，甚至远比秽土的天魔众更为不祥。<br>そしてそれに追従する、この国というものに失望し。。。<br>于是我们对追随在他之后的这个国家失望了。<br>竜胆様の血で濡れた褒賞を、その犠牲がどれだけ重く尊いか理解しない者の手によって渡される。そのようなこと、許容できるはずもなかったから。<br>沾染着竜胆大人鲜血的奖赏，经由不知其牺牲之重，毫无敬意的人之手交付。我们绝不可能容许这样的的行为。<br>ええ、あとは申しましたように史書の通り。。。<br>是的，之后的发展正如之前所说，如史书上所写的一样……<br>これより、逆賊としてのわたくしたちが始まったのです。<br>从这里开始，作为逆贼的我们的故事开始了。</p><h1 id="信4"><a href="#信4" class="headerlink" title="信4"></a>信4</h1><p>さあ、どうだったでしょう。これにてわたくしたちの物語、神咒神威神楽は終わりです。<br>那么，您觉得如何呢？至此我们的故事，神咒神威神乐就结束了。<br>疑問な点はお有りでしょうか？信じられないことなら星の数ほどお有りでしょうし、それにつきましてはそちらのご判断に任せすることにしておりますが、単に説明の不備を指摘されたらどうしようかと、少し心配しております。<br>您或许有很多疑问吧？难以置信之事多如繁星，还请将这些都交给您的自主判断吧。虽然有些担心如果被您指责解释不足，到时又该如何谢罪呢。<br>まあ、おおよそ察しはつくのですが。おそらくそれは新世界の法、新たな色は具体的にどのようなものであるかということではないかと思います。<br>嗯，您大抵也猜到了吧。也许那就是新世界的法，抑或新世界的色彩到底又怎样一回事呢。<br>ですが、そのことについて、黙秘というわけにはいかないでしょうか。これは単なるわたくしの怠慢ではなく、相応に熟慮したうえでの考えなのです。<br>但是关于这点，还请容许我保密吧。并非是因为怠慢，而是我在深思熟虑后得出的结论。<br>大欲界天狗道。。。波旬は斃され、座が代わった。そしてその理が今を照らしているのですから。今を生きるあなたに知らせて良いものかと思うのです。<br>大欲界天狗道……波旬被打倒，座已然更替。新的理照耀着如今的世界，而让活在当下的您知道此事是否为好呢。<br>あなたがわたくしの話を信じる信じないは別にして、それが座に関わったものの責任でしょう。わたくしどもには、次代の若者たちを見守っていく義務があります。<br>无论您是否相信我的话，那都是和座有牵连之人的责任。我们有着守望下一代年轻人的义务。<br>これは夜刀様。。。いいえ、本当はもっと凛々しいお名前の方のですが、彼が遺してくれた気概と誇りを重んじてのこと。それを受け継いだ者の一人として、美風を絶やしたくはないのです。<br>这正是夜刀大人……不，他的真名其实更为飒爽，所遗留下的气概和荣耀，我们视其为瑰宝。作为继承者之一，我不希望这种风骨断绝。<br>おまえたちはそんなことを知らなくてよいから、ただ日々の刹那を精一杯駆け抜けろ。。。と、あの方は仰るでしょうね。わたくしも同感です。<br>你们没必要知道，尽情度过每日之刹那便好……那位大人应该会这样说吧。我也是同感。<br>それにこれは勘ですが、おそらくあなたの周りにも、似たようなことを仰りそうな方がおられるのではないでしょうか。お心当たりがあるのなら、試しに尋ねてみるのを勧めます。<br>不过这只是我的直觉，也许您的身边也有人会说出类似的话吧。如果您有头绪的话，不妨试着去寻找一下。<br>ええ、きっとわたくしに賛同してくださるだろうと思いますので、それはもう、間違いなく。<br>相信对方肯定也会赞同我的吧，这一点上我已确信无疑。<br>近々、ご友人方の結婚式がお有りだと伺いました。なんでも花嫁は、あなたの再従姉（はとこ）にあたるそうで。きっとその方も、同意見のような気がいたしますよ？<br>听闻您的朋友最近要举办婚礼了，而且新娘还是您的表姐。相信那位大人也会赞同吧。<br>では、もうこのあたりで、これ以上は、年寄の無駄話にしかならぬように思いますから、筆を置かせていただきます。<br>那么，就到此为止吧。继续下去的话也只会是老人的唠叨话，便于此置笔。<br>ああ、しかし、一つ言い忘れておりました。確か冒頭において、わたくしが思う座の有り様というものを、はぐらかしたままでしたね。それを語っていませんでした。<br>啊，不过有点事忘记说了，在开头提到的关于座的形态之事有些含糊不清。<br>そう、あくまでわたくし個人の心情ならば、どんな座が望ましいか。。。<br>是的，至少就我个人来言，希望能有怎么样的座呢……<br>覇と覇の共存は、黄昏の女神以外、絶対に成されない。そして波旬に滅ばされた魂は、やはり絶対に再生できない。<br>除黄昏女神以外，霸道与霸道间的共存是不可能的。而被波旬所毁灭的灵魂也不可能再生。<br>それらの鉄則を踏まえた上で、言わせていただければ唯一つ。<br>在这些铁则的前提下，我能说的唯有一点。<br>座に記憶されている歴代神格たちの理を、一つに纏めて法と成すこと。<br>将记录在座上历代神格之理，统一为一种法则。<br>明星も黄金も水銀も、そして黄昏ももういない。彼らをを蘇らせることは出来ませんが、その治世がどのようなものであったかは再現することができるのです。<br>明星、黄金、水银，还有黄昏都已不复存在了。我们没有方法让他们复生，但可以再现他们的治世。<br>ゆえに各々、人の魂が行き着く先はその人それぞれが選べるように、何を求め、何を感じながら生きたのか。。。もっとも引力を感じる理に自然と魂が引かれるように。<br>因此让每个人灵魂的末路皆由自己选择，无论是追求着什么，抑或感受着什么而活……灵魂被这种自然而然的引力所引导……<br>他者を認める多様性。各々の役割を明確にした住み分けと、変化次第でいかようにも移住が可能という自由性。<br>容纳他者的多样性，明确地各担其责，能根据需求而做出改变的自由性。<br>化外を生まぬ八百万（やおよろず）、他者の法もあってこそ、初めて機能する絆の覇道。。。とでも言うべきでしょうか。わたくしの好みとしては、そのようなものがあればよいと思います。<br>不会造就化外的八百万，正因是接容他者的法则才能构成牵绊之霸道……这样称呼比较合适吧。而于我个人而言这样便好。<br>まるで今の世に、数多の宗教観が存在しているのと同様に。<br>就如当下之世，共存着各种的宗教观一样。<br>随分と長く生きたわたくしも、そろそろお迎えがくるでしょう。そのとき懐かしい仲間たちに、また会えればよいなと思います。<br>已度过漫长光阴岁月的我也将一样迎来自己的终章了吧。但愿届时能够再见怀念已久的同伴们。<br>ずっと、ずっと、先延ばしになったままで、かなりのことお待たせしている約束がありますから。<br>那个一直，一直被拖延至今的约定，已经让大家久等了。<br>では、今度こそお別れです。この凶月咲耶、現実のあなたに出会えてよかった。奥羽では、お世話になりましたね。<br>那么，这次是真的再见了。凶月咲耶，能在现实中遇到您真的是太好了。<br>綾瀬　香純様。<br>绫濑香纯大人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中国古代常用敬词：&quot;&gt;&lt;a href=&quot;#中国古代常用敬词：&quot; class=&quot;headerlink&quot; title=&quot;中国古代常用敬词：&quot;&gt;&lt;/a&gt;&lt;strong&gt;中国古代常用敬词：&lt;/strong&gt;&lt;/h2&gt;&lt;h2 id=&quot;1、“拜”字族：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="汉化" scheme="http://example.com/tags/%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>算法：哈希表</title>
    <link href="http://example.com/2024/08/06/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>http://example.com/2024/08/06/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2024-08-05T23:52:09.000Z</published>
    <updated>2024-08-09T03:26:05.475Z</updated>
    
    <content type="html"><![CDATA[<p>哈希表的具体内容参照以下内容</p><h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></h3><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p><p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li><li><code>s</code> 和 <code>t</code> 仅包含小写字母</li></ul><p><strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><p>数据结构：哈希表的语法和例题</p><p>简易的哈希表，这里建立一个字母表的统计数组，分别扫描两个字符串，s串中出现某个字母，对应统计数组的计数就增加一个，t串和这个相反，最后遍历整个统计数组，如果两个字符串符合预期，则最后统计数组中的每一个数都是零。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            record[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            record[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(record[i]!=<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></h3><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的</em> 交集 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[9,4]</span><br><span class="line">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result_set;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">nums_set</span><span class="params">(nums1.begin(),nums1.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums_set.<span class="built_in">find</span>(num)!=nums_set.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                result_set.<span class="built_in">insert</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.<span class="built_in">begin</span>(), result_set.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h3><p>简单</p><p>相关标签</p><p>相关企业</p><p>提示</p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map1;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map1.<span class="built_in">count</span>(target - nums[i]))</span><br><span class="line">                <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;i, map1[target - nums[i]]&#125;;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map1[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="排序加双指针"><a href="#排序加双指针" class="headerlink" title="排序加双指针"></a>排序加双指针</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        temp=nums;</span><br><span class="line">        <span class="type">int</span> n=temp.<span class="built_in">size</span>();</span><br><span class="line">       <span class="built_in">sort</span>(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">end</span>());</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">while</span>(i&lt;j)&#123;  </span><br><span class="line">           <span class="keyword">if</span>(temp[i]+temp[j]&gt;target)j--;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(temp[i]+temp[j]&lt;target)i++;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(i&lt;n&amp;&amp;nums[k]==temp[i])&#123;</span><br><span class="line">              ans.<span class="built_in">push_back</span>(k);</span><br><span class="line">              i=n;</span><br><span class="line">          &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(j&lt;n&amp;&amp;nums[k]==temp[j])&#123;</span><br><span class="line">              ans.<span class="built_in">push_back</span>(k);</span><br><span class="line">              j=n;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(i==n&amp;&amp;j==n)<span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></h3><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li><code>n == nums1.length</code></li><li><code>n == nums2.length</code></li><li><code>n == nums3.length</code></li><li><code>n == nums4.length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>-228 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 228</code></li></ul><h4 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h4><p>使用哈希表进行解答时的关键，首先四个数的和是0，这个式子具有四个自由度，而要解决这个问题，就需要四次方的时间复杂度，这个过不了时间限制，因此需要对其进行降次处理，我们直到，计算机里是可以出现多个变量的，我们不像解决数学问题一样，要解锁为单自由度才能解决问题，一次维度的遍历就可以消除一个变量。</p><p>这里由这个四数之和的问题，发现时间复杂度的变化有以下规律，高次向低次数转化的方式可以是，将次方转化为加法，在这边，我们嫌弃四个变量太多了，可以选择冻结两个，就是将两个变量的和视为常数，这样就可以实现降低次数的目的。<br>$$<br>a+b+c+d&#x3D;0;\\<br>c+d&#x3D;k(constant);<br>$$<br>这里我们只需要用一次二重循环就可以把c+d的组合找出来，回到题目本身可以知道，我们最后需要得出的只有这样的四个数字到底有多少组，不难知道，后续在循环过程中，对于单次的操作，每次操作对于次数的贡献都需要乘以a+b的结果的数量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B, vector&lt;<span class="type">int</span>&gt;&amp; C, vector&lt;<span class="type">int</span>&gt;&amp; D)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; umap; <span class="comment">//key:a+b的数值，value:a+b数值出现的次数</span></span><br><span class="line">        <span class="comment">// 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a : A) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> b : B) &#123;</span><br><span class="line">                umap[a + b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 统计a+b+c+d = 0 出现的次数</span></span><br><span class="line">        <span class="comment">// 在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : C) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> d : D) &#123;</span><br><span class="line">                <span class="keyword">if</span> (umap.<span class="built_in">find</span>(<span class="number">0</span> - (c + d)) != umap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    count += umap[<span class="number">0</span> - (c + d)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里用到了范围内循环的语法知识，这里的循环遍历通常用于一个集合。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:sum)</span><br></pre></td></tr></table></figure><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h4 id="哈希法"><a href="#哈希法" class="headerlink" title="哈希法"></a>哈希法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 错误去重a方法，将会漏掉-1,-1,2 这种情况</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if (nums[i] == nums[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 正确去重a方法</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                <span class="comment">// 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right&lt;=left 了，从而漏掉了 0,0,0 这种三元组</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对b 和 c去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 错误去重a方法，将会漏掉-1,-1,2 这种情况</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if (nums[i] == nums[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 正确去重a方法</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                <span class="comment">// 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right&lt;=left 了，从而漏掉了 0,0,0 这种三元组</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对b 和 c去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></h3><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><h4 id="双指针法-1"><a href="#双指针法-1" class="headerlink" title="双指针法"></a>双指针法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; nums.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">            <span class="comment">// 剪枝处理</span></span><br><span class="line">            <span class="keyword">if</span> (nums[k] &gt; target &amp;&amp; nums[k] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 这里使用break，统一通过最后的return返回</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对nums[k]去重</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="comment">// 2级剪枝处理</span></span><br><span class="line">                <span class="keyword">if</span> (nums[k] + nums[i] &gt; target &amp;&amp; nums[k] + nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 对nums[i]去重</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &gt; target 会溢出</span></span><br><span class="line">                    <span class="keyword">if</span> ((<span class="type">long</span>) nums[k] + nums[i] + nums[left] + nums[right] &gt; target) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &lt; target 会溢出</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>) nums[k] + nums[i] + nums[left] + nums[right]  &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[k], nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈希表的具体内容参照以下内容&lt;/p&gt;
&lt;h3 id=&quot;242-有效的字母异位词&quot;&gt;&lt;a href=&quot;#242-有效的字母异位词&quot; class=&quot;headerlink&quot; title=&quot;242. 有效的字母异位词&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.c</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法：链表</title>
    <link href="http://example.com/2024/08/04/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2024/08/04/%E7%AE%97%E6%B3%95%EF%BC%9A%E9%93%BE%E8%A1%A8/</id>
    <published>2024-08-04T07:21:50.000Z</published>
    <updated>2024-08-09T03:22:17.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><p>这里进行交换的是列表的物理阶段而不是链表节点中的值，这里需要用到虚拟头节点的方式。这里做交换最值班的思想是先取出一个交换基元，能够知道我们需要设置的指针有：当前指针cur、两个临时指针，分别用于存储下一个当前指针的存放位置和下一个当前指针存放位置的下一个节点。这个基础单元一共有三个位置，在最开始的情况中还有一个虚拟头接点这个虚拟头接点，是当前最开始的位置（只有这个位置能够改变前面两个指针的指向）</p><p>现在我们要分析指针改变方向的一个方式，我们是首先将当前指针（cur）的下一个指针，指向原本指针（cur）的下一个指针的下一个指针，然后我们要进行的是将原本指针（cur）的下一个指针的下一个指针指向原本指针的下一个指针（temp），这个指针我们是用临时指针存储过的，所以说我们可以直接指向临时指针。</p><p>然后对于我们这个单元其实是一般化的，在这个情况我们会遇到就是末尾，会还有一个节点或者说没有节点的情况，如果说有节点的话，那他就是一个奇数的链表。这个时候我们需要判断一下，因为这个时候当前指针已经来到了倒数第二个指针的位置，如果是这个时候的话当前指针（cur）的下一个指针的下一个指针它是空指针；如果说是偶数指针的话，偶数节点的话那他的下一位已经是空指针。就是当前指针（cur）的下一位是空指针，所以说我们需要了解的就是，如果说进行完这样一次操作之后，当前指针的下一个指针或者下下个指针为空指针的时候这个操作就应该结束了。最后要求返回头节点，其实就是返回我们的虚拟头节点的下一个指针。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *dummyhead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead-&gt;next=head;</span><br><span class="line">        ListNode *cur=dummyhead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>&amp;&amp;cur-&gt;next-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode *temp=cur-&gt;next;</span><br><span class="line">            ListNode *temp1=temp-&gt;next-&gt;next;</span><br><span class="line">            cur-&gt;next=temp-&gt;next;</span><br><span class="line">            cur-&gt;next-&gt;next=temp;</span><br><span class="line">            temp-&gt;next-&gt;next-&gt;next=temp1;</span><br><span class="line">            cur=temp;</span><br><span class="line">            <span class="comment">//ListNode *temp=cur-&gt;next;</span></span><br><span class="line">            <span class="comment">//ListNode *temp1=temp-&gt;next-&gt;next;</span></span><br><span class="line">            <span class="comment">//cur-&gt;next=cur-&gt;next-&gt;next;</span></span><br><span class="line">            <span class="comment">//cur-&gt;next-&gt;next=cur-&gt;next;</span></span><br><span class="line">            <span class="comment">//temp-&gt;next-&gt;next-&gt;next=temp1;</span></span><br><span class="line">            <span class="comment">//cur=temp;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyhead-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><p>这里我们要删除链表的倒数第二个元素，首先我们要知道链表，我们是无法直接指定他到某个索引找出它的节点，我们需要用到一些方法就是快慢指针的那一种方式。</p><p>快慢指针的方式：快指针先走n步，慢指针后走，这样能在两个指针之间形成n个节点的间隔，当快指针走到空指针的位置的时候，慢指针刚好在倒数第n个节点的前一个节点的位置，之后对倒数第n个元素进行删除就好了，这里我们还需要使用到虚拟头接点的方式，有了虚拟头节点我们就方便地进行链表节点的删除。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyhead= <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead-&gt;next=head;</span><br><span class="line">        ListNode* fast=dummyhead;</span><br><span class="line">        ListNode* slow=dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next=slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyhead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.postimg.cc/WzGdvtRY/A0-A70-DA070-ECE89284-F06-FC7-C8-FBC855.png" alt="删除链表的倒数第n个元素"></p><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 104]</code></li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><p>弗洛伊德法：使用快慢指针，如果链表中出现了环，那么快慢指针最后都到不了空指针的位置，如果链表中没有环，那么我们的快指针本身或者它前项的指针必定有一个是空指针。</p><p>快指针，在这里我们规定它的速度是两个节点一步，而慢指针的速度是一个节点一步。</p><p>整体是一个布尔类型的函数，最后的返回值是验证是否存在环。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast=head;</span><br><span class="line">        ListNode* slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.postimg.cc/WzGdvtRY/A0-A70-DA070-ECE89284-F06-FC7-C8-FBC855.png" alt="环形链表"></p><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p><p>思路<br>这道题目，不仅考察对链表的操作，而且还需要一些数学运算。</p><p>主要考察两知识点：</p><p>判断链表是否环<br>如果有环，如何找到这个环的入口<br>判断链表是否环<br>可以使用快慢指针法， 分别定义 fast 和 slow指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</p><p>为什么fast 走两个节点，slow走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢</p><p>首先第一点： fast指针一定先进入环中，如果fast 指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</p><p>那么我们来看一下，为什么fast指针和slow指针一定会相遇呢</p><p>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。</p><p>会发现最终都是这种情况， 如下图：</p><p>fast和slow各自再走一步， fast和slow就相遇了</p><p>这是因为fast是走两步，slow是走一步，其实相对于slow来说，fast是一个节点一个节点的靠近slow的，所以fast一定可以和slow重合。</p><p>如果有环，如何找到这个环的入口<br>此时我们已经可以判断链表是否有环了，那么接下来要找这个环的入口了</p><p>假设从头结点到环形入口节点 的节点数为x。<br>环形入口节点到 fast指针与slow指针相遇节点 节点数为y。<br>从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p><p>那么相遇时：<br>slow指针走过的节点数为: <strong>x + y</strong><br>fast指针走过的节点数： **x + y + n (y + z)**，n为fast指针在环内走了n圈才遇到slow指针， <strong>（y+z）</strong>为 一圈内节点的个数</p><p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2</p><p><strong>(x + y) * 2 &#x3D; x + y + n (y + z)</strong></p><p>两边消掉一个（x+y）: <strong>x + y &#x3D; n (y + z)</strong></p><p>因为我们要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p><p>所以我们要求x ，将x单独放在左面：<strong>x &#x3D; n (y + z) - y</strong></p><p>在从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<strong>x &#x3D; (n - 1) (y + z) + z</strong> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针</p><p>这个公式说明什么呢，</p><p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p><p>当 n为1的时候，公式就化解为 <strong>x &#x3D; z</strong></p><p>这就意味着，从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</p><p>也就是在相遇节点处，定义一个指针<strong>index1</strong>，在头结点处定一个指针<strong>index2</strong>。</p><p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。</p><p>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode*fast=head;</span><br><span class="line">        ListNode*slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode*index1=fast;</span><br><span class="line">                ListNode*index2=head;</span><br><span class="line">                <span class="keyword">while</span>(index1!=index2)</span><br><span class="line">                &#123;</span><br><span class="line">                    index1=index1-&gt;next;</span><br><span class="line">                    index2=index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;24-两两交换链表中的节点&quot;&gt;&lt;a href=&quot;#24-两两交换链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;24. 两两交换链表中的节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/swap-nod</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>预处理器：/Zc:preprocessor</title>
    <link href="http://example.com/2024/08/02/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9A-Zc-preprocessor/"/>
    <id>http://example.com/2024/08/02/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9A-Zc-preprocessor/</id>
    <published>2024-08-02T12:35:35.000Z</published>
    <updated>2024-08-02T12:36:22.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zc-preprocessor（启用预处理器一致性模式）"><a href="#Zc-preprocessor（启用预处理器一致性模式）" class="headerlink" title="/Zc:preprocessor（启用预处理器一致性模式）"></a><code>/Zc:preprocessor</code>（启用预处理器一致性模式）</h1><p>本文内容<a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/zc-preprocessor?view=msvc-170#syntax">语法</a><a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/zc-preprocessor?view=msvc-170#remarks">备注</a><a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/zc-preprocessor?view=msvc-170#see-also">另请参阅</a></p><p>此选项将启用一个符合 C99 和 C++11 及更高标准的基于标记的预处理器。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/preprocessor-experimental-overview?view=msvc-170">MSVC 新预处理器概述</a>。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p><strong><code>/Zc:preprocessor</code></strong>[<strong><code>-</code></strong>]</p></blockquote><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>使用 <strong><code>/Zc:preprocessor</code></strong> 编译器选项可启用符合标准的预处理器。 可以使用 <strong><code>/Zc:preprocessor-</code></strong> 选项显式指定传统（不符合标准）的预处理器。</p><p>从 Visual Studio 2019 版本 16.5 开始，**<code>/Zc:preprocessor</code>** 选项可用。 从 Visual Studio 2017 版本 15.8 开始，Visual Studio 版本中提供了早期、不完整版本的新预处理器选项。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/experimental-preprocessor?view=msvc-170"><code>/experimental:preprocessor</code></a>。</p><h3 id="在-Visual-Studio-开发环境中设置此编译器选项"><a href="#在-Visual-Studio-开发环境中设置此编译器选项" class="headerlink" title="在 Visual Studio 开发环境中设置此编译器选项"></a>在 Visual Studio 开发环境中设置此编译器选项</h3><ol><li>打开项目的“属性页” 对话框。 有关详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/cpp/build/working-with-project-properties?view=msvc-170">在 Visual Studio 中设置 C++ 编译器和生成属性</a>。</li><li>选择“配置属性”&gt;“C&#x2F;C++”&gt;“预处理器”属性页。</li><li>修改“使用符合标准的预处理器”属性，然后选择“确定”。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zc-preprocessor（启用预处理器一致性模式）&quot;&gt;&lt;a href=&quot;#Zc-preprocessor（启用预处理器一致性模式）&quot; class=&quot;headerlink&quot; title=&quot;/Zc:preprocessor（启用预处理器一致性模式）&quot;&gt;&lt;/a&gt;&lt;</summary>
      
    
    
    
    
    <category term="/Zc:preprocessor" scheme="http://example.com/tags/Zc-preprocessor/"/>
    
  </entry>
  
  <entry>
    <title>预处理器：c++预处理器</title>
    <link href="http://example.com/2024/08/02/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9Ac-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>http://example.com/2024/08/02/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9Ac-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</id>
    <published>2024-08-02T12:31:12.000Z</published>
    <updated>2024-08-02T21:45:34.619Z</updated>
    
    <content type="html"><![CDATA[<p>ss</p><h1 id="C-C-预处理器参考"><a href="#C-C-预处理器参考" class="headerlink" title="C&#x2F;C++ 预处理器参考"></a>C&#x2F;C++ 预处理器参考</h1><p>本文内容</p><p>“C&#x2F;C++ 预处理器参考”对在 Microsoft C&#x2F;C++ 中实现的预处理器进行了说明。 在将 C 和 C++ 文件传递到编译器之前，预处理器将对这些文件执行预先操作。 可以使用预处理器有条件地编译代码、插入文件、指定编译时错误消息以及将计算机特定规则应用于代码节。</p><p>在 Visual Studio 2019 中，<a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/zc-preprocessor?view=msvc-170">&#x2F;Zc:preprocessor</a> 编译器选项提供完全一致的 C11 和 C17 预处理器。 使用编译器标志 <code>/std:c11</code> 或 <code>/std:c17</code> 时，这是默认设置。</p><h2 id="本部分内容"><a href="#本部分内容" class="headerlink" title="本部分内容"></a>本部分内容</h2><p><a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/preprocessor?view=msvc-170">预处理器</a><br>概述传统预处理器和符合要求的新预处理器。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/preprocessor-directives?view=msvc-170">预处理器指令</a><br>介绍通常用于使源程序易于在不同的执行环境中更改和编译的指令。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/preprocessor-operators?view=msvc-170">预处理器运算符</a><br>讨论在 <code>#define</code> 指令的上下文中使用的四个预处理器特定运算符。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/predefined-macros?view=msvc-170">预定义宏</a><br>讨论由 C 和 C++ 标准以及 Microsoft C++ 指定的预定义宏。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/preprocessor/pragma-directives-and-the-pragma-keyword?view=msvc-170">杂注</a><br>讨论杂注，杂注提供了一种方法来让每个编译器提供计算机和操作系统特定的功能，同时保持与 C 和 C++ 语言的整体兼容性。</p><h2 id="相关章节"><a href="#相关章节" class="headerlink" title="相关章节"></a>相关章节</h2><p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/cpp-language-reference?view=msvc-170">C++ 语言参考</a><br>提供有关 Microsoft 的 C++ 语言实现的参考材料。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/c-language/c-language-reference?view=msvc-170">C 语言参考</a><br>提供有关 Microsoft 的 C 语言实现的参考材料。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/c-cpp-building-reference?view=msvc-170">C&#x2F;C++ 生成参考</a><br>提供指向讨论编译器和链接器选项的主题的链接。</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/build/creating-and-managing-visual-cpp-projects?view=msvc-170">Visual Studio projects - C++</a><br>描述 Visual Studio 中使您能够指定目录（项目系统将在其中进行搜索以找到 C++ 项目的文件）的用户界面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ss&lt;/p&gt;
&lt;h1 id=&quot;C-C-预处理器参考&quot;&gt;&lt;a href=&quot;#C-C-预处理器参考&quot; class=&quot;headerlink&quot; title=&quot;C&amp;#x2F;C++ 预处理器参考&quot;&gt;&lt;/a&gt;C&amp;#x2F;C++ 预处理器参考&lt;/h1&gt;&lt;p&gt;本文内容&lt;/p&gt;
&lt;p&gt;“C</summary>
      
    
    
    
    
    <category term="预处理器" scheme="http://example.com/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CPP:Clang-Format的书写方式</title>
    <link href="http://example.com/2024/08/02/CPP-Clang-Format%E7%9A%84%E4%B9%A6%E5%86%99%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/08/02/CPP-Clang-Format%E7%9A%84%E4%B9%A6%E5%86%99%E6%96%B9%E5%BC%8F/</id>
    <published>2024-08-02T11:39:28.000Z</published>
    <updated>2024-08-02T12:03:03.017Z</updated>
    
    <content type="html"><![CDATA[<p>本文在介绍使用clong-format格式化代码时，命令行参数或定义文件（.clong-format）的格式。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>想要和本文实现同样的操作，请确认你的PC处于以下的环境。</p><ul><li>RHEL9.0、clang-format 15.0</li><li>Windows10Pro 21H2、VSCode 1.69.2、clang-format 8.0.1</li></ul><h3 id="1-指定方法和基本的格式"><a href="#1-指定方法和基本的格式" class="headerlink" title="1.指定方法和基本的格式"></a>1.指定方法和基本的格式</h3><p>有两种通用方法</p><p>その１．コマンドライン引数としてパラメータを指定する</p><p>其中之一.将参数指定为命令行参数。</p><p>書式例</p><p>书写示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang-format --style=<span class="string">&quot;&#123; BasedOnStyle: LLVM, IndentWidth: 4 &#125;&quot;</span> input_file_name.cpp</span><br></pre></td></tr></table></figure><p>その２．コマンドライン引数として設定ファイルを指定する</p><p>其中之二.将改动文件指定为命令行参数</p><p>書式例</p><p>书写示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang-format --style=file:<span class="string">&quot;~/project_dir/.clang-format&quot;</span> input_file_name.cpp</span><br></pre></td></tr></table></figure><p>clang-formatのコマンドオプションの詳細は以下を参照。</p><p>clang-format的命令行设置的详细内容请参照下方。</p><p>また、VSCodeで使用の際は設定ファイルより値を指定する方法となる。<br>設定ファイルは、「.clang-format」の名称で作成する。<br>作成したファイルは、ソースコード直下又はC_Cpp:Clang_format_pathにて指定したパスから読み込みを行う。</p><p>接着，在VSCode处使用的时候</p><p>C_Cpp:Clang_format_pathの設定方法は次を参照。<br><a href="https://camo.qiitausercontent.com/1c3a48578aedf5740016286a0bd9109b9869041c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313331373638382f35366333303437612d376166332d666639332d636134382d6663646535626363613536612e706e67"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1317688%2F56c3047a-7af3-ff93-ca48-fcde5bcca56a.png?ixlib=rb-4.0.0&auto=format&gif-q=60&q=75&s=c8f9e6806285ab0a911268defcb9165b" alt="無題.png"></a></p><p>設定ファイルはYAML形式で記載を行う。</p><p>例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">キー<span class="number">1</span>: 値<span class="number">1</span></span><br><span class="line">キー<span class="number">2</span>: 値<span class="number">2</span></span><br><span class="line"># コメント</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>また、言語を指定して定義を切り分けることもできる。</p><p>書式例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># Language指定なし(共通定義)。</span><br><span class="line"># 既定値としてLLVMを使用、インデントをスペース4つに指定する。</span><br><span class="line">BasedOnStyle: LLVM</span><br><span class="line">IndentWidth: 4</span><br><span class="line">---</span><br><span class="line">♯ C++用の定義</span><br><span class="line">Language: Cpp</span><br><span class="line">DerivePointerAlignment: false</span><br><span class="line">PointerAlignment: Left</span><br><span class="line">---</span><br><span class="line">♯ JavaScript用の定義</span><br><span class="line">Language: JavaScript</span><br><span class="line">ColumnLimit: 100</span><br><span class="line">---</span><br><span class="line">♯ Protocol Buffers用の定義</span><br><span class="line">Language: Proto</span><br><span class="line">DisableFormat: true</span><br><span class="line">---</span><br><span class="line">♯ C#用の定義</span><br><span class="line">Language: CSharp</span><br><span class="line">ColumnLimit: 100</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以下のコマンドを実行すると、clang-formatの既定値の定義を出力することができる。<br>(ベースファイルとして使える)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang-format -style=llvm -dump-config &gt; .clang-format</span><br></pre></td></tr></table></figure><p>※styleに指定できる値は、BasedOnStyleを参照</p><h2 id="２-書式及びオプション"><a href="#２-書式及びオプション" class="headerlink" title="２. 書式及びオプション"></a>２. 書式及びオプション</h2><p>style及び.clang-formatファイルに指定可能な個々のフォーマットスタイルについて記載する。</p><p>【凡例】</p><ul><li><p>キー名(値の型) 使用可能なバージョン</p><p>　概要 　値の範囲 　書式例</p></li></ul><p>の順で記載する。<br>値の型は、</p><table><thead><tr><th align="left">型</th><th align="left">意味</th><th align="left">例</th><th align="left">備考</th></tr></thead><tbody><tr><td align="left">Integer</td><td align="left">数値</td><td align="left">100,-20</td><td align="left"></td></tr><tr><td align="left">Unsigned</td><td align="left">正の数値</td><td align="left">50</td><td align="left">負数を指定するとエラーとなる</td></tr><tr><td align="left">String</td><td align="left">文字列</td><td align="left">“(_test)?$”</td><td align="left">主に正規表現を指定する項目で使用</td></tr><tr><td align="left">List of Strings</td><td align="left">文字列の配列</td><td align="left">[‘com.example’, ‘com’, ‘org’]</td><td align="left">主にキーワードのリストを指定する項目で使用</td></tr><tr><td align="left">Boolean</td><td align="left">真偽値</td><td align="left">true, false</td><td align="left"></td></tr></tbody></table><p>その他、個別の列挙型がある。<br>列挙型の一覧については、以下のドキュメントを参照</p><p><strong>注意</strong><br>一部のキーについてデータ型がclang-formatのバージョンによって、Booleanから列挙型に変更となっているものがあります。<br>旧のデータ型がBooleanの場合、レガシーオプションとして列挙型＋Booleanのどちらでも指定可能となっています。<br>本稿を執筆するにあたり、各キーがどのバージョンでBooleanから列挙型に変更となったかまでの調査は出来ておりません。<br>ただし、レガシーオプションが存在するキーについてはその内容も記述をおこなっています。<br>ご自身が使用する環境で列挙型での指定がエラーとなる場合、Booleanでの指定を試してください。</p><ul><li><p>BasedOnStyle(String)</p><p>すべてのオプションの既定値となる値を指定する。 値意味LLVM<a href="https://llvm.org/docs/CodingStandards.html">LLVMコーディング規約</a>を標準とするGoogle<a href="https://google.github.io/styleguide/cppguide.html">Google C++ スタイルガイド</a>を標準とするChromium<a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/styleguide/styleguide.md">Chromium スタイルガイド</a>を標準とするMozilla<a href="https://firefox-source-docs.mozilla.org/code-quality/coding-style/index.html">Mozilla コーディングスタイル</a>を標準とするWebKit<a href="https://www.webkit.org/coding/coding-style.html">WebKit コードスタイル ガイドライン</a>を標準とするMicrosoft<a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options?view=vs-2022">.NET コードスタイルのルールオプション</a>を標準とするGNU<a href="https://www.gnu.org/prep/standards/standards.html">GNU コーディング規約</a>を標準とするInheritParentConfig親の設定を読み込み使用する。親が見つからない場合、フォールバックとして動作する。</p></li><li><p>AccessModifierOffset(Integer) 3.3以降</p><p>アクセス修飾子(public等)のインデントまたはアウトデントに対する補正を指定する。 つまり、IndentWidthで指定した値にAccessModifierOffsetで指定した値を足した値が、インデントとして設定されます。 合計した値は最低0以上である必要があり、0より小さい値となる場合、AccessModifierOffsetの値は破棄されます。</p></li><li><p>AlignAfterOpenBracket(BracketAlignmentStyle) 3.8以降</p><p>開き括弧の後の引数の並べ方を指定する。 この指定は、丸括弧、波括弧及び角括弧に適用となる。 値意味Align開き括弧にパラメータの先頭を合わせる。DontAlign位置を合わせない。次行以降のインデントにはContinuationIndentWidthを使用する。AlwaysBreakパラメータが1行に収まらない場合、常に開き括弧の後で改行を行う。BlockIndentAlwaysBreakと同じ動作。ただし、閉じ括弧を改行する。Align<code>someLongFunction(argument1,                 argument2); </code>DontAlign<code>someLongFunction(argument1,    argument2); </code>AlwaysBreak<code>someLongFunction(    argument1, argument2); </code>BlockIndent<code>someLongFunction(    argument1, argument2 ); </code><strong>警告</strong> 現在(clang-format15.0時点)、丸括弧のみに適用されます。</p></li><li><p>AlignArrayOfStructures(ArrayInitializerAlignmentStyle) 13以降</p><p>構造体配列の初期化子について、整列方向を指定する。 値意味Left配列の初期化リストを左寄せに整列する。Right配列の初期化リストを右寄せに整列する。None配列の初期化リストを整列を行わない。Left<code>// 配列の初期化リストを左寄せに整列する struct test demo[] = &#123;    &#123;56, 23,    &quot;hello&quot;&#125;,    &#123;-1, 93463, &quot;world&quot;&#125;,    &#123;7,  5,     &quot;!!&quot;   &#125; &#125;; </code>Right<code>// 配列の初期化リストを右寄せに整列する struct test demo[] = &#123;    &#123;56,    23, &quot;hello&quot;&#125;,    &#123;-1, 93463, &quot;world&quot;&#125;,    &#123; 7,     5,    &quot;!!&quot;&#125; &#125;; </code></p></li><li><p>AlignConsecutiveAssignments(AlignConsecutiveStyle) 3.8以降</p><p>連続した代入の揃え方を指定する。 指定した値により、次のパラメータの値を決定する。 　・Enabled 　・AcrossEmptyLines 　・AcrossComments 　・AlignCompound 　・PadOperators パラメータの意味については後述する。 ※公式ドキュメントの記述に誤りがある。公式の例にある個別パラメータへの真偽値の設定は出来ない。 値 \ パラメータEnabledAcrossEmptyLinesAcrossCommentsAlignCompoundPadOperatorsNonefalsefalsefalsefalsetrueConsecutivetruefalsefalsefalsetrueAcrossEmptyLinestruetruefalsefalsetrueAcrossCommentstruefalsetruefalsetrueAcrossEmptyLinesAndCommentstruetruetruefalsetruetruetruefalsefalsefalsetruefalsefalsefalsefalsefalsetrue※AlignCompoundがtrueとなる値は存在しない。 　値にtrueを指定した場合、Consecutiveと同じ動作となる。同様にfalseを指定した場合、Noneと同じ動作となる。各パラメータの設定値により、次の動作を行う。Enabled(Boolean)アライメントを有効とするかを指定する。true<code>// アライメントを有効にする int a            = 1; int somelongname = 2; double c         = 3; </code>false<code>// アライメントを無効とする int a = 1; int somelongname = 2; double c = 3; </code>AcrossEmptyLines(Boolean)空白行を挟んだ要素を整列するかを指定する。true<code>// 空白行を挟んだ要素も整列を行う int a            = 1; int somelongname = 2; double c         = 3; </code>false<code>// 空白行を挟んだ要素は別で整列を行う int a            = 1; int somelongname = 2; double c = 3; </code>AcrossComments(Boolean)コメント行を挟んだ要素を整列するかを指定する。true<code>// コメント行を挟んだ要素も整列を行う int a            = 1; int somelongname = 2; /* コメント */ double c         = 3; </code>false<code>// コメント行を挟んだ要素は別で整列を行う int a            = 1; int somelongname = 2; /* コメント */ double c = 3; </code>AlignCompound(Boolean)複合した演算子についての整列方法を指定する。 このフラグはAlignConsecutiveAssignmentsに対してのみ有効となる。true<code>// 演算子と複合の=について、演算子を加味した位置に調整を行う a   &amp;= 2; bbb  = 2; </code>false<code>// 演算子と複合の=について、演算子を加味しない位置に調整を行う a &amp;= 2; bbb = 2; </code>PadOperators(Boolean)長い演算子と短い演算子についての整列方法を指定する。 このフラグはAlignConsecutiveAssignmentsに対してのみ有効となる。true<code>// 演算子と複合の=について、演算子を加味した位置に調整を行う // 演算子の幅も加味して=の位置を調整する a   &gt;&gt;= 2; bbb   = 2; a     = 2; bbb &gt;&gt;= 2; </code>false<code>// =の位置を軸として調整を行う a &gt;&gt;= 2; bbb = 2; a     = 2; bbb &gt;&gt;= 2; </code></p></li><li><p>AlignConsecutiveBitFields(AlignConsecutiveStyle) 11以降</p><p>連続したビットフィールドの揃え方を指定する。 指定可能な値の範囲はAlignConsecutiveAssignmentsと同じのため、そちらを参照のこと。</p></li><li><p>AlignConsecutiveDeclarations(AlignConsecutiveStyle) 3.8以降</p><p>連続した宣言の揃え方を指定する。 指定可能な値の範囲はAlignConsecutiveAssignmentsと同じのため、そちらを参照のこと。</p></li><li><p>AlignConsecutiveMacros(AlignConsecutiveStyle) 9以降</p><p>連続したマクロ定義の揃え方を指定する。 指定可能な値の範囲はAlignConsecutiveAssignmentsと同じのため、そちらを参照のこと。</p></li><li><p>AlignEscapedNewlines(EscapedNewlineAlignmentStyle) 5以降</p><p>エスケープ文字された改行文字の揃え方を指定する。 値意味DontAlignエスケープされた改行文字を揃えないLeftエスケープされた改行文字をできるだけ左に揃えるRightエスケープされた改行文字を右端の列に揃えるDontAlign<code>// エスケープされた改行文字を揃えない(各行左詰めにする) #define A \  int aaaa; \  int b; \  int dddddddddd; </code>Left<code>// エスケープされた改行文字をできるだけ左に揃える #define A   \  int aaaa; \  int b;    \  int dddddddddd; </code>Right<code>// ColumnLimitで指定した値の位置にエスケープ文字を合わせる。 // ColumnLimitが0(無制限)の場合、Leftと同じ動作となる。 #define A                                                                      \  int aaaa;                                                                    \  int b;                                                                       \  int dddddddddd; </code></p></li><li><p>AlignOperands(OperandAlignmentStyle) 3.5以降</p><p>2項式及び3項式のオペランドの位置を指定する。 値意味DontAlignオペランドの整列を行わない。改行した行は行頭からContinuationIndentWidth分のスペースがインデントされる。Align水平に揃えるAlignAfterOperator水平に揃える。Alignとの差はBreakBeforeBinaryOperatorsを指定した場合の動作だけとなる。trueAlignと同じ動作。(レガシーオプション)falseDontAlignと同じ動作。(レガシーオプション)Align及びAlignAfterOperator(BreakBeforeBinaryOperatorsがNone又は未指定)<code>// オペランドは行末に付与され、改行後は変数名等を先頭に整列が行われる int aaa = bbbbbbbbbbbbbbb +          ccccccccccccccc; </code>Align(BreakBeforeBinaryOperatorsが指定あり)<code>// オペランドは改行後の先頭に付与され、オペランドの位置は先頭行の変数の頭に整列される int aaa = bbbbbbbbbbbbbbb          + ccccccccccccccc; </code>AlignAfterOperator(BreakBeforeBinaryOperatorsが指定あり)<code>// オペランドは改行後の先頭に付与され、オペランドの位置は先頭行のオペランドに整列される int aaa = bbbbbbbbbbbbbbb        + ccccccccccccccc; </code></p></li><li><p>AlignTrailingComments(Boolean) 3.7以降</p><p>コメントの整列方法を指定する。 true<code>// コメントの位置を整列する int a;     // comment a int b = 2; // comment b </code>false<code>// コメントの位置を整列しない(スペース1個分の位置まで詰める) int a; // comment a int b = 2; // comment b </code></p></li><li><p>AllowAllArgumentsOnNextLine(Boolean) 9以降</p><p>関数の引数や初期化リストが1行に収まらない場合の動作を指定する。BinPackArgumentsにfalseを指定している場合でもこの処理は動作する。 true<code>// 関数の引数を1行で記載する callFunction(    a, b, c, d); </code>false<code>// 関数の引数を複数行で記載する callFunction(a,             b,             c,             d); </code><strong>メモ書き</strong> 筆者環境にて動作が確認できず。(RHEL9.0、clang-format15) –style&#x3D;{ BreakBeforeBraces: Linux, BinPackArguments: true&#x2F;false, AllowAllArgumentsOnNextLine: true&#x2F;false }で4パターン試行して、どの指定でも変換が行われなかった。</p></li><li><p>AllowAllConstructorInitializersOnNextLine(Boolean) 9以降</p><p>非推奨なオプション。PackConstructorInitializersのNextLineを参照すること。 </p></li><li><p>AllowShortBlocksOnASingleLine(ShortBlockStyle) 3.5以降</p><p>短いwhile文( while (true) { continue; } )の並べ方を指定する。 ※ステートメントを波括弧で囲んでいる場合の動作。波括弧を付与しない場合、AllowShortLoopsOnASingleLineにより指定を行う。 値意味Neverブロックを1行に並べない。Empty空のブロックだけ1行に並べる。Always短いブロックは1行に並べる。trueAlwaysと同じ動作となる。(レガシーオプション)falseNeverと同じ動作となる。(レガシーオプション)Never<code>// 短いwhile文も必ず折り返す while (true) &#123; &#125; while (true) &#123;  continue; &#125; </code>Empty<code>// 空のwhile文は1行に纏める while (true) &#123;&#125; while (true) &#123;  continue; &#125; </code>Always<code>// while文を1行に纏める while (true) &#123;&#125; while (true) &#123; continue; &#125; </code></p></li><li><p>AllowShortCaseLabelsOnASingleLine(Boolean) 3.6以降</p><p>短いcase文のまとめ方を指定する。 true<code>// caseラベルとその処理を1行にまとめる switch (a) &#123; case 1: x = 1; break; case 2: return; &#125; </code>false<code>// caseラベルとその処理を1行にまとめない switch (a) &#123; case 1:  x = 1;  break; case 2:  return; </code></p></li><li><p>AllowShortEnumsOnASingleLine(Boolean) 11以降</p><p>短い列挙型のまとめ方を指定する。 true<code>// 列挙型を1行にまとめる enum &#123; A, B &#125; myEnum; &#125; </code>false<code>// 列挙型を1行にまとめない enum &#123;  A,  B &#125; myEnum; </code></p></li><li><p>AllowShortFunctionsOnASingleLine(ShortFunctionStyle) 3.5以降</p><p>短い関数(処理が1行以下)の纏め方を指定する。 値意味None関数を1行に纏めない。InlineOnlyクラス内で定義した関数だけ1行に纏める。Inlineと同じ動作だが、空の関数についてのみ動作が異なる。Empty空の関数は1行に纏める。Inlineクラス内で定義した関数だけ1行に纏める。Allすべての関数を1行に纏めるtrueAllと同じ動作となる。(レガシーオプション)falseNoneと同じ動作となる。(レガシーオプション)InlineOnly<code>// クラスメソッドは1行に纏められる。 class Foo &#123;  void f1() &#123; foo(); &#125; &#125;; void f2() &#123;  foo(); &#125; // Inlineと異なる箇所 void f3() &#123; &#125; </code>Empty<code>class Foo &#123;  void f1() &#123;    foo();  &#125; &#125;; void f2() &#123;  foo(); &#125; // 空のメソッドだけ1行に纏める void f3() &#123;&#125; </code>Inline<code>// クラスメソッドと空のメソッドが1行に纏められる。 class Foo &#123;  void f1() &#123; foo(); &#125; &#125;; void f2() &#123;  foo(); &#125; void f3() &#123;&#125; </code>All<code>// すべて1行に纏める。 class Foo &#123;  void f1() &#123; foo(); &#125; &#125;; void f2() &#123; foo(); &#125; void f3() &#123;&#125; </code></p></li><li><p>AllowShortIfStatementsOnASingleLine(ShortIfStyle) 3.3以降</p><p>短いif及びelseの纏め方を指定する。 値意味Never短いifを同じ行に並べない。WithoutElseelse文がない場合のみ、短いifを同じ行に並べる。OnlyFirstIf短いifだけを並べる。else ifやelse文は並べない。AllIfsAndElse短いif、else if及びelse文を同じ行に並べる。AlwaysOnlyFirstIfと同じ動作となる。(レガシーオプション)trueWithoutElseと同じ動作となる。(レガシーオプション)falseNeverと同じ動作となる。(レガシーオプション)Never<code>if (a)  return; if (b)  return; else  return; if (c)  return; else &#123;  return; &#125; </code>WithoutElse<code>// ifだけの場合、1行に纏める。 if (a) return; if (b)  return; else  return; if (c)  return; else &#123;  return; &#125; </code>AllIfsAndElse<code>// すべて1行に纏める。 if (a) return; if (b) return; else return; if (c) return; else &#123;  return; &#125; </code></p></li><li><p>AllowShortIfStatementsOnASingleLine(ShortLambdaStyle) 9以降</p><p>短いラムダ式の纏め方を指定する。 値意味None短いラムダ式を同じ行に並べない。Empty空のラムダ式だけ1行に並べる。Inline関数の引数として指定したラムダ式だけ1行に並べる。Allすべての短いラムダ式を1行に並べる。trueAllと同じ動作となる。(レガシーオプション)falseNoneと同じ動作となる。(レガシーオプション)Empty<code>// 空のラムダ式だけ1行に並べる。 auto lambda = [](int a) &#123;&#125;; auto lambda2 = [](int a) &#123;  return a; &#125;; sort(vct.begin(), vct.end(), [](int x, int y) &#123;  return x &lt; y; &#125;); </code>Inline<code>auto lambda = [](int a) &#123; &#125;; auto lambda2 = [](int a) &#123;  return a; &#125;; // 関数の引数として指定したラムダ式だけ1行に並べる。 sort(vct.begin(), vct.end(), [](int x, int y) &#123; return x &lt; y; &#125;); </code>All<code>// すべての短いラムダ式を1行に並べる。 auto lambda = [](int a) &#123;&#125;; auto lambda2 = [](int a) &#123; return a; &#125;; sort(vct.begin(), vct.end(), [](int x, int y) &#123; return x &lt; y; &#125;); </code></p></li><li><p>AllowShortLoopsOnASingleLine(Boolean) 3.7以降</p><p>短いwhile文( while (true) continue; )の並べ方を指定する。 ※ステートメントを波括弧で囲んでいない場合の動作。波括弧を付与する場合、AllowShortBlocksOnASingleLine により指定を行う。true<code>while (true) &#123; continue; &#125; </code>false<code>while (true) &#123;  continue; &#125; </code></p></li><li><p>AlwaysBreakAfterDefinitionReturnType(DefinitionReturnTypeBreakingStyle) 3.7以降</p><p>非推奨なオプション。</p></li><li><p>AlwaysBreakAfterReturnType(ReturnTypeBreakingStyle) 3.8以降</p><p>関数の戻り値の改行スタイルを指定する。 値意味None戻り値を改行しない。All戻り値の後で必ず改行する。TopLevelトップレベルの関数だけ、戻り値の後で改行する。AllDefinitions関数の実体定義だけ、戻り値の後で改行する。TopLevelDefinitionsトップレベルの関数の実体定義だけ、戻り値の後で改行する。trueAllと同じ動作となる。(レガシーオプション)falseNoneと同じ動作となる。(レガシーオプション)None<code>class B &#123;  int f() &#123; return 0; &#125;; &#125;; int f(); int f() &#123; return 1; &#125; </code>All<code>class B &#123;  int  f() &#123;    return 0;  &#125;; &#125;; int f(); int f() &#123;  return 1; &#125; </code>TopLevel<code>class B &#123;  int f() &#123; return 0; &#125;; &#125;; // トップレベルのメソッド(クラススコープのメソッドではない？)は改行する。 int f(); int f() &#123;  return 1; &#125; </code>AllDefinitions<code>// 関数の実体定義がある場合は改行する。 class B &#123;  int  f() &#123;    return 0;  &#125;; &#125;; int f(); int f() &#123;  return 1; &#125; </code></p></li><li><p>AlwaysBreakBeforeMultilineStrings(Boolean) 3.4以降</p><p>文字列リテラルの並べ方を指定する。 ContinuationIndentWidthが未指定の場合だけ、このフラグが有効となる。true<code>const char *sz =    &quot;aaaa&quot;    &quot;bbbb&quot;; </code>false<code>const char *sz = &quot;aaaa&quot;                 &quot;bbbb&quot;; </code></p></li><li><p>AlwaysBreakTemplateDeclarations(BreakTemplateDeclarationsStyle) 3.4以降</p><p>テンプレート宣言の改行スタイルを指定する。 値意味Noテンプレート宣言の後に改行を行わない。MultiLineテンプレート宣言の後が複数行になる場合だけ改行を行うYes必ずテンプレート宣言の後に改行を行う。falseMultiLineと同じ動作となる。(レガシーオプション)trueYesと同じ動作となる。(レガシーオプション)No<code>template &lt;typename T&gt; T foo() &#123; &#125; template &lt;typename T&gt; T foo(int aaaaaaaaaaaaaaaaaaaaa,                            int bbbbbbbbbbbbbbbbbbbbb) &#123; &#125; </code>MultiLine<code>template &lt;typename T&gt; T foo() &#123; &#125; // テンプレート宣言の後ろに複数行ある場合だけ改行を行う template &lt;typename T&gt; T foo(int aaaaaaaaaaaaaaaaaaaaa,      int bbbbbbbbbbbbbbbbbbbbb) &#123; &#125; </code>Yes<code>// テンプレート宣言の後は必ず改行する template &lt;typename T&gt; T foo() &#123; &#125; template &lt;typename T&gt; T foo(int aaaaaaaaaaaaaaaaaaaaa,      int bbbbbbbbbbbbbbbbbbbbb) &#123; </code></p></li><li><p>AttributeMacros(List of Strings) 12以降</p><p>識別子ではなく、属性&#x2F;修飾子として解釈されるべき文字列のリストを指定する。 つまり、このリストで指定したキーワードは属性&#x2F;修飾子としてフォーマットが行われる。  .clang-format 設定ファイルでは、次の様に設定することができる。<code>AttributeMacros: [&#39;__capability&#39;, &#39;__output&#39;, &#39;__ununsed&#39;] </code></p></li><li><p>BinPackArguments(Boolean) 3.7以降</p><p>関数の引数の並べ方を指定する。 true<code>// 1行の最大文字数を基準に折り返しを行う void f() &#123;  f(aaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaa,    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa); &#125; </code>false<code>// 引数を各1行ずつに折り返す void f() &#123;  f(aaaaaaaaaaaaaaaaaaaa,    aaaaaaaaaaaaaaaaaaaa,    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa); &#125; </code></p></li><li><p>BinPackParameters(Boolean) 3.7以降</p><p>関数宣言や関数定義の引数の並べ方を指定する。 true<code>// 1行の最大文字数を基準に折り返しを行う void f(int aaaaaaaaaaaaaaaaaaaa, int aaaaaaaaaaaaaaaaaaaa,       int aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) &#123;&#125; </code>false<code>// 引数を各1行ずつに折り返す void f(int aaaaaaaaaaaaaaaaaaaa,       int aaaaaaaaaaaaaaaaaaaa,       int aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) &#123;&#125; </code></p></li><li><p>BitFieldColonSpacing(BitFieldColonSpacingStyle) 12以降</p><p>テンプレート宣言の改行スタイルを指定する 値意味Bothコロンの前後にスペースを挿入する。Noneコロンの前後にスペースを挿入しない。Beforeコロンの前だけスペースを挿入する。Afterコロンの後ろだけスペースを挿入する。Both<code>unsigned bf : 2; </code>None<code>unsigned bf:2; </code>Before<code>unsigned bf :2; </code>After<code>unsigned bf: 2; </code></p></li><li><p>BraceWrapping (BraceWrappingFlags) 3.8以降</p><p>括弧の個別制御を指定する。このフラグはBreakBeforeBracesがBS_Customに設定されている場合だけ有効で、それ以外の場合は無視される。.clang-formatの書式例<code>BreakBeforeBraces: Custom BraceWrapping:  AfterEnum: true  AfterStruct: false  SplitEmptyFunction: false </code>各設定フラグについては以下のとおり。AfterCaseLabel(Boolean)caseラベルに対する括弧の制御方法を指定する。true<code> // caseラベルの後ろの括弧は改行する  switch (foo) &#123;    case 1:    &#123;      bar();      break;    &#125;    default:    &#123;      plop();    &#125;  &#125;</code>false<code> // caseラベルの後ろの括弧は改行しない  switch (foo) &#123;    case 1: &#123;      bar();      break;    &#125;    default: &#123;      plop();    &#125;  &#125;</code>AfterClass(Boolean)クラス定義に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する class foo &#123;&#125;; </code>false<code>// 後ろの括弧は改行しない class foo &#123;&#125;; </code><strong>メモ書き</strong> 公式ドキュメントに誤記あり。 trueとfalseの動作が逆に記載されている。AfterControlStatement(BraceWrappingAfterControlStatementStyle)ステートメント(if、for、while、switch等)に対する括弧の制御方法を指定する。 値意味Never制御文の後の波括弧を改行しない。MultiLine複数行の制御文の後の波括弧だけ改行する。Always制御文の後の波括弧を改行する。falseNeverと同じ動作となる。(レガシーオプション)trueAlwaysと同じ動作となる。(レガシーオプション)Never<code> // 制御文の後の波括弧を改行しない。  if (foo()) &#123;  &#125; else &#123;  &#125;  for (int i = 0; i &lt; 10; ++i) &#123;  &#125;</code>MultiLine<code> // 複数行の制御文の後の波括弧だけ改行する。  if (foo &amp;&amp; bar &amp;&amp;      baz)  &#123;    quux();  &#125;  while (foo || bar) &#123;  &#125;</code>Always<code> // 制御文の後の波括弧を改行する。  if (foo())  &#123;  &#125; else  &#123;&#125;  for (int i = 0; i &lt; 10; ++i)  &#123;&#125;</code>AfterEnum(Boolean)列挙型に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する enum X : int &#123;  B &#125;; </code>false<code>// 後ろの括弧は改行しない enum X : int &#123; B &#125;; </code>AfterFunction(Boolean)関数に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する void foo() &#123;  bar();  bar2(); &#125; </code>false<code>// 後ろの括弧は改行しない void foo() &#123;  bar();  bar2(); &#125; </code>AfterNamespace(Boolean)名前空間に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する namespace &#123; int foo(); int bar(); &#125; </code>false<code>// 後ろの括弧は改行しない namespace &#123; int foo(); int bar(); &#125; </code>AfterObjCDeclaration(Boolean)Objective-Cの定義(@interface、@implementation等)、@autoreleasepool及び@synchronizedに対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する @interface MyObject : NSObject &#123;  int val; &#125; </code>false<code>// 後ろの括弧は改行しない @interface MyObject : NSObject &#123;  int val; &#125; </code>AfterStruct(Boolean)構造体に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する struct foo &#123;  int x; &#125;; </code>false<code>// 後ろの括弧は改行しない struct foo &#123;  int x; &#125;; </code>AfterUnion(Boolean)共用体に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する union foo &#123;  int x; &#125; </code>false<code>// 後ろの括弧は改行しない union foo &#123;  int x; &#125; </code>AfterExternBlock(Boolean)外部結合ブロック(extern)に対する括弧の制御方法を指定する。true<code>// 後ろの括弧は改行する extern &quot;C&quot; &#123;  int foo(); &#125; </code>false<code>// 後ろの括弧は改行しない extern &quot;C&quot; &#123; int foo(); &#125; </code>BeforeCatch(Boolean)catch句の前方の括弧の制御方法を指定する。true<code>// 前方の括弧は改行する try &#123;  foo(); &#125; catch () &#123; &#125; </code>false<code>// 前方の括弧は改行しない try &#123;  foo(); &#125; catch () &#123; &#125; </code>BeforeElse(Boolean)else句の前方の括弧の制御方法を指定する。true<code>// 前方の括弧は改行する if (foo()) &#123; &#125; else &#123; &#125; </code>false<code>// 前方の括弧は改行しない if (foo()) &#123; &#125; else &#123; &#125; </code>BeforeLambdaBody(Boolean)ラムダ式の前方の括弧の制御方法を指定する。true<code>// 前方の括弧は改行する(キャプチャとラムダ導入子も改行される？) connect(  []()  &#123;    foo();    bar();  &#125;); </code>false<code>// 前方の括弧は改行しない connect([]() &#123;  foo();  bar(); &#125;); </code>BeforeWhile(Boolean)do～whileの前方の括弧の制御方法を指定する。true<code>// 前方の括弧は改行する do &#123;  foo(); &#125; while (1); </code>false<code>// 前方の括弧は改行しない do &#123;  foo(); &#125; while (1); </code>IndentBraces(Boolean)折り返した波括弧のインデントの可否を指定する。true<code>// 折り返した波括弧をインデントする if (a) &#123;    foo(a,b); &#125; else &#123;  &#125; for (int i = 0; i &lt; 10; ++i) &#123;  &#125; </code>false<code>// 折り返した波括弧をインデントしない if (a) &#123;  foo(a, b); &#125; else &#123; &#125; for (int i = 0; i &lt; 10; ++i) &#123; &#125; </code>SplitEmptyFunction(Boolean)空の関数本体を1行に纏めるかを指定する。このオプションはAllowShortFunctionsOnASingleLine にNone、AfterFunctionにtrueを指定している場合のみ適用されます。true<code>// 空の関数の括弧を1行に並べない。 int f() &#123; &#125; </code>false<code>// 空の関数の括弧を1行に並べる。 int f() &#123;&#125; </code>SplitEmptyRecord(Boolean)空のクラス本体を1行に纏めるかを指定する。AfterClassにtrueを指定している場合のみ適用されます。true<code>// 空のクラスの括弧を1行に並べない。 class Foo &#123; &#125; </code>false<code>// 空のクラスの括弧を1行に並べる。 class Foo &#123;&#125; </code>SplitEmptyNamespace(Boolean)空の名前空間本体を1行に纏めるかを指定する。AfterNamespaceにtrueを指定している場合のみ適用されます。true<code>// 空のクラスの括弧を1行に並べない。 namespace Foo &#123; &#125; </code>false<code>// 空のクラスの括弧を1行に並べる。 namespace Foo &#123;&#125; </code></p></li><li><p>BreakAfterJavaFieldAnnotations(Boolean) 3.8以降</p><p>Javaファイルのアノテーションの改行を指定する。true<code>// アノテーションで改行する @Partial @Mock DataLoad loader; </code>false<code>// アノテーションで改行しない @Partial @Mock DataLoad loader; </code></p></li><li><p>BreakBeforeBinaryOperators(BinaryOperatorStyle) 3.6以降</p><p>二項演算子の並べ方を指定する。 値意味None演算子の後で改行する。NonAssignment代入ではない演算子の前で改行する。All演算子の前で改行する。trueAllと同じ動作。falseNoneと同じ動作。None<code>// 演算子の後で改行する。 LooooooooooongType loooooooooooooooooooooongVariable =    someLooooooooooooooooongFunction(); bool value = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +                     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ==                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &amp;&amp;             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &gt;                 ccccccccccccccccccccccccccccccccccccccccc; </code>NonAssignment<code>// 代入ではない演算子の後で改行する。 LooooooooooongType loooooooooooooooooooooongVariable =    someLooooooooooooooooongFunction(); bool value = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                     + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                 == aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa             &amp;&amp; aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                    &gt; ccccccccccccccccccccccccccccccccccccccccc; </code>All<code>// 演算子の前で改行する。 LooooooooooongType loooooooooooooooooooooongVariable    = someLooooooooooooooooongFunction(); bool value = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                     + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                 == aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa             &amp;&amp; aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                    &gt; ccccccccccccccccccccccccccccccccccccccccc; </code><strong>メモ書き</strong> NonAssignmentとAllの挙動が理解できない。改行位置はわかるがインデントはどうしてこの動作になるのか。(実動作を確認の結果、記載のインデントになる)</p></li><li><p>BreakBeforeBraces(BraceBreakingStyle) 3.7以降</p><p>括弧の制御を一括で指定する。 値意味Attach文脈の後に括弧を並べる。LinuxAttachと同様。ただし関数、名前空間、クラス定義(C#のレコード型を含む)の括弧は改行する。MozillaAttachと同様。ただし列挙型、関数、名前空間、クラス定義(C#のレコード型を含む)の括弧は改行する。StroustrupAttachと同様。ただし関数定義、catch、elseの前の括弧は改行する。Allman文脈の後の括弧を改行する。WhitesmithsAllmanと同様。ただし波括弧にインデントを付ける。GNUAllmanと同様。ただし制御文の波括弧にインデントを付ける。WebKitAttachと同様。ただし関数の括弧は改行する。CustomBraceWrappingフラグにより個々の改行ルールを決定する。(BraceWrappingの項を参照)Attach<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try &#123;    do &#123;      switch (i) &#123;      case 1: &#123;        foobar();        break;      &#125;      default: &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125; catch (...) &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b) &#123;    baz(2);  &#125; else &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>Linux<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try &#123;    do &#123;      switch (i) &#123;      case 1: &#123;        foobar();        break;      &#125;      default: &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125; catch (...) &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b) &#123;    baz(2);  &#125; else &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>Mozilla<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try &#123;    do &#123;      switch (i) &#123;      case 1: &#123;        foobar();        break;      &#125;      default: &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125; catch (...) &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b) &#123;    baz(2);  &#125; else &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>Stroustrup<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try &#123;    do &#123;      switch (i) &#123;      case 1: &#123;        foobar();        break;      &#125;      default: &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125;  catch (...) &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b) &#123;    baz(2);  &#125;  else &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>Allman<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try  &#123;    do    &#123;      switch (i)      &#123;      case 1:      &#123;        foobar();        break;      &#125;      default:      &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125;  catch (...)  &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b)  &#123;    baz(2);  &#125;  else  &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>Whitesmiths<code>namespace N  &#123; enum E  &#123;  E1,  E2,  &#125;; class C  &#123; public:  C();  &#125;; bool baz(int i)  &#123;  try    &#123;    do      &#123;      switch (i)        &#123;        case 1:        &#123;        foobar();        break;        &#125;        default:        &#123;        break;        &#125;        &#125;      &#125; while (--i);    return true;    &#125;  catch (...)    &#123;    handleError();    return false;    &#125;  &#125; void foo(bool b)  &#123;  if (b)    &#123;    baz(2);    &#125;  else    &#123;    baz(5);    &#125;  &#125; void bar() &#123; foo(true); &#125;  &#125; // namespace N </code>GNU<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try    &#123;      do        &#123;          switch (i)            &#123;            case 1:              &#123;                foobar();                break;              &#125;            default:              &#123;                break;              &#125;            &#125;        &#125;      while (--i);      return true;    &#125;  catch (...)    &#123;      handleError();      return false;    &#125; &#125; void foo(bool b) &#123;  if (b)    &#123;      baz(2);    &#125;  else    &#123;      baz(5);    &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code>WebKit<code>namespace N &#123; enum E &#123;  E1,  E2, &#125;; class C &#123; public:  C(); &#125;; bool baz(int i) &#123;  try &#123;    do &#123;      switch (i) &#123;      case 1: &#123;        foobar();        break;      &#125;      default: &#123;        break;      &#125;      &#125;    &#125; while (--i);    return true;  &#125; catch (...) &#123;    handleError();    return false;  &#125; &#125; void foo(bool b) &#123;  if (b) &#123;    baz(2);  &#125; else &#123;    baz(5);  &#125; &#125; void bar() &#123; foo(true); &#125; &#125; // namespace N </code></p></li><li><p>BreakBeforeConceptDeclarations(BreakBeforeConceptDeclarationsStyle) 12以降</p><p>コンセプトに対する括弧の制御方法を指定する。 値意味Neverテンプレート宣言とコンセプトを並べる。Allowed他のフラグ指定に従い、テンプレート宣言の後に改行を行うことが可能。指定がない場合、テンプレート宣言とコンセプトを並べる。Alwaysコンセプトの前で改行する。trueAlwaysと同じ動作。(レガシーオプション)falseAllowedと同じ動作。(レガシーオプション)Never<code>template &lt;class T&gt; concept Foo = requires(T &amp;x) &#123;&#125;; </code>Always<code>template &lt;class T&gt; concept Foo = requires(T &amp;x) &#123;&#125;; </code></p></li><li><p>BreakBeforeTernaryOperators(Boolean) 3.7以降</p><p>1行に収まらない三項演算子に対する括弧の制御方法を指定する。true<code>// 演算子の前で改行を行う veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription    ? firstValue    : SecondValueVeryVeryVeryVeryLong; </code>false<code>// 演算子の後で改行を行う veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription ?    firstValue :    SecondValueVeryVeryVeryVeryLong; </code></p></li><li><p>BreakConstructorInitializers(BreakConstructorInitializersStyle) 5以降</p><p>コンストラクタの初期化リストに対する制御方法を指定する。 値意味BeforeColonコロンの前とカンマの後で改行する。BeforeCommaコロンとカンマの前で改行し、コロンとカンマの位置を合わせる。AfterColonコロンとカンマの後で改行する。BeforeColon<code>Constructor()    : initializer1(),      initializer2() </code>BeforeComma<code>Constructor()    : initializer1()    , initializer2() </code>AfterColon<code>Constructor() :    initializer1(),    initializer2() </code></p></li><li><p>BreakInheritanceList(BreakInheritanceListStyle) 7以降</p><p>継承リストに対する制御方法を指定する。 値意味BeforeColonコロンの前とカンマの後で改行する。BeforeCommaコロンとカンマの前で改行し、コロンとカンマの位置を合わせる。AfterColonコロンとカンマの後で改行する。AfterCommaカンマの後で改行する。BeforeColon<code>class Foo    : Base1,      Base2 &#123;&#125;; </code>BeforeComma<code>class Foo    : Base1    , Base2 &#123;&#125;; </code>AfterColon<code>class Foo :    Base1,    Base2 &#123;&#125;; </code>AfterComma<code>class Foo : Base1,            Base2 &#123;&#125;; </code></p></li><li><p>BreakStringLiterals(Boolean) 3.9以降</p><p>1行に収まらない文字列リテラルに対する制御方法を指定する。true<code>// 1行の最大文字数で文字列リテラルを分割する const char* x = &quot;veryVeryVeryVeryVeryVe&quot;                &quot;ryVeryVeryVeryVeryVery&quot;                &quot;VeryLongString&quot;; </code>false<code>// 文字列リテラルを分割しない const char* x =  &quot;veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString&quot;; </code><strong>メモ書き</strong> 一度、BreakStringLiteralsをtrueに指定し文字列リテラルを整形したのち、falseを指定してフォーマットしなおした場合、分割された文字列リテラルは自動で繋がらない。(元に戻らない)</p></li><li><p>ColumnLimit(Unsigned) 3.7以降</p><p>1行の最大文字数を指定する。 0を指定した場合、ステートメント内で他のルールと矛盾しない限り無制限となる。</p></li><li><p>CommentPragmas(String) 3.7以降</p><p>行分割してはいけないコメントを、正規表現で指定する。 例<code>// CommentPragmas: &#39;^ FOOBAR pragma:&#39; // 上記の値を指定した場合、以下の行は改行されない。 #include &lt;vector&gt; // FOOBAR pragma: keep </code></p></li><li><p>CompactNamespaces(boolean) 5以降</p><p>連続した名前空間に対する制御方法を指定する。 true<code>// 連続した名前空間を改行しない。 namespace Foo &#123; namespace Bar &#123; &#125;&#125; // ただし、1行に収まらない場合、改行が行われる。 namespace Foo &#123; namespace Bar &#123; namespace Extra &#123; &#125;&#125;&#125; </code>false<code>// 連続した名前空間を改行する。 namespace Foo &#123; namespace Bar &#123; &#125; &#125; </code></p></li><li><p>ConstructorInitializerAllOnOneLineOrOnePerLine(Boolean) 3.7以降</p><p>非推奨のオプション。CurrentLine又はPackConstructorInitializersを参照。 </p></li><li><p>ConstructorInitializerIndentWidth(Unsigned) 3.7以降</p><p>コンストラクタの初期化リスト及び継承リストのインデントを指定する。 </p></li><li><p>ContinuationIndentWidth(Unsigned) 3.7以降</p><p>連続する行のインデントを指定する。 例<code>// ContinuationIndentWidth: 2 を指定した場合、連続した記述についてインデントが2ずつ付与される。 int i =         //  VeryVeryVeryVeryVeryLongComment  longFunction( // Again a long comment    arg); </code></p></li><li><p>Cpp11BracedListStyle(Boolean) 3.4以降</p><p>C++11の初期化リストのフォーマットを指定する。 【重要な相違点】 trueを指定した場合、 ・波括弧付きリストの内部に空白を入れない。 ・閉じ波括弧の前に改行しない。 ・ブロック・インデントではなく、継続インデントでインデントする。 となる。  基本的に、C++11 の初期化リストは、関数呼び出しと全く同じ書式で記述されます。初期化リストが名前（例えば型名や変数名）の後にある場合、clang-formatは{}をその名前を持つ関数呼び出しの括弧であるかのようにフォーマットします。もし名前がなければ、長さ0の名前と見なします。true<code>// 初期化リストの開き括弧の後と閉じ括弧の前に空白を挿入しない。 vector&lt;int&gt; x&#123;1, 2, 3, 4&#125;; vector&lt;T&gt; x&#123;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&#125;; f(MyMap[&#123;composite, key&#125;]); new int[3]&#123;1, 2, 3&#125;; </code>false<code>// 初期化リストの開き括弧の後と閉じ括弧の前に空白を挿入する。 vector&lt;int&gt; x&#123; 1, 2, 3, 4 &#125;; vector&lt;T&gt; x&#123; &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125; &#125;; f(MyMap[&#123; composite, key &#125;]); new int[3]&#123; 1, 2, 3 &#125;; </code></p></li><li><p>DeriveLineEnding(Boolean) 10以降</p><p>改行コードをCR+LF又はLFに統一する。 DeriveLineEndingにtrueを指定した場合、ファイル内で一番多い改行コードでファイルの改行を統一する。 DeriveLineEndingにfalseを指定した場合、UseCRLFがtrueであればファイルの改行コードをCR+LFで統一し、UseCRLFがfalseであればDeriveLineEndingにtrueを指定した場合と同じ動作となる。</p></li><li><p>DerivePointerAlignment(Boolean) 3.7以降</p><p>参照(&amp;)及びポインタ(*)の位置を統一する。 trueを指定した場合、ファイル内で一番記述の参照及びポインタの書式に統一する。 falseを指定した場合、PointerAlignmentで指定した値に従い書式を変更する。PointerAlignmentの指定がない場合、trueと同じ動作となる。例<code>int* p1 = NULL; // データ型に*が寄せられている int &amp;r1 = d;    // 変数名に&amp;が寄せられている int *p2 = NULL; // 変数名に*が寄せられている ↓ // DerivePointerAlignment: true を指定した場合 int *p1 = NULL; // 多数決(2対1)で変数名に寄せているパターンが多いので変数名側に統一される。 int &amp;r1 = d; int *p2 = NULL; </code></p></li><li><p>DisableFormat(Boolean) 3.7以降</p><p>フォーマットを無効にする。 </p></li><li><p>EmptyLineAfterAccessModifier(EmptyLineAfterAccessModifierStyle) 13以降</p><p>アクセス修飾子の後に対する制御方法を指定する。 値意味Neverアクセス修飾子の後の空行をすべて削除する。Leaveアクセス修飾子の後の空行を削除しない。代わりにMaxEmptyLinesToKeepによる制御が行われる。Alwaysアクセス修飾子の後の空行を追加する。MaxEmptyLinesToKeepによる制御も同時に適用される。Never<code>struct foo &#123; private:  int i; protected:  int j;  /* comment */ public:  foo() &#123;&#125; private: protected: &#125;; </code>Always<code>struct foo &#123; private:   int i; protected:   int j;  /* comment */ public:   foo() &#123;&#125; private: protected: &#125;; </code></p></li><li><p>EmptyLineBeforeAccessModifier(EmptyLineBeforeAccessModifierStyle) 12以降</p><p>アクセス修飾子の前に対する制御方法を指定する。 値意味Neverアクセス修飾子の前の空行をすべて削除する。Leaveアクセス修飾子の前の空行を削除しない。LogicalBlockアクセス修飾子が新しい論理ブロックを開始する場合だけ、空行を追加する。論理ブロックとは1つ以上のフィールド又は関数からなるグループのことを指す。Alwaysアクセス修飾子がクラスや構造体の先頭にある場合を除き、アクセス修飾子の前に空行を追加する。Never<code>struct foo &#123; private:  int i; protected:  int j;  /* comment */ public:  foo() &#123;&#125; private: protected: &#125;; </code>LogicalBlock<code>struct foo &#123; private:  int i; protected:  int j;  /* comment */ public:  foo() &#123;&#125; private: protected: &#125;; </code>Always<code>struct foo &#123; private:  int i; protected:  int j;  /* comment */ public:  foo() &#123;&#125; private: protected: &#125;; </code></p></li><li><p>ExperimentalAutoDetectBinPacking(Boolean) 3.7以降</p><p>trueの場合、clang-formatは関数呼び出しと定義が1行に1つのパラメータでフォーマットされているかどうかを検出します。  各呼び出しはbin-packed、1行ごと、または決定的でないことができます。もし結論が出ない場合、例えば完全に一行で、しかし決定を下す必要がある場合、clang-formatは入力ファイルに他のbin-packedケースがあるかどうかを分析し、それに応じて行動します。 <strong>注意</strong> これは実験的なフラグであり、削除されたり名前が変更されたりする可能性があります。設定ファイルなどでは使用しないでください。ご自身の責任で使用してください。<strong>メモ書き</strong> 記述内容及び挙動が理解できなかった為、直訳のみ。</p></li><li><p>FixNamespaceComments(Boolean) 5以降</p><p>名前空間の終了に自動でコメントを挿入するかを指定する。 true<code>namespace a &#123; foo(); bar(); &#125; // namespace a // ↑上記のコメントが自動で挿入される。 </code>false<code>namespace a &#123; foo(); bar(); &#125; // コメントの挿入が行われない。 </code><strong>メモ書き</strong> falseを指定しても既存のコメントが削除となるわけではない。逆にtrueを指定した場合、既存で独自にコメントを記載していても自動挿入で上書きされてしまう。</p></li><li><p>ForEachMacros(List of Strings) 3.7以降</p><p>foreachとして解釈されるべきマクロ名のリストを指定する。 例<code>// FOREACHマクロがforeachとして動作する FOREACH(&lt;variable-declaration&gt;, ...)  &lt;loop-body&gt; </code>.clang-format 設定ファイルでは、次の様に設定することができる。<code>ForEachMacros: [&#39;RANGES_FOR&#39;, &#39;FOREACH&#39;, &#39;BOOST_FOREACH&#39;] </code></p></li><li><p>IfMacros(List of Strings) 13以降</p><p>ifとして解釈されるべきマクロ名のリストを指定する。 例<code>IF(...)  &lt;conditional-body&gt; else IF(...)  &lt;conditional-body&gt; </code>.clang-format 設定ファイルでは、次の様に設定することができる。<code>ForEachMacros: [&#39;IF&#39;, &#39;KJ_IF_MAYBE&#39;] </code></p></li><li><p>IncludeBlocks(IncludeBlocksStyle) 6以降</p><p>#include定義の並び順を決定する。 値意味Preserveブロック単位でソートを行う。Mergeブロックを結合し、ソートを行う。Regroupブロックを結合し、ソートを行う。その後、カテゴリの優先順位に基づいてグループを分割する。IncludeCategoriesを参照。参考：ソート前<code>#include &quot;b.h&quot; #include &lt;lib/main.h&gt; #include &quot;a.h&quot;  </code>Preserve<code>#include &quot;b.h&quot; #include &quot;a.h&quot;  #include &lt;lib/main.h&gt; </code>Merge<code>#include &quot;a.h&quot;  #include &quot;b.h&quot; #include &lt;lib/main.h&gt; </code>Regroup<code>#include &quot;a.h&quot;  #include &quot;b.h&quot; #include &lt;lib/main.h&gt; </code></p></li><li><p>IncludeBlocks(List of IncludeCategories) 3.8以降</p><p>インクルードの順序付けに使用される、さまざまな #include カテゴリを示す正規表現です。 正規表現の表記はPOSIXに準拠する。 これらの正規表現は、インクルードのファイル名(&lt;&gt;または””を含む)の順に照合されます。最初にマッチした正規表現に属する優先順位が割り当てられ、#includeは、優先順位及びカテゴリ内でアルファベット順にソートされます。  どの正規表現にも一致しない場合、INT_MAXがカテゴリーとして割り当てられます。ソースファイルのメインヘッダは自動的にカテゴリ0になります。そのため、一般的には#includesの先頭に置かれます。しかし、常に最初に来る必要があるヘッダーがある場合は、負の優先順位を割り当てることもできます。  3番目のオプションフィールドにSortPriorityがあります。これは、IncludeBlocksにRegroupを指定した場合、有効となり、#includesを並べる優先順位を定義することができます。Priorityの値は、#includeブロックの順序を定義し、また、異なる優先順位の#includeをグループ化することができます。SortPriorityが指定されていない場合、Priorityの値がデフォルトとして設定されます。  各正規表現は、CaseSensitiveフィールドで大文字と小文字を区別するようにマークすることができますが、デフォルトではそうではありません。 .clang-format ファイルで設定するには、次のようにします。<code>IncludeCategories:  - Regex:           &#39;^&quot;(llvm|llvm-c|clang|clang-c)/&#39;    Priority:        2    SortPriority:    2    CaseSensitive:   true  - Regex:           &#39;^((&lt;|&quot;)(gtest|gmock|isl|json)/)&#39;    Priority:        3  - Regex:           &#39;&lt;[[:alnum:].]+&gt;&#39;    Priority:        4  - Regex:           &#39;.*&#39;    Priority:        1    SortPriority:    0 </code><strong>メモ書き</strong> SortPriority及びCaseSensitiveについては、古いバージョンでは指定ができない。(少なくとも8.0.1では使用ができなかった。)。いつ段階から実装されたかについては未調査。</p></li><li><p>IncludeIsMainRegex(String) 3.9以降</p><p>file-to-main-include のマッピングで許可されるサフィックスの正規表現を指定します。 ある#includeが「メイン」includeであるかどうかを推測する場合（カテゴリ0を割り当てるため、上記を参照）、ヘッダーステムに許容される接尾辞のこの正規表現を使用します。部分マッチが行われ、次のようになります。- “” は “任意のサフィックス” を意味します - “$” は “サフィックスなし” を意味します。  例えば、”(_test)?$” と設定した場合、ヘッダ a.h は a.cc と a_test.cc の両方で “main” include とみなされるでしょう。 <strong>メモ書き</strong> 記述内容が明確に理解できなかった為、直訳。 以下、見解。 IncludeCategoriesの動作でソースファイルに対応するメインヘッダを判定するための正規表現を指定する。つまり、”(_test)?$”という正規表現を指定した場合、a.ccというソースファイルのヘッダファイルはa.hと判断し、インクルードの記述をソートする際に、(負の優先度を持つヘッダを除いて)一番先頭に配置される。</p></li><li><p>IncludeIsMainSourceRegex(String) 10以降</p><p>フォーマットされるファイルのうち、file-to-main-includeマッピングで “main “とみなすことが許されるファイルの正規表現を指定します。  デフォルトでは、clang-formatはファイルが以下のように終わるときだけ “main “と見なします。.c, .cc, .cpp, .c++, .cxx, .m, .mm の拡張子で終わる場合のみ、clang-format はファイルを “main” と見なします。これらのファイルでは、「main」インクルードの推測が行われます（カテゴリ0を割り当てるには、上記を参照してください）。このオプションは、”main “とみなされるファイルのサフィックスと拡張子を追加することができます。  例えば、このオプションを (Impl.hpp)$ に設定すると、ClassImpl.hpp が “main” と見なされ (Class.c, Class.cc, Class.cpp などに加えて)、”main include file” ロジックが実行されます (IncludeIsMainRegex 設定も後のフェーズで尊重される)。このオプションが設定されていないと、ClassImpl.hppは他のどのincludeよりも先にmain include fileをトップに置くことができません。 <strong>メモ書き</strong> 記述内容が明確に理解できなかった為、直訳。 以下、見解。 IncludeIsMainRegexのソースファイル版。ソースファイルをインクルードした場合にメインとなるソースを判定する為の正規表現を指定する。</p></li><li><p>IndentAccessModifiers(Boolean) 13以降</p><p>アクセス修飾子が独自のインデントレベルを持つかどうかを指定します。 trueの場合、アクセス修飾子は独自のインデント・レベルを取得します。その結果、アクセス修飾子の有無にかかわらず、レコードのメンバは常にレコードの下の2つのレベルにインデントされます。AccessModifierOffsetの値は無視されます。 false の場合、アクセス修飾子はAccessModifierOffsetに従ってレコード・メンバから相対的にインデント (またはアウトデント)されます。レコード・メンバーはレコードの1レベル下にインデントされます。 true<code>class C &#123;    class D &#123;        void bar();      protected:        D();    &#125;;  public:    C(); &#125;; void foo() &#123;  return 1; &#125; </code>false<code>class C &#123;  class D &#123;    void bar();  protected:    D();  &#125;; public:  C(); &#125;; void foo() &#123;  return 1; &#125; </code></p></li><li><p>IndentCaseBlocks(Boolean) 11以降</p><p>ケースラベルブロックをケースラベルから1レベルインデントします。 trueの場合、ブロックはスコープブロックとしてインデントされます。 false の場合、ケースラベルに続くブロックはケースラベルと同じインデントレベルを使用し、ケースラベルは if 文と同じように扱われます。 true<code>switch (fool) &#123; case 1:  &#123;    bar();  &#125;  break; default:  &#123;    plop();  &#125; &#125; </code>false<code>switch (fool) &#123; case 1: &#123;  bar(); &#125; break; default: &#123;  plop(); &#125; &#125; </code></p></li><li><p>IndentCaseLabels(Boolean) 3.3以降</p><p>switch文のケースラベルのインデントを指定する。 trueの場合、ケースラベルはswitch文よりも一段インデントされます。 falseの場合、ケースラベルはswitch文と同じインデントレベルを使用します。 ステートメント本体は常にケースラベルよりも一段インデントされます。 true<code>switch (fool) &#123;  case 1:    bar();    break;  default:    plop(); &#125; </code>false<code>switch (fool) &#123; case 1:  bar();  break; default:  plop(); &#125; </code></p></li><li><p>IndentExternBlock(IndentExternBlockStyle) 11以降</p><p>外部結合ブロックのインデントの種類を指定する。 値意味AfterExternBlockBraceWrapping.AfterExternBlockの動作に従う。(AfterExternBlockの項を参照)NoIndent外部結合ブロックのインデントを行わない。Indent外部結合ブロックのインデントを行う。trueIndentと同じ動作となる。(レガシーオプション)falseNoIndentと同じ動作となる。(レガシーオプション)NoIndent<code>extern &quot;C&quot; &#123; void foo(); &#125; </code>Indent<code>extern &quot;C&quot; &#123;  void foo(); &#125; </code></p></li><li><p>IndentGotoLabels(Boolean) 10以降</p><p>gotoラベルのインデントを指定する。 true<code>// gotoラベルはステートメント内で左寄せになる int f() &#123;  if (foo()) &#123;  label1:    bar();  &#125; label2:  return 1; &#125; </code>false<code>// gotoラベルは左寄せになる int f() &#123;  if (foo()) &#123; label1:    bar();  &#125; label2:  return 1; &#125; </code></p></li><li><p>IndentPPDirectives(IndentExternBlockStyle) 6以降</p><p>プリプロセッサ・ディレクティブのインデントの種類を指定する。 値意味Noneプリプロセッサ・ディレクティブのインデントを行わない。AfterHashハッシュの後についてインデントを行う。BeforeHashハッシュを含めてインデントを行う。None<code>#if FOO #if BAR #include &lt;foo&gt; #endif #endif </code>AfterHash<code>#if FOO #  if BAR #    include &lt;foo&gt; #  endif #endif </code>BeforeHash<code>#if FOO  #if BAR    #include &lt;foo&gt;  #endif #endif </code></p></li><li><p>IndentRequiresClause(Boolean) 15以降</p><p>テンプレート定義のrequires節のインデントを指定する。 これは、RequiresClausePositionがOwnLine又はWithFollowingの場合にのみ適用されます。 備考 名前が変更されています。clang-format 12～14では、IndentRequiresという名前でした。true<code>template &lt;typename It&gt;  requires Iterator&lt;It&gt; void sort(It begin, It end) &#123;  //.... &#125; </code>false<code>template &lt;typename It&gt; requires Iterator&lt;It&gt; void sort(It begin, It end) &#123;  //.... &#125; </code></p></li><li><p>IndentWidth(Unsigned) 3.7以降</p><p>インデントに使用する値を指定する </p></li><li><p>IndentWrappedFunctionNames(Boolean) 3.7以降</p><p>関数定義や宣言が1行に収まらない場合、次行をインデントするか指定する。 true<code>// 次の行をインデントする LoooooooooooooooooooooooooooooooooooooooongReturnType    LoooooooooooooooooooooooooooooooongFunctionDeclaration(); </code>false<code>// 次の行をインデントしない LoooooooooooooooooooooooooooooooooooooooongReturnType    LoooooooooooooooooooooooooooooooongFunctionDeclaration(); </code></p></li><li><p>InsertBraces(Boolean) 15以降</p><p>C++の制御文（if, else, for, do, while）の後に波括弧を入れる。ただし、制御文がマクロ定義の中にあるか、波括弧がプリプロセッサー指令を囲んでしまう場合は除く。 警告 このオプションを true に設定すると、clang-format の完全なセマンティック情報の欠如により、不正なコードフォーマットになる可能性があります。そのため、このオプションで変更されたコードをレビューする際には、特に注意が必要です。true<code>// 波括弧を省略しているステートメントについて自動で波括弧を付与する if (isa&lt;FunctionDecl&gt;(D)) &#123;  handleFunctionDecl(D); &#125; else if (isa&lt;VarDecl&gt;(D)) &#123;  handleVarDecl(D); &#125; else &#123;  return; &#125; while (i--) &#123;  for (auto *A : D.attrs()) &#123;    handleAttr(A);  &#125; &#125; do &#123;  --i; &#125; while (i); </code>false<code>// 波括弧を省略しているステートメントについて何もしない if (isa&lt;FunctionDecl&gt;(D))  handleFunctionDecl(D); else if (isa&lt;VarDecl&gt;(D))  handleVarDecl(D); else  return; while (i--)  for (auto *A : D.attrs())    handleAttr(A); do  --i; while (i); </code><strong>メモ書き</strong> 既に波括弧を付与しているファイルに対してfalseを指定しても、波括弧の削除は行われない。</p></li><li><p>InsertTrailingCommas(TrailingCommaStyle) 11以降</p><p>複数行にまたがるコンテナリテラル(配列とオブジェクト)の末尾のカンマを付与を指定する。 Clang-Format15の段階ではJavaScriptのみ使用可能で、デフォルトはNoneで無効となっている。 また、BinPackArgumentsと同時に使用することは出来ません。 値意味None末尾にカンマを挿入しない。Wrapped末尾にカンマを挿入する。Wrapped<code>const someArray = [ aaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaaaaaaaa, //                        ^ inserted ] </code></p></li><li><p>InsertTrailingCommas(List of Strings) 8以降</p><p>Javaのimport宣言のグループ化の接頭辞を指定する。 一致する接頭辞が複数ある場合、最長の接頭辞を優先する。グループ内は辞書順にソートされる。静的なインポートは別でグループ化され、同じルールが適用となる。デフォルトでは静的なインポート宣言は非静的なインポート宣言の前に配置される。この動作はSortJavaStaticImportにより変更が可能である。 .clang-format ファイルで次の設定をした場合、Javaのインポート宣言は以下のように並びます。<code>JavaImportGroups: [&#39;com.example&#39;, &#39;com&#39;, &#39;org&#39;] </code>Javaソースの例<code>import static com.example.function1; import static com.test.function2; import static org.example.function3; import com.example.ClassA; import com.example.Test; import com.example.a.ClassB; import com.test.ClassC; import org.example.ClassD; </code></p></li><li><p>JavaScriptQuotes(JavaScriptQuoteStyle) 3.9以降</p><p>JavaScriptの文字列のクォートを指定する。 値意味Leave文字列のクォートは変更しない。Single常にシングルクォートを使用する。Double常にダブルクォートを使用する。Leave<code>string1 = &quot;foo&quot;; string2 = &#39;bar&#39;; </code>Single<code>string1 = &#39;foo&#39;; string2 = &#39;bar&#39;; </code>Single<code>string1 = &quot;foo&quot;; string2 = &quot;bar&quot;; </code></p></li><li><p>JavaScriptWrapImports(Boolean) 3.9以降</p><p>JavaScriptのimport&#x2F;export文をラップ方法を指定する。 true<code>import &#123;    VeryLongImportsAreAnnoying,    VeryLongImportsAreAnnoying,    VeryLongImportsAreAnnoying, &#125; from &#39;some/module.js&#39; </code>false<code>import &#123;VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying,&#125; from &quot;some/module.js&quot; </code></p></li><li><p>KeepEmptyLinesAtTheStartOfBlocks(Boolean) 3.7以降</p><p>ブロックの先頭の空白の扱いを指定する。 true<code>// ブロックの先頭の空白を維持する if (foo) &#123;   bar(); &#125; </code>false<code>// ブロックの先頭の空白を削除する if (foo) &#123;  bar(); &#125; </code><strong>メモ書き</strong> 維持であり、挿入ではない。trueを指定しても空白行の挿入は行われない。</p></li><li><p>LambdaBodyIndentation(LambdaBodyIndentationKind) 13以降</p><p>ラムダ式の本体の改行ルールを指定する。 コールバックの多いコードではOuterScopeを使用してシグネチャを2段階インデントした方が可読性が高くなる場合がある。(<a href="https://github.com/capnproto/capnproto/blob/master/style-guide.md">KJ Style guide</a>ではOuterScopeを必須としています) 値意味Signatureラムダ式の本体をシグネチャのインデントレベルに対して1段下げる。OuterScopeラムダ式の本体を親スコープのインデントレベルに対して1段下げる。Signature<code>someMethod(    [](SomeReallyLongLambdaSignatureArgument foo) &#123;      return;    &#125;); </code>OuterScope<code>someMethod(    [](SomeReallyLongLambdaSignatureArgument foo) &#123;  return; &#125;); </code></p></li><li><p>Language(LanguageKind) 3.5以降</p><p>対象となる言語を指定する。 値意味CppC言語及びC++に使用する。CSharpC♯に使用する。JavaJavaに使用する。JavaScriptJavaScriptに使用する。JsonJsonに使用する。ObjCObjective-C及びObjective-C++に使用する。ProtoProtocol Buffersに使用する。(<a href="https://developers.google.com/protocol-buffers/)TableGenTableGen%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%80%82TextProto%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%BD%A2%E5%BC%8F%E3%81%AEProtocol">https://developers.google.com/protocol-buffers/)TableGenTableGenに使用する。TextProtoテキスト形式のProtocol</a> Buffersに使用する。(<a href="https://developers.google.com/protocol-buffers/)VerilogVerilog%E5%8F%8A%E3%81%B3SystemVerilog%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%80%82">https://developers.google.com/protocol-buffers/)VerilogVerilog及びSystemVerilogに使用する。</a>(<a href="https://standards.ieee.org/ieee/1800/6700/">https://standards.ieee.org/ieee/1800/6700/</a> <a href="https://sci-hub.st/10.1109/IEEESTD.2018.8299595)**%E3%83%A1%E3%83%A2%E6%9B%B8%E3%81%8D">https://sci-hub.st/10.1109/IEEESTD.2018.8299595)**メモ書き</a>** 公式にはNoneが使用不可で記載されている。プログラム上、LanguageKindにNoneの定義が無いので指定するとyamlの解析でエラーになる。(使用不可というかそもそも使えない、レガシー？)例<code>--- # 各言語の共通設定を記述する BasedOnStyle: LLVM IndentWidth: 4 --- # C++固有の設定を書く Language: Cpp ... # ここまでC++固有の設定 --- # JavaScript固有の設定を書く Language: JavaScript ... # ここまでJavaScript固有の設定 --- # 以下同様に必要な言語の設定を記載していく ... </code></p></li><li><p>MacroBlockBegin(String) 3.7以降 MacroBlockEnd(String) 3.7以降</p><p>ブロックの先頭及び末尾となるマクロを正規表現で指定する。 記述例<code>MacroBlockBegin: &quot;^NS_MAP_BEGIN|NS_TABLE_HEAD$&quot; MacroBlockEnd: &quot;^NS_MAP_END|NS_TABLE_.*_END$&quot; </code>実行例(MacroBlockBegin及びMacroBlockEndを指定しない場合)<code>// マクロで開始終了を内包するようなパターンの場合 #deinfe NS_MAP_BEGIN if( x ) &#123; #deinfe NS_MAP_END   &#125; // 開始/終了のマクロが判断できないため、本体部分の処理が前寄せになる。 NS_MAP_BEGIN foo(); NS_MAP_END </code>実行例(MacroBlockBegin及びMacroBlockEndを指定した場合)<code>// 開始/終了のマクロが正規表現で判定出来たため、本体部分の処理にインデントが付与される。 NS_MAP_BEGIN  foo(); NS_MAP_END </code></p></li><li><p>MaxEmptyLinesToKeep(String) 3.7以降 </p><p>空行の最大保持数を指定する。 変更前<code>int f() &#123;   int i = 1;   i = foo();   return i;  &#125; </code>MaxEmptyLinesToKeep : 0 を指定した場合<code>int f() &#123;  int i = 1;  i = foo();  return i; &#125; </code>MaxEmptyLinesToKeep : 1 を指定した場合<code>int f() &#123;   int i = 1;   i = foo();   return i; &#125; // ↑ステートメントの終了前の空白は必ずすべて削除される。 </code><strong>メモ書き</strong> MaxEmptyLinesToKeepにNを指定しても最大N行の空白行が残るだけで、N行の空白が挿入となるわけではない。</p></li><li><p>NamespaceIndentation(NamespaceIndentationKind) 3.7以降</p><p>名前空間のインデントを指定する。 コールバックの多いコードではOuterScopeを使用してシグネチャを2段階インデントした方が可読性が高くなる場合がある。(<a href="https://github.com/capnproto/capnproto/blob/master/style-guide.md">KJ Style guide</a>ではOuterScopeを必須としています) 値意味None名前空間にインデントを行わない。Innerネストした名前空間だけインデントを行う。Allすべての名前空間をインデントする。None<code>namespace out &#123; int i; namespace in &#123; int i; &#125; &#125; </code>Inner<code>namespace out &#123; int i; namespace in &#123;  int i; &#125; &#125; </code>All<code>namespace out &#123;  int i;  namespace in &#123;    int i;  &#125; &#125; </code></p></li><li><p>NamespaceMacros(List of Strings) 9以降 </p><p>名前空間の開始となるマクロのリストを指定する。 記述例<code>NamespaceMacros: [&#39;NAMESPACE&#39;, &#39;TESTSUITE&#39;] </code>実行例<code>NAMESPACE(&lt;namespace-name&gt;, ...) &#123;  &lt;namespace-content&gt; &#125; </code></p></li><li><p>ObjCBinPackProtocolList(BinPackStyle) 9以降</p><p>Objective-Cプロトコル準拠のリスト項目がColumnLimitを超えた場合の改行の制御を指定する。 値意味AutoBinPackParametersの指定に従う。BinPackParametersがtrueの場合、Alwaysと同じ動作となる。falseの場合、Neverと同じ動作となる。AlwaysColumnLimitに収まる最小の行に纏める。Never個々の行に纏める。Always(又はAutoかつBinPackParametersがtrue)<code>@interface ccccccccccccc () &lt;    ccccccccccccc, ccccccccccccc,    ccccccccccccc, ccccccccccccc&gt; &#123; &#125; </code>Never(又はAutoかつBinPackParametersがfalse)<code>@interface ddddddddddddd () &lt;    ddddddddddddd,    ddddddddddddd,    ddddddddddddd,    ddddddddddddd&gt; &#123; &#125; </code></p></li><li><p>ObjCBlockIndentWidth(Unsigned) 3.7以降</p><p>Objective-Cブロックのインデントの値を指定する。 </p></li><li><p>ObjCBreakBeforeNestedBlockParam(Boolean) 11以降</p><p>Objective-Cの関数呼び出し時にブロックパラメータがネストしている場合の、パラメータリストの記載方法について指定する。 true<code>- (void)_aMethod &#123;  [self.test1 t:self              w:self       callback:^(typeof(self) self, NSNumber *u, NSNumber *v) &#123;           u = c;       &#125;] &#125; </code>false<code>- (void)_aMethod &#123;  [self.test1 t:self w:self       callback:^(typeof(self) self, NSNumber *u, NSNumber *v) &#123;           u = c;       &#125;] &#125; </code></p></li><li><p>ObjCSpaceAfterProperty(Boolean) 3.7以降</p><p>Objective-Cの@propertyの後にスペースを入れるかを指定する。 true<code>@property (readonly) NSString* foo;  </code>false<code>@property(readonly) NSString* foo;  </code></p></li><li><p>ObjCSpaceBeforeProtocolList(Boolean) 3.7以降</p><p>Objective-Cのプロトコルリストの前にスペースを入れるかを指定する。 true<code>@protocol Foo &lt;NSObject&gt; </code>false<code>@protocol Foo&lt;NSObject&gt; </code></p></li><li><p>PPIndentWidth(Integer) 13以降</p><p>プリプロセッサのインデントの値を指定する。 -1を指定した場合、IndentWidthの値が使用される。PPIndentWidth: 1 の場合<code>#ifdef __linux__ # define FOO #else # define BAR #endif </code></p></li><li><p>PackConstructorInitializers(PackConstructorInitializersStyle) 14以降</p><p>コンストラクタの初期化リストの並べ方について指定する。 値意味Never初期化リストは1行ずつ改行する。BinPackColumnLimitに収まる最小の行に纏める。CurrentLineすべての初期化リストが1行に収まる場合、1行に纏める。1行に収まらない場合、Neverと同じ動作となる。NextLineCurrentLineと同じ動作。ただし、コンストラクタの開始行にすべての要素が収まらない場合、次の行に収まるようにする。Never<code>Constructor()    : a(),      b() </code>BinPack<code>Constructor()    : aaaaaaaaaaaaaaaaaaaa(), bbbbbbbbbbbbbbbbbbbb(),      cccccccccccccccccccc() </code>CurrentLine<code>Constructor() : a(), b() // すべての要素が1行で収まらない場合、Neverと同じ動作をする Constructor()    : aaaaaaaaaaaaaaaaaaaa(),      bbbbbbbbbbbbbbbbbbbb(),      ddddddddddddd() </code>NextLine<code>// コンストラクタと同じ行に収まる場合、その行にすべての要素を出力する。 Constructor() : a(), b() // コンストラクタと同じ行に収まらない場合、次の行に収まるように整形する。 Constructor()    : aaaaaaaaaaaaaaaaaaaa(), bbbbbbbbbbbbbbbbbbbb(), ddddddddddddd() // 次の行にも収まらない長さの場合、Neverと同じ動作をする。 Constructor()    : aaaaaaaaaaaaaaaaaaaa(),      bbbbbbbbbbbbbbbbbbbb(),      cccccccccccccccccccc() </code></p></li><li><p>PenaltyBreakAssignment(Unsigned) 5以降</p><p>代入演算子関連の改行に対するペナルティ <strong>メモ書き</strong> 以降Penalty～について、用途が理解できなかった為、直訳のみ。 ただし、BasedOnStyleの各定義を見ると値を設定しているため、必要な数値である模様。</p></li><li><p>PenaltyBreakBeforeFirstCallParameter(Unsigned) 3.7以降</p><p>関数呼び出し後の改行に対するペナルティ </p></li><li><p>PenaltyBreakComment(Unsigned) 3.7以降</p><p>コメント内での改行に対するペナルティ </p></li><li><p>PenaltyBreakFirstLessLess(Unsigned) 3.7以降</p><p>最初の左シフトの前の改行に対するペナルティ </p></li><li><p>PenaltyBreakOpenParenthesis(Unsigned) 14以降</p><p>’(’の後の改行に対するペナルティ </p></li><li><p>PenaltyBreakString(Unsigned) 3.7以降</p><p>文字列リテラル内の改行に対するペナルティ </p></li><li><p>PenaltyBreakTemplateDeclaration(Unsigned) 7以降</p><p>テンプレート宣言の後の改行に対するペナルティ </p></li><li><p>PenaltyExcessCharacter(Unsigned) 3.7以降</p><p>行の最大文字数を超過した場合の文字の改行に対するペナルティ </p></li><li><p>PenaltyIndentedWhitespace(Unsigned) 12以降</p><p>空白文字のインデント1文字あたりのペナルティ(非ホワイトスペースの先頭列からの相対値でカウントされる)。 </p></li><li><p>PenaltyReturnTypeOnItsOwnLine(Unsigned) 3.7以降</p><p>関数の戻り値の型を関数と同一行とした場合のペナルティ。 </p></li><li><p>PointerAlignment(PointerAlignmentStyle) 3.7以降</p><p>ポインタ及び参照のアライメントについて指定する。 値意味Left左に寄せる。Right右に寄せる。Middle中央に寄せる。trueLeftと同じ動作。(レガシーオプション)falseRightと同じ動作。(レガシーオプション)Left<code>int* a; </code>Right<code>int *a; </code>Middle<code>int * a; </code></p></li><li><p>QualifierAlignment(QualifierAlignmentStyle) 14以降</p><p>指定子や修飾子の並べ方を指定する(例：const&#x2F;volatile)。 <strong>警告</strong> QualifierAlignmentをLeave以外に設定すると、clang-formatsが完全な意味情報を持っていないため、間違った判断を下してしまい、コードが正しくフォーマットされない可能性があります。そのため、このオプションを使って変更されたコードをレビューする際には、特別な注意を払う必要があります。値意味Leave変更しない。Left指定子及び修飾子を左に寄せる。Right指定子及び修飾子を右に寄せる。CustomQualifierOrderで指定した値に従う。Leave<code>int const a; const int *a; </code>Left<code>const int a; const int *a; </code>Right<code>int const a; int const *a; </code>QualifierOrderの指定(Custom用)<code>QualifierOrder: [&#39;inline&#39;, &#39;static&#39; , &#39;type&#39;, &#39;const&#39;] </code>Custom<code>// 修飾子及び型がQualifierOrderで指定した順序(&#39;type&#39;, &#39;const&#39;)の順に並ぶ int const a; int const *a; </code></p></li><li><p>QualifierOrder(List of Strings) 14以降</p><p>型、指定子及び修飾子の並び順を文字列リストで指定する。 この値はQualifierAlignmentにCustomを指定した場合、使用される。 指定する文字列リストは必ず’type’を含む必要がある。 指定可能なキーワードは以下のとおり。 ・const ・inline ・static ・constexpr ・volatile ・restrict ・type ※typeはデータ型を意味する(例えばint)例<code>QualifierOrder: [&#39;inline&#39;, &#39;static&#39; , &#39;type&#39;, &#39;const&#39;] </code></p></li><li><p>RawStringFormats(List of RawStringFormats) 6以降</p><p>変換対象のファイルの内容がどの言語のコードブロックであるか判断するための定義を指定する。 デリミタが一致するか、関数名が一致する文字列を検出した場合、.clang-formatでその言語用に指定した定義によりフォーマットを行う。特定言語に対しての定義が見つからない場合、BasedOnStyleで指定したフォーマットに従い再変換を行う。BasedOnStyleが見つからない場合、llvmのフォーマットに基づき変換を行う。 マッチする言語は区切り文字にマッチするものが関数にマッチするものよりも優先されます。 例<code>RawStringFormats:  - Language: TextProto  # Language参照      Delimiters: # 拡張子        - &#39;pb&#39;        - &#39;proto&#39;      EnclosingFunctions: # 一致する関数等        - &#39;PARSE_TEXT_PROTO&#39;      BasedOnStyle: google # 一致した場合のフォーマット  - Language: Cpp      Delimiters:        - &#39;cc&#39;        - &#39;cpp&#39;      BasedOnStyle: llvm      CanonicalDelimiter: &#39;cc&#39; </code></p></li><li><p>ReferenceAlignment(ReferenceAlignmentStyle) 13以降</p><p>参照のアライメントについて指定する。(参照についてPointerAlignmentの指定を上書きする) 値意味PointerPointerAlignmentの指定に従う。Left左に寄せる。Right右に寄せる。Middle中央に寄せる。Left<code>int&amp; a; </code>Right<code>int &amp;a; </code>Middle<code>int &amp; a; </code></p></li><li><p>ReflowComments(ReferenceAlignmentStyle) 4以降</p><p>1行の最大文字数を超えたコメントの折り返しについて指定する。 true<code>// ColumnLimitを超えるコメントを自動で改行する // veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of // information /* second veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of * information */ </code>false<code>// ColumnLimitを超えるコメントの改行を行わない // veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of information /* second veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of information */ </code></p></li><li><p>RemoveBracesLLVM(Boolean) 14以降</p><p>LLVMコーディングスタイルに従って、C++の制御文（if, else, for, while）のオプションの波括弧を削除する。 <strong>警告</strong> このオプションは名称を変更し、他のスタイルにも対応できるように拡張する予定です。<strong>警告</strong> このオプションを true に設定すると、clang-format の完全なセマンティック情報の欠如により、不正なコードフォーマットになる可能性があります。そのため、このオプションで変更されたコードをレビューする際には、特に注意が必要です。true<code>// 省略が可能な波括弧について削除する if (isa&lt;FunctionDecl&gt;(D))  handleFunctionDecl(D); else if (isa&lt;VarDecl&gt;(D))  handleVarDecl(D); if (isa&lt;VarDecl&gt;(D)) &#123;  for (auto *A : D.attrs())    if (shouldProcessAttr(A))      handleAttr(A); &#125; if (isa&lt;FunctionDecl&gt;(D))  for (auto *A : D.attrs())    handleAttr(A); if (auto *D = (T)(D)) &#123;  if (shouldProcess(D))    handleVarDecl(D);  else    markAsIgnored(D); &#125; if (a)  b(); else if (c)  d(); else  e(); </code>false<code>// 波括弧を特に変更しない if (isa&lt;FunctionDecl&gt;(D)) &#123;  handleFunctionDecl(D); &#125; else if (isa&lt;VarDecl&gt;(D)) &#123;  handleVarDecl(D); &#125; if (isa&lt;VarDecl&gt;(D)) &#123;  for (auto *A : D.attrs()) &#123;    if (shouldProcessAttr(A)) &#123;      handleAttr(A);    &#125;  &#125; &#125; if (isa&lt;FunctionDecl&gt;(D)) &#123;  for (auto *A : D.attrs()) &#123;    handleAttr(A);  &#125; &#125; if (auto *D = (T)(D)) &#123;  if (shouldProcess(D)) &#123;    handleVarDecl(D);  &#125; else &#123;    markAsIgnored(D);  &#125; &#125; if (a) &#123;  b(); &#125; else &#123;  if (c) &#123;    d();  &#125; else &#123;    e();  &#125; &#125; </code></p></li><li><p>RequiresClausePosition(RequiresClausePositionStyle) 15以降</p><p>requires句の改行について指定する。 値意味OwnLine必ず改行する。WithPreceding宣言と同じ行となるようにする。クラス又は関数のテンプレート宣言の場合、テンプレート宣言に従う。関数宣言の場合、引数リストに従う。WithFollowingクラスや関数の宣言と同じにする。SingleLine可能な限り1行に記載する。1行で記載できない場合、改行する。OwnLine<code>template &lt;typename T&gt; requires C&lt;T&gt; struct Foo &#123;... template &lt;typename T&gt; requires C&lt;T&gt; void bar(T t) &#123;... template &lt;typename T&gt; void baz(T t) requires C&lt;T&gt; &#123;... </code>WithPreceding<code>template &lt;typename T&gt; requires C&lt;T&gt; struct Foo &#123;... template &lt;typename T&gt; requires C&lt;T&gt; void bar(T t) &#123;... template &lt;typename T&gt; void baz(T t) requires C&lt;T&gt; &#123;... </code>WithFollowing<code>template &lt;typename T&gt; requires C&lt;T&gt; struct Foo &#123;... template &lt;typename T&gt; requires C&lt;T&gt; void bar(T t) &#123;... template &lt;typename T&gt; void baz(T t) requires C&lt;T&gt; &#123;... </code>SingleLine<code>// 1行で収まる場合 template &lt;typename T&gt; requires C&lt;T&gt; struct Foo &#123;... template &lt;typename T&gt; requires C&lt;T&gt; void bar(T t) &#123;... template &lt;typename T&gt; void bar(T t) requires C&lt;T&gt; &#123;... // 1行で収まらない場合 template &lt;typename LongName&gt; requires C&lt;LongName&gt; struct Foo &#123;... template &lt;typename LongName&gt; requires C&lt;LongName&gt; void bar(LongName ln) &#123; template &lt;typename LongName&gt; void bar(LongName ln)    requires C&lt;LongName&gt; &#123; </code></p></li><li><p>SeparateDefinitionBlocks(SeparateDefinitionStyle) 14以降</p><p>クラス、構造体、列挙型、関数などの定義ブロックの区切りに、空行を挿入するかを指定する。 値意味Leave変更しない。Always定義ブロックの区切りに改行を挿入する。Never定義ブロックの区切りの改行を削除する。Always<code>#include &lt;cstring&gt; struct Foo &#123;  int a, b, c; &#125;; namespace Ns &#123; class Bar &#123; public:  struct Foobar &#123;    int a;    int b;  &#125;; private:  int t;   int method1() &#123;    // ...  &#125;   enum List &#123;    ITEM1,    ITEM2  &#125;;   template &lt;typename T&gt; int method2(T x) &#123;    // ...  &#125;   int i, j, k;   int method3(int par) &#123;    // ...  &#125; &#125;; class C &#123;&#125;; &#125; </code>Never<code>#include &lt;cstring&gt; struct Foo &#123;  int a, b, c; &#125;; namespace Ns &#123; class Bar &#123; public:  struct Foobar &#123;    int a;    int b;  &#125;; private:  int t;  int method1() &#123;    // ...  &#125;  enum List &#123;    ITEM1,    ITEM2  &#125;;  template &lt;typename T&gt; int method2(T x) &#123;    // ...  &#125;  int i, j, k;  int method3(int par) &#123;    // ...  &#125; &#125;; class C &#123;&#125;; &#125; </code></p></li><li><p>ShortNamespaceLines(Unsigned) 13以降</p><p>短い名前空間は何行以下であるかについて、行数を指定する。デフォルトは1。 この値はFixNamespaceCommentsがtrueの場合、終了コメントを追加するために使用する。ShortNamespaceLines: 0 を指定した場合<code>// どちらの名前空間も0行より大きいので、FixNamespaceCommentsの動作により名前空間の末尾にコメントを挿入する。 namespace a &#123;  int foo; &#125; // namespace a namespace b &#123;  int foo;  int bar; &#125; // namespace b </code>ShortNamespaceLines: 1 を指定した場合<code>// 名前空間aは1行以下なのでコメントの挿入を行わない。bは1行より大きいのでコメントの挿入を行う。 namespace a &#123;  int foo; &#125; namespace b &#123;  int foo;  int bar; &#125; // namespace b </code></p></li><li><p>SortIncludes(SortIncludesOptions) 4以降</p><p>インクルート文のソート条件について指定する。 値意味Neverソートしない。CaseSensitive大文字と小文字を区別してアスキーコード順にソートを行う。CaseInsensitive大文字と小文字を区別せずアルファベット順にソートを行う。trueCaseSensitiveと同じ動作。(レガシーオプション)falseNeverと同じ動作。(レガシーオプション)Never<code>#include &quot;B/A.h&quot; #include &quot;A/B.h&quot; #include &quot;a/b.h&quot; #include &quot;A/b.h&quot; #include &quot;B/a.h&quot; </code>CaseSensitive<code>#include &quot;A/B.h&quot; #include &quot;A/b.h&quot; #include &quot;B/A.h&quot; #include &quot;B/a.h&quot; #include &quot;a/b.h&quot; </code>CaseInsensitive<code>#include &quot;A/B.h&quot; #include &quot;A/b.h&quot; #include &quot;a/b.h&quot; #include &quot;B/A.h&quot; #include &quot;B/a.h&quot; </code></p></li><li><p>SortJavaStaticImport(SortJavaStaticImportOptions) 12以降</p><p>Javaのインポート文の並び順について指定する。 値意味Before静的なインポートを非静的なインポートの前に置く。After静的なインポートを非静的なインポートの後に置く。Before<code>import static org.example.function1; import org.example.ClassA; </code>After<code>import org.example.ClassA; import static org.example.function1; </code><strong>メモ書き</strong> 公式ドキュメントに不備あり。JavaStaticImportAfterImportについてはSortJavaStaticImportの誤記の理解。</p></li><li><p>SortUsingDeclarations(Boolean) 5以降</p><p>using宣言のソート方法を指定する。 ソートは名前空間の単位で行う。また、ソートは大文字小文字を区別せず、アルファベット順で行う。true<code>using foo::bar; using std::cin; using std::cout; using ABC::DEF::GHI; using ABC::XYZ::GHI; </code>false<code>using std::cout; using std::cin; using foo::bar; using ABC::XYZ::GHI; using ABC::DEF::GHI; </code></p></li><li><p>SpaceAfterCStyleCast(Boolean) 3.5以降</p><p>C言語キャストの後のスペースを指定する。 true<code>// C言語キャストの後にスペースを挿入する (int) i;  </code>false<code>// C言語キャストの後にスペースを挿入しない (int) i;  </code></p></li><li><p>SpaceAfterLogicalNot(Boolean) 9以降</p><p>論理否定の後のスペースを指定する。 true<code>// 論理否定の後にスペースを挿入する ! someExpression(); </code>false<code>// 論理否定の後にスペースを挿入しない !someExpression(); </code></p></li><li><p>SpaceAfterTemplateKeyword(Boolean) 4以降</p><p>テンプレートキーワードの後のスペースを指定する。 true<code>// テンプレートキーワードの後にスペースを挿入する template &lt;int&gt; void foo(); </code>false<code>// テンプレートキーワードの後にスペースを挿入しない template&lt;int&gt; void foo(); </code></p></li><li><p>SpaceAroundPointerQualifiers(SpaceAroundPointerQualifiersStyle) 12以降</p><p>ポインタ修飾子(const&#x2F;volatile)の前後の空白を指定する。 また、PointerAlignmentの動作とは別で空白の挿入が行われる。 値意味DefaultPointerAlignmentで指定した動作とする。Beforeポインタ修飾子の前に空白を挿入する。Afterポインタ修飾子の後に空白を挿入する。Bothポインタ修飾子の前後に空白を挿入する。Default(PointerAlignment: Leftの場合)<code>void* const* x = NULL; </code>Default(PointerAlignment: Rightの場合)<code>void *const *x = NULL; </code>Before(PointerAlignment: Leftの場合)<code>void* const* x = NULL; </code>Before(PointerAlignment: Rightの場合)<code>void * const * x = NULL; </code>After(PointerAlignment: Leftの場合)<code>void* const * x = NULL; </code>After(PointerAlignment: Rightの場合)<code>void *const *x = NULL; </code>Both(PointerAlignment: Leftの場合)<code>void* const * x = NULL; </code>Both(PointerAlignment: Rightの場合)<code>void * const *x = NULL; </code></p></li><li><p>SpaceBeforeAssignmentOperators(Boolean) 3.7以降</p><p>代入演算子の前のスペースを指定する。 true<code>// 代入演算子の前にスペースを挿入する。 int a = 5; a += 42; </code>false<code>// 代入演算子の前のスペースを削除する。 int a= 5; a+= 42; </code></p></li><li><p>SpaceBeforeCaseColon(Boolean) 12以降</p><p>caseラベルのコロンの前のスペースを指定する。 true<code>// caseラベルのコロンの前にスペースを挿入する。 switch (x) &#123;  case 1 : break; &#125; </code>false<code>// caseラベルのコロンの前のスペースを削除する。 switch (x) &#123;  case 1: break; &#125; </code></p></li><li><p>SpaceBeforeCpp11BracedList(Boolean) 7以降</p><p>C++11の初期化リストの前のスペースを指定する。 true<code>// 初期化リストの前にスペースを挿入する。 Foo foo &#123; bar &#125;; Foo &#123;&#125;; vector&lt;int&gt; &#123; 1, 2, 3 &#125;; new int[3] &#123; 1, 2, 3 &#125;; </code>false<code>// 初期化リストの前のスペースを削除する。 Foo foo&#123; bar &#125;; Foo&#123;&#125;; vector&lt;int&gt;&#123; 1, 2, 3 &#125;; new int[3]&#123; 1, 2, 3 &#125;; </code></p></li><li><p>SpaceBeforeCtorInitializerColon(Boolean) 7以降</p><p>コンストラクタの初期化リストのコロンの前のスペースを指定する。 true<code>// コロンの前にスペースを挿入する。 Foo::Foo() : a(a) &#123;&#125;  </code>false<code>// コロンの前のスペースを削除する。 Foo::Foo(): a(a) &#123;&#125; </code></p></li><li><p>SpaceBeforeInheritanceColon(Boolean) 7以降</p><p>クラス宣言の継承リストのコロンの前のスペースを指定する。 true<code>// コロンの前にスペースを挿入する。 class Foo : Bar &#123;&#125; </code>false<code>// コロンの前のスペースを削除する。 class Foo: Bar &#123;&#125;  </code></p></li><li><p>SpaceBeforeParens(SpaceBeforeParensStyle) 3.5以降</p><p>丸括弧の前にスペースを挿入する条件を指定する。 値意味Never丸括弧の前の空白を削除する。ControlStatements制御文のキーワード(for&#x2F;if&#x2F;while等)の後のみ、丸括弧の前に空白を挿入する。ControlStatementsExceptControlMacrosControlStatementsと同じ動作。ただし、ForEachMacros及びIfMacrosにて指定したマクロ名には適用されない。NonEmptyParentheses括弧内が空ではない場合、丸括弧の前に空白を挿入する。Always構文規約で禁止されている(関数マクロの定義等)又は他のスタイル規則で決められている場合を除き、丸括弧の前に空白を挿入する。CustomSpaceBeforeParensOptionsにより、個別に指定を行う。falseNeverと同じ動作。(レガシーオプション)trueControlStatementsと同じ動作。(レガシーオプション)ControlStatementsExceptForEachMacrosControlStatementsExceptControlMacrosと同じ動作。(レガシーオプション)Never<code>void f() &#123;  if(true) &#123;    f();  &#125; &#125; </code>ControlStatements<code>void f() &#123;  if (true) &#123;    f();  &#125; &#125; </code>ControlStatementsExceptControlMacros<code>void f() &#123;  Q_FOREACH(...) &#123;    f();  &#125; &#125; </code>NonEmptyParentheses<code>void() &#123;  if (true) &#123;    f();    g (x, y, z);  &#125; &#125; </code>Always<code>void f () &#123;  if (true) &#123;    f ();  &#125; &#125; </code></p></li><li><p>SpaceBeforeParensOptions(SpaceBeforeParensCustom) 14以降</p><p>丸括弧の前にスペース制御を個別に指定する。 SpaceBeforeParensがCustomに指定されている場合、SpaceBeforeParensOptionsで指定した値に従い、スペースの制御を行います。SpaceBeforeParensがCustom以外の場合、この値は無視されます。記述例<code>SpaceBeforeParens: Custom SpaceBeforeParensOptions:  AfterControlStatements: true  AfterFunctionDefinitionName: true </code>AfterControlStatements(Boolean)制御文のキーワード(for&#x2F;if&#x2F;while等)と開始括弧の間のスペースを指定する。true<code>// スペースを挿入する if (...) &#123;&#125; </code>false<code>// スペースを削除する if(...) &#123;&#125; </code>AfterForeachMacros(Boolean)ForEachMacrosで指定したマクロと開始括弧の間のスペースを指定する。true<code>// スペースを挿入する FOREACH (...)  &lt;loop-body&gt; </code>false<code>// スペースを削除する FOREACH(...)  &lt;loop-body&gt; </code>AfterFunctionDeclarationName(Boolean)関数宣言と開始括弧の間のスペースを指定する。true<code>// スペースを挿入する void f (); </code>false<code>// スペースを削除する void f(); </code>AfterFunctionDefinitionName(Boolean)関数定義と開始括弧の間のスペースを指定する。true<code>// スペースを挿入する void f () &#123;&#125;; </code>false<code>// スペースを削除する void f() &#123;&#125;; </code>AfterIfMacros(Boolean)IfMacrosで指定したマクロと開始括弧の間のスペースを指定する。true<code>// スペースを挿入する IF (...)  &lt;conditional-body&gt; </code>false<code>// スペースを削除する IF(...)  &lt;conditional-body&gt; </code>AfterIfMacros(Boolean)演算子のオーバーロードと開始括弧の間のスペースを指定する。true<code>// スペースを挿入する void operator++ (int a); object.operator++ (10);  </code>false<code>// スペースを削除する void operator++(int a); object.operator++(10);  </code>AfterRequiresInClause(Boolean)requires句と開始括弧の間のスペースを指定する。true<code>// スペースを挿入する template&lt;typename T&gt; requires (A&lt;T&gt; &amp;&amp; B&lt;T&gt;) ... </code>false<code>// スペースを削除する template&lt;typename T&gt; requires(A&lt;T&gt; &amp;&amp; B&lt;T&gt;) ... </code>AfterRequiresInExpression(Boolean)requires式と開始括弧の間のスペースを指定する。true<code>// スペースを挿入する template&lt;typename T&gt; concept C = requires (T t) &#123;              ...            &#125; </code>false<code>// スペースを削除する template&lt;typename T&gt; concept C = requires(T t) &#123;              ...            &#125; </code>BeforeNonEmptyParentheses(Boolean)括弧内が空ではない場合の、開始括弧の間のスペースを指定する。true<code>// 括弧内が空白ではない場合、スペースを挿入する void f (int a); f (a); </code>false<code>// スペースを削除する void f(); f(); </code></p></li><li><p>SpaceBeforeRangeBasedForLoopColon(Boolean) 7以降</p><p>範囲指定でのfor文のコロンの前のスペースを指定する。 true<code>// コロンの前にスペースを挿入する。 for (auto v : values) &#123;&#125; </code>false<code>// コロンの前のスペースを削除する。 for (auto v: values) &#123;&#125; </code><strong>メモ書き</strong> 公式の例ではforの前のスペースについても変更されているが、誤記の理解。(clang-format8.0.1及び15で確認の結果、変更されない)</p></li><li><p>SpaceBeforeSquareBrackets(Boolean) 10以降</p><p>角括弧の前のスペースを指定する。ただし、ラムダ式についてはこの指定の影響を受けない。 true<code>// 角括弧の前にスペースを挿入する。 int a [5]; int a [5][5]; </code>false<code>// 角括弧の前のスペースを削除する。 int a[5]; int a[5][5]; </code></p></li><li><p>SpaceInEmptyBlock(Boolean) 10以降</p><p>空白の波括弧の間のスペースを指定する。 true<code>// 空白の波括弧の間にスペースを挿入する。 void f() &#123; &#125; while (true) &#123; &#125; </code>false<code>// 空白の波括弧の間のスペースを削除する。 void f() &#123;&#125; while (true) &#123;&#125; </code></p></li><li><p>SpaceInEmptyParentheses(Boolean) 3.7以降</p><p>空白の丸括弧の間のスペースを指定する。 true<code>// 空白の丸括弧の間にスペースを挿入する。 void f( ) &#123;  int x[] = &#123;foo( ), bar( )&#125;;  if (true) &#123;    f( );  &#125; &#125; </code>false<code>// 空白の丸括弧の間のスペースを削除する。 void f() &#123;  int x[] = &#123;foo(), bar()&#125;;  if (true) &#123;    f();  &#125; &#125; </code></p></li><li><p>SpacesBeforeTrailingComments(Unsigned) 3.7以降</p><p>行コメント(&#x2F;&#x2F;)の前のスペースの数を指定する。 SpacesBeforeTrailingComments: 3 の場合<code>// 空白の丸括弧の間にスペースを挿入する。 void f() &#123;  if (true) &#123;   // スペース3個分空白が開く    f();        // 上に合わせる  &#125;             // foo &#125; </code></p></li><li><p>SpacesInAngles(SpacesInAnglesStyle) 3.4以降</p><p>テンプレートの引数リストの前後の空白を指定する。 値意味Never&lt; の後と &gt; の前のスペースを削除する。Always&lt; の後と &gt; の前にスペースを挿入する。Leave&lt; の後と &gt; の前にスペースがあった場合、スペースを1つずつ残す。StandardにCpp03を指定している場合、そちらを優先する。trueAlwaysと同じ動作。(レガシーオプション)falseNeverと同じ動作。(レガシーオプション)Never<code>// 引数リストの前後のスペースを削除する。 static_cast&lt;int&gt;(arg); std::function&lt;void(int)&gt; fct; </code>Always<code>// 引数リストの前後にスペースを挿入する。 static_cast&lt; int &gt;(arg); std::function&lt; void(int) &gt; fct; </code></p></li><li><p>SpacesInCStyleCastParentheses(Boolean) 3.7以降</p><p>C言語キャストの丸括弧内のスペースを指定する。 true<code>// 開き丸括弧の後及び閉じ丸括弧の前にスペースを挿入する。 x = ( int32 )y; </code>false<code>// 開き丸括弧の後及び閉じ丸括弧の前のスペースを削除する。 x = (int32)y; </code></p></li><li><p>SpacesInConditionalStatement(Boolean) 10以降</p><p>制御文(if, for, switch, while)の丸括弧内のスペースを指定する。 true<code>// 開き丸括弧の後及び閉じ丸括弧の前にスペースを挿入する。 if ( a )  &#123; ... &#125; while ( i &lt; 5 )  &#123; ... &#125; </code>false<code>// 開き丸括弧の後及び閉じ丸括弧の前のスペースを削除する。 if (a)  &#123; ... &#125; while (i &lt; 5)  &#123; ... &#125; </code></p></li><li><p>SpacesInContainerLiterals(Boolean) 3.7以降</p><p>コンテナ・リテラル(Objective-CやJavascriptの配列やdictリテラルなど)内のスペースを指定する。 true<code>// コンテナ・リテラル内にスペースを挿入する。 var arr = [ 1, 2, 3 ]; f(&#123;a : 1, b : 2, c : 3&#125;); </code>false<code>// コンテナ・リテラル内のスペースを削除する。 var arr = [1, 2, 3]; f(&#123;a: 1, b: 2, c: 3&#125;); </code></p></li><li><p>SpacesInLineCommentPrefix(SpacesInLineComment) 13以降</p><p>行頭のコメントで許容されるスペースの数の最大値及び最小値を指定する。 最大値に―1を指定した場合、最大値は無効となる。それ以外の場合、最大値が最小値より優先される。書式例<code>SpacesInLineCommentPrefix:  Minimum: 1  Maximum: -1 </code>Minimum: 2、Maximum: -1の場合<code>//  //の後に2文字スペースが挿入される //  if (b) &#123; //    return true; //  &#125;          </code>Minimum: 2、Maximum: 1の場合<code>// //の後に1文字スペースが挿入される(最小は2だが最大が1の為、最大数を設定となる) // if (b) &#123; //   return true; // &#125;          </code></p></li><li><p>SpacesInParentheses(Boolean) 3.7以降</p><p>丸括弧内の前後のスペースを指定する。 true<code>// 開き丸括弧の後及び閉じ丸括弧の前にスペースを挿入する。 t f( Deleted &amp; ) &amp; = delete; </code>false<code>// 開き丸括弧の後及び閉じ丸括弧の前のスペースを削除する。 t f(Deleted &amp;) &amp; = delete; </code></p></li><li><p>SpacesInSquareBrackets(Boolean) 3.7以降</p><p>角括弧内の前後のスペースを指定する。ただしラムダ式と値の無い角括弧のブロックについては対象外とする。 true<code>// 開き角括弧の後及び閉じ角括弧の前にスペースを挿入する。 int a[ 5 ]; std::unique_ptr&lt;int[]&gt; foo() &#123;&#125; // 値の無い角括弧は対象外 </code>false<code>// 開き角括弧の後及び閉じ角括弧の前のスペースを削除する。 int a[5]; </code></p></li><li><p>Standard(LanguageStandard) 3.7以降</p><p>対象とするC++の規格を指定する。 値意味c++03 C++03 Cpp03C++03を指定する。c++11 Cpp11C++11を指定する。c++14C++17を指定する。c++17C++14を指定する。c++20C++20を指定する。LatestLatestを指定する。動作としてはC++11と同じになる。Auto自動で判別を行う。</p></li><li><p>StatementAttributeLikeMacros(List of Strings) 12以降</p><p>識別子として解釈させず、属性と同じように無視されるキーワードを指定する。 Qtのemitなどを識別子として処理させないための定義である。 書式例<code>StatementAttributeLikeMacros: [&#39;emit&#39;, &#39;Q_EMIT&#39;] </code>StatementAttributeLikeMacros: [] を指定した場合<code>unsigned char data = &#39;x&#39;; emit          signal(data); // emitを識別子と勘違いしてしまい、おかしな並び方になる </code>StatementAttributeLikeMacros: [‘emit’] を指定した場合<code>unsigned char data = &#39;x&#39;; emit signal(data); // emitを識別子と認識させない </code></p></li><li><p>StatementMacros(List of Strings) 8以降</p><p>完全な式として解釈されるべきマクロを指定する。 書式例<code>StatementMacros: [&#39;Q_UNUSED&#39;, &#39;QT_REQUIRE_VERSION&#39;] </code></p></li><li><p>TabWidth(Unsigned) 3.7以降</p><p>タブ文字の数を指定する。 </p></li><li><p>TypenameMacros(List of Strings) 9以降</p><p>関数呼び出しとしてではなく、型宣言として解釈されるべきマクロを指定する。 書式例<code>TypenameMacros: [&#39;STACK_OF&#39;, &#39;LIST&#39;] </code></p></li><li><p>UseCRLF(Unsigned) 10以降</p><p>ファイル内の改行コードを指定する。 trueを指定した場合、ファイルの改行コードをCR+LFで統一する。DeriveLineEndingにtrueの場合、このフラグは無効となる。 </p></li><li><p>UseTab(UseTabStyle) 3.7以降</p><p>変換結果のファイルでのタブの使用について指定する。 値意味Neverタブを使用しない。ForIndentationインデントについてのみタブを使用する。ForContinuationAndIndentation先頭の空白はすべてタブで埋め、行内に現れるアライメント(連続した代入や宣言など)にはスペースを使用する。AlignWithSpaces行の継続とインデントにはタブを使用し、整列にはスペースを使用します。Always少なくとも1つのタブストップから次のタブストップまでの空白を埋める必要がある場合は、タブを使用します。trueAlwaysと同じ動作を行う。(レガシーオプション)falseNeverと同じ動作を行う。(レガシーオプション)</p></li><li><p>WhitespaceSensitiveMacros(List of Strings) 11以降</p><p>ホワイトスペースが影響する変更をかけてはいけないマクロを指定する。 書式例<code>WhitespaceSensitiveMacros: [&#39;STRINGIZE&#39;, &#39;PP_STRINGIZE&#39;] </code></p></li></ul><h2 id="３-書式例"><a href="#３-書式例" class="headerlink" title="３. 書式例"></a>３. 書式例</h2><p>Clang-Format15でのLLVMの既定値を以下に示す。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Language:        Cpp</span><br><span class="line"># BasedOnStyle:  LLVM</span><br><span class="line">AccessModifierOffset: -2</span><br><span class="line">AlignAfterOpenBracket: Align</span><br><span class="line">AlignArrayOfStructures: None</span><br><span class="line">AlignConsecutiveMacros: None</span><br><span class="line">AlignConsecutiveAssignments: None</span><br><span class="line">AlignConsecutiveBitFields: None</span><br><span class="line">AlignConsecutiveDeclarations: None</span><br><span class="line">AlignEscapedNewlines: Right</span><br><span class="line">AlignOperands:   Align</span><br><span class="line">AlignTrailingComments: true</span><br><span class="line">AllowAllArgumentsOnNextLine: true</span><br><span class="line">AllowAllConstructorInitializersOnNextLine: true</span><br><span class="line">AllowAllParametersOfDeclarationOnNextLine: true</span><br><span class="line">AllowShortEnumsOnASingleLine: true</span><br><span class="line">AllowShortBlocksOnASingleLine: Never</span><br><span class="line">AllowShortCaseLabelsOnASingleLine: false</span><br><span class="line">AllowShortFunctionsOnASingleLine: All</span><br><span class="line">AllowShortLambdasOnASingleLine: All</span><br><span class="line">AllowShortIfStatementsOnASingleLine: Never</span><br><span class="line">AllowShortLoopsOnASingleLine: false</span><br><span class="line">AlwaysBreakAfterDefinitionReturnType: None</span><br><span class="line">AlwaysBreakAfterReturnType: None</span><br><span class="line">AlwaysBreakBeforeMultilineStrings: false</span><br><span class="line">AlwaysBreakTemplateDeclarations: MultiLine</span><br><span class="line">AttributeMacros:</span><br><span class="line">  - __capability</span><br><span class="line">BinPackArguments: true</span><br><span class="line">BinPackParameters: true</span><br><span class="line">BraceWrapping:</span><br><span class="line">  AfterCaseLabel:  false</span><br><span class="line">  AfterClass:      false</span><br><span class="line">  AfterControlStatement: Never</span><br><span class="line">  AfterEnum:       false</span><br><span class="line">  AfterFunction:   false</span><br><span class="line">  AfterNamespace:  false</span><br><span class="line">  AfterObjCDeclaration: false</span><br><span class="line">  AfterStruct:     false</span><br><span class="line">  AfterUnion:      false</span><br><span class="line">  AfterExternBlock: false</span><br><span class="line">  BeforeCatch:     false</span><br><span class="line">  BeforeElse:      false</span><br><span class="line">  BeforeLambdaBody: false</span><br><span class="line">  BeforeWhile:     false</span><br><span class="line">  IndentBraces:    false</span><br><span class="line">  SplitEmptyFunction: true</span><br><span class="line">  SplitEmptyRecord: true</span><br><span class="line">  SplitEmptyNamespace: true</span><br><span class="line">BreakBeforeBinaryOperators: None</span><br><span class="line">BreakBeforeConceptDeclarations: true</span><br><span class="line">BreakBeforeBraces: Attach</span><br><span class="line">BreakBeforeInheritanceComma: false</span><br><span class="line">BreakInheritanceList: BeforeColon</span><br><span class="line">BreakBeforeTernaryOperators: true</span><br><span class="line">BreakConstructorInitializersBeforeComma: false</span><br><span class="line">BreakConstructorInitializers: BeforeColon</span><br><span class="line">BreakAfterJavaFieldAnnotations: false</span><br><span class="line">BreakStringLiterals: true</span><br><span class="line">ColumnLimit:     80</span><br><span class="line">CommentPragmas:  &#x27;^ IWYU pragma:&#x27;</span><br><span class="line">CompactNamespaces: false</span><br><span class="line">ConstructorInitializerAllOnOneLineOrOnePerLine: false</span><br><span class="line">ConstructorInitializerIndentWidth: 4</span><br><span class="line">ContinuationIndentWidth: 4</span><br><span class="line">Cpp11BracedListStyle: true</span><br><span class="line">DeriveLineEnding: true</span><br><span class="line">DerivePointerAlignment: false</span><br><span class="line">DisableFormat:   false</span><br><span class="line">EmptyLineAfterAccessModifier: Never</span><br><span class="line">EmptyLineBeforeAccessModifier: LogicalBlock</span><br><span class="line">ExperimentalAutoDetectBinPacking: false</span><br><span class="line">FixNamespaceComments: true</span><br><span class="line">ForEachMacros:</span><br><span class="line">  - foreach</span><br><span class="line">  - Q_FOREACH</span><br><span class="line">  - BOOST_FOREACH</span><br><span class="line">IfMacros:</span><br><span class="line">  - KJ_IF_MAYBE</span><br><span class="line">IncludeBlocks:   Preserve</span><br><span class="line">IncludeCategories:</span><br><span class="line">  - Regex:           &#x27;^&quot;(llvm|llvm-c|clang|clang-c)/&#x27;</span><br><span class="line">    Priority:        2</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">  - Regex:           &#x27;^(&lt;|&quot;(gtest|gmock|isl|json)/)&#x27;</span><br><span class="line">    Priority:        3</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">  - Regex:           &#x27;.*&#x27;</span><br><span class="line">    Priority:        1</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">IncludeIsMainRegex: &#x27;(Test)?$&#x27;</span><br><span class="line">IncludeIsMainSourceRegex: &#x27;&#x27;</span><br><span class="line">IndentAccessModifiers: false</span><br><span class="line">IndentCaseLabels: false</span><br><span class="line">IndentCaseBlocks: false</span><br><span class="line">IndentGotoLabels: true</span><br><span class="line">IndentPPDirectives: None</span><br><span class="line">IndentExternBlock: AfterExternBlock</span><br><span class="line">IndentRequires:  false</span><br><span class="line">IndentWidth:     2</span><br><span class="line">IndentWrappedFunctionNames: false</span><br><span class="line">InsertTrailingCommas: None</span><br><span class="line">JavaScriptQuotes: Leave</span><br><span class="line">JavaScriptWrapImports: true</span><br><span class="line">KeepEmptyLinesAtTheStartOfBlocks: true</span><br><span class="line">LambdaBodyIndentation: Signature</span><br><span class="line">MacroBlockBegin: &#x27;&#x27;</span><br><span class="line">MacroBlockEnd:   &#x27;&#x27;</span><br><span class="line">MaxEmptyLinesToKeep: 1</span><br><span class="line">NamespaceIndentation: None</span><br><span class="line">ObjCBinPackProtocolList: Auto</span><br><span class="line">ObjCBlockIndentWidth: 2</span><br><span class="line">ObjCBreakBeforeNestedBlockParam: true</span><br><span class="line">ObjCSpaceAfterProperty: false</span><br><span class="line">ObjCSpaceBeforeProtocolList: true</span><br><span class="line">PenaltyBreakAssignment: 2</span><br><span class="line">PenaltyBreakBeforeFirstCallParameter: 19</span><br><span class="line">PenaltyBreakComment: 300</span><br><span class="line">PenaltyBreakFirstLessLess: 120</span><br><span class="line">PenaltyBreakString: 1000</span><br><span class="line">PenaltyBreakTemplateDeclaration: 10</span><br><span class="line">PenaltyExcessCharacter: 1000000</span><br><span class="line">PenaltyReturnTypeOnItsOwnLine: 60</span><br><span class="line">PenaltyIndentedWhitespace: 0</span><br><span class="line">PointerAlignment: Right</span><br><span class="line">PPIndentWidth:   -1</span><br><span class="line">ReferenceAlignment: Pointer</span><br><span class="line">ReflowComments:  true</span><br><span class="line">ShortNamespaceLines: 1</span><br><span class="line">SortIncludes:    CaseSensitive</span><br><span class="line">SortJavaStaticImport: Before</span><br><span class="line">SortUsingDeclarations: true</span><br><span class="line">SpaceAfterCStyleCast: false</span><br><span class="line">SpaceAfterLogicalNot: false</span><br><span class="line">SpaceAfterTemplateKeyword: true</span><br><span class="line">SpaceBeforeAssignmentOperators: true</span><br><span class="line">SpaceBeforeCaseColon: false</span><br><span class="line">SpaceBeforeCpp11BracedList: false</span><br><span class="line">SpaceBeforeCtorInitializerColon: true</span><br><span class="line">SpaceBeforeInheritanceColon: true</span><br><span class="line">SpaceBeforeParens: ControlStatements</span><br><span class="line">SpaceAroundPointerQualifiers: Default</span><br><span class="line">SpaceBeforeRangeBasedForLoopColon: true</span><br><span class="line">SpaceInEmptyBlock: false</span><br><span class="line">SpaceInEmptyParentheses: false</span><br><span class="line">SpacesBeforeTrailingComments: 1</span><br><span class="line">SpacesInAngles:  Never</span><br><span class="line">SpacesInConditionalStatement: false</span><br><span class="line">SpacesInContainerLiterals: true</span><br><span class="line">SpacesInCStyleCastParentheses: false</span><br><span class="line">SpacesInLineCommentPrefix:</span><br><span class="line">  Minimum:         1</span><br><span class="line">  Maximum:         -1</span><br><span class="line">SpacesInParentheses: false</span><br><span class="line">SpacesInSquareBrackets: false</span><br><span class="line">SpaceBeforeSquareBrackets: false</span><br><span class="line">BitFieldColonSpacing: Both</span><br><span class="line">Standard:        Latest</span><br><span class="line">StatementAttributeLikeMacros:</span><br><span class="line">  - Q_EMIT</span><br><span class="line">StatementMacros:</span><br><span class="line">  - Q_UNUSED</span><br><span class="line">  - QT_REQUIRE_VERSION</span><br><span class="line">TabWidth:        8</span><br><span class="line">UseCRLF:         false</span><br><span class="line">UseTab:          Never</span><br><span class="line">WhitespaceSensitiveMacros:</span><br><span class="line">  - STRINGIZE</span><br><span class="line">  - PP_STRINGIZE</span><br><span class="line">  - BOOST_PP_STRINGIZE</span><br><span class="line">  - NS_SWIFT_NAME</span><br><span class="line">  - CF_SWIFT_NAME</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文在介绍使用clong-format格式化代码时，命令行参数或定义文件（.clong-format）的格式。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>项目：Locale_Emulator破解</title>
    <link href="http://example.com/2024/08/02/%E9%A1%B9%E7%9B%AE%EF%BC%9ALocale-Emulator%E7%A0%B4%E8%A7%A3/"/>
    <id>http://example.com/2024/08/02/%E9%A1%B9%E7%9B%AE%EF%BC%9ALocale-Emulator%E7%A0%B4%E8%A7%A3/</id>
    <published>2024-08-02T11:25:04.000Z</published>
    <updated>2024-08-02T12:22:18.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件类型的学习"><a href="#文件类型的学习" class="headerlink" title="文件类型的学习"></a>文件类型的学习</h2><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p>​Lua 是一个小巧的脚本语言。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。</p><p>​ 其设计目的是为了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p><p>​Lua脚本可以很容易的被C&#x2F;C++ 代码调用，也可以反过来调用C&#x2F;C++的函数，这使得Lua在应用程序中可以被广泛应用。不仅仅作为扩展脚本，也可以作为普通的配置文件，代替XML,ini等文件格式，并且更容易理解和维护。 Lua由标准C编写而成，代码简洁优美，几乎在所有操作系统和平台上都可以编译，运行。一个完整的Lua解释器不过200k，在所有脚本引擎中，Lua的速度是最快的。这一切都决定了Lua是作为嵌入式脚本的最佳选择。</p><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p>在软件开发项目中，LICENSE文件是指许可证文件，它包含了关于软件授权和使用的条款和条件。LICENSE文件用于明确告知其他人在使用、修改或分发项目的源代码或二进制文件时需要遵守的规则。</p><p>LICENSE文件的存在对于开源软件项目尤为重要，因为它定义了项目的开源许可证类型和条款。开源许可证允许用户自由地使用、修改和分发软件，同时也规定了一些限制和责任。</p><p>常见的开源许可证类型包括：</p><ul><li>GNU通用公共许可证（GNU General Public License，GPL）：</li></ul><p>这是一种最为广泛使用的开源许可证之一。它要求任何修改或衍生作品也必须使用GPL许可证发布。</p><ul><li>MIT许可证：</li></ul><p>这是一种宽松的许可证，允许用户在满足许可证条件的情况下自由地使用、修改和分发软件。</p><ul><li>Apache许可证：</li></ul><p>这是一种较为灵活的许可证，要求用户在满足许可证条件的情况下使用、修改和分发软件，同时保留原始许可证和版权声明。</p><ul><li>BSD许可证：</li></ul><p>这是一系列开源许可证的名称，如BSD 2-Clause License和BSD 3-Clause License。BSD许可证相对宽松，允许用户自由地使用、修改和分发软件。</p><p>LICENSE文件通常是文本文件，其中包含了许可证的全文或摘要，以及版权信息和作者的声明。它提供了对软件的法律授权和使用规则的清晰说明，有助于保护软件项目和维护开源社区的准则。在使用开源软件或参与开源项目时，非常重要的一点是仔细阅读和遵守LICENSE文件中所规定的许可证条款和条件。这有助于确保遵守开源软件的法律要求，并与其他开发者和用户建立良好的合作关系。</p><h3 id="clang-format"><a href="#clang-format" class="headerlink" title=".clang-format"></a>.clang-format</h3><p>详情参考网页</p><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><p>hpp，Header plus plus的缩写，实质是将.cpp的实现代码混入.h头文件，即声明与定义（实现）都包含在同一个文件中。</p><p>该类的调用者只需要include该hpp文件即可，无需再将cpp加入到project中进行编译。</p><p>实现代码将直接编译到调用者的obj文件中，不再生成单独的obj。</p><p>采用hpp将大幅度减小project中的cpp文件数与编译次数，也不再发布烦人的lib与dll，因此非常适合用来编写公用的开源库。</p><p>hpp文件与h文件的联系：</p><ol><li>与*.h类似，hpp是C++程序的头文件</li></ol><p>（2）是VCL（Visual Component Library的缩写，即可视组件库）专用的头文件，已预编译</p><p>（3）是一般模板类的头文件</p><p>（4）一般来说，*.h里面只有声明，没有实现；而*.hpp里面既有声明也有实现，显然后者可以减少.cpp文件的数量。</p><h4 id="base-cpp"><a href="#base-cpp" class="headerlink" title="base.cpp"></a>base.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;macro.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;basic_type.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_BEGIN</span>(global)</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> is_debug</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LIBRARY_DEBUG</span></span><br><span class="line">    <span class="literal">true</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="literal">false</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> is_release = !is_debug;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &lt;= 202202L</span></span><br><span class="line"></span><br><span class="line">[[noreturn]] <span class="function"><span class="keyword">inline</span> <span class="keyword">auto</span> <span class="title">unreachable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// https://en.cppreference.com/w/cpp/utility/unreachable</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__ <span class="comment">// GCC, Clang, ICC</span></span></span><br><span class="line">    __builtin_unreachable();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER <span class="comment">// MSVC</span></span></span><br><span class="line">    __assume(<span class="literal">false</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_END</span>(global)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="basic-type-hpp"><a href="#basic-type-hpp" class="headerlink" title="basic_type.hpp"></a>basic_type.hpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> u8  = std::<span class="type">uint_least8_t</span>;</span><br><span class="line"><span class="keyword">using</span> u16 = std::<span class="type">uint_least16_t</span>;</span><br><span class="line"><span class="keyword">using</span> u32 = std::<span class="type">uint_least32_t</span>;</span><br><span class="line"><span class="keyword">using</span> u64 = std::<span class="type">uint_least64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i8  = std::<span class="type">int_least8_t</span>;</span><br><span class="line"><span class="keyword">using</span> i16 = std::<span class="type">int_least16_t</span>;</span><br><span class="line"><span class="keyword">using</span> i32 = std::<span class="type">int_least32_t</span>;</span><br><span class="line"><span class="keyword">using</span> i64 = std::<span class="type">int_least64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> usize = std::<span class="type">size_t</span>;</span><br><span class="line"><span class="comment">// see https://en.cppreference.com/w/cpp/iterator/size</span></span><br><span class="line"><span class="keyword">using</span> isize = std::<span class="type">common_type_t</span>&lt;std::<span class="type">ptrdiff_t</span>, std::<span class="type">make_signed_t</span>&lt;usize&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> f32 = <span class="type">float</span>;</span><br><span class="line"><span class="keyword">using</span> f64 = <span class="type">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(u8)  &gt;= <span class="number">1</span> &amp;&amp; <span class="built_in">sizeof</span>(i8)  &gt;= <span class="number">1</span>);</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(u16) &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">sizeof</span>(i16) &gt;= <span class="number">2</span>);</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(u32) &gt;= <span class="number">4</span> &amp;&amp; <span class="built_in">sizeof</span>(i32) &gt;= <span class="number">4</span>);</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(u64) &gt;= <span class="number">8</span> &amp;&amp; <span class="built_in">sizeof</span>(i64) &gt;= <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(f32) == <span class="number">4</span> &amp;&amp; <span class="built_in">sizeof</span>(f64) == <span class="number">8</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="macro-hpp"><a href="#macro-hpp" class="headerlink" title="macro.hpp"></a>macro.hpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NAMESPACE_BEGIN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESPACE_BEGIN(name) namespace name &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NAMESPACE_END</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESPACE_END(name) &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ALWAYS_INLINE</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> ALWAYS_INLINE __forceinline</span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> ALWAYS_INLINE [[gnu::always_inline]]</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PROJECT_SET_SYMBOL</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> defined(_WIN32) || defined(__CYGWIN__)</span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line">            <span class="meta">#<span class="keyword">define</span> PROJECT_EXPORT __attribute__(dllexport)</span></span><br><span class="line">            <span class="meta">#<span class="keyword">define</span> PROJECT_IMPORT __attribute__(dllimport)</span></span><br><span class="line">        <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">define</span> PROJECT_EXPORT __declspec(dllexport)</span></span><br><span class="line">            <span class="meta">#<span class="keyword">define</span> PROJECT_IMPORT __declspec(dllimport)</span></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__GNUC__) || defined(__clang__)</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> PROJECT_EXPORT __attribute__((visibility (<span class="string">&quot;default&quot;</span>)))</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> PROJECT_IMPORT __attribute__((visibility (<span class="string">&quot;default&quot;</span>)))</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> PROJECT_EXPORT</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> PROJECT_EXPORT</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> PROJECT_IMPORT</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> PROJECT_IMPORT</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(PROJECT_DEBUG) &amp;&amp; !defined(NDEBUG) &amp;&amp; defined(DEBUG) &amp;&amp; defined(_DEBUG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROJECT_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><h4 id="export-def"><a href="#export-def" class="headerlink" title="export.def"></a>export.def</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY locale_emulator_plus</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line">    DetourFinishHelperProcess @<span class="number">1</span> NONAME</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;base/macro.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> HANDLE WINAPI <span class="title">original_GetProcessHeap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">auto</span> <span class="keyword">volatile</span> p_GetProcessHeap =</span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="keyword">decltype</span>(&amp;::GetProcessHeap)&gt;(</span><br><span class="line">            ::<span class="built_in">GetProcAddress</span>(</span><br><span class="line">            ::<span class="built_in">GetModuleHandleW</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;GetProcessHeap&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p_GetProcessHeap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">p_GetProcessHeap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">SetLastError</span>(ERROR_CALL_NOT_IMPLEMENTED);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">EXTERN_C HANDLE WINAPI <span class="title">compile_time_hook_GetProcessHeap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> global_info.heap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_M_IX86)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(suppress:4483)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(selectany) <span class="type">void</span> <span class="type">const</span>* <span class="type">const</span> __identifier(<span class="string">&quot;_imp__GetProcessHeap@703&quot;</span>) = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> <span class="type">const</span>*&gt;(::compile_time_hook_GetProcessHeap);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/include:__imp__GetProcessHeap@703&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(selectany) <span class="type">void</span> <span class="type">const</span>* <span class="type">const</span> __imp_GetProcessHeap = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> <span class="type">const</span>*&gt;(::compile_time_hook_GetProcessHeap);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/include:__imp_GetProcessHeap&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_global_info_from_pipe</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> HANDLE pipe = ::<span class="built_in">CreateFileA</span>(GLOBAL_PIPENAME, GENERIC_READ, <span class="number">0</span>, <span class="literal">nullptr</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    DWORD timeout = <span class="number">1000</span>;</span><br><span class="line">    ::<span class="built_in">SetNamedPipeHandleState</span>(pipe, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;timeout);</span><br><span class="line"></span><br><span class="line">    DWORD lpNumberOfBytesRead;</span><br><span class="line">    BOOL result = ::<span class="built_in">ReadFile</span>(pipe, &amp;global_info, <span class="built_in">sizeof</span>(global_info), &amp;lpNumberOfBytesRead, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (!result || lpNumberOfBytesRead != <span class="built_in">sizeof</span>(global_info))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> error handle</span></span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CloseHandle</span>(pipe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PROJECT_DEBUG</span></span><br><span class="line">    <span class="keyword">while</span> (!::<span class="built_in">IsDebuggerPresent</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get_global_info_from_pipe();</span></span><br><span class="line">    global_info.code_page = ::<span class="built_in">GetACP</span>();</span><br><span class="line">    global_info.heap = ::<span class="built_in">original_GetProcessHeap</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="global-hpp"><a href="#global-hpp" class="headerlink" title="global.hpp"></a>global.hpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Encoding</span> : UINT</span><br><span class="line">&#123;</span><br><span class="line">    shift_jis = <span class="number">932</span>,</span><br><span class="line">    gbk = <span class="number">936</span>,</span><br><span class="line">    big5 = <span class="number">950</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">locale_info</span></span><br><span class="line">&#123;</span><br><span class="line">    UINT code_page;</span><br><span class="line">    <span class="type">void</span>* heap = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> GLOBAL_PIPENAME = <span class="string">R&quot;(\\.\pipe\Locale Emulator Plus)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> locale_info global_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="hook-cpp"><a href="#hook-cpp" class="headerlink" title="hook.cpp"></a>hook.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;table.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">attach</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; api : HOOK_LIST)</span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">DetourAttach</span>(</span><br><span class="line">            std::<span class="built_in">addressof</span>(<span class="built_in">reinterpret_cast</span>&lt;PVOID&amp;&gt;(api.src)),</span><br><span class="line">            <span class="built_in">reinterpret_cast</span>&lt;PVOID&gt;(api.dst));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">detach</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; api : HOOK_LIST)</span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">DetourDetach</span>(</span><br><span class="line">            std::<span class="built_in">addressof</span>(<span class="built_in">reinterpret_cast</span>&lt;PVOID&amp;&gt;(api.src)),</span><br><span class="line">            <span class="built_in">reinterpret_cast</span>&lt;PVOID&gt;(api.dst));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (::<span class="built_in">DetourIsHelperProcess</span>())</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fdwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">initialize</span>();</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">DetourRestoreAfterWith</span>();</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">DetourTransactionBegin</span>();</span><br><span class="line">        ::<span class="built_in">DetourUpdateThread</span>(::<span class="built_in">GetCurrentThread</span>());</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">attach</span>();</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">DetourTransactionCommit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fdwReason == DLL_PROCESS_DETACH)</span><br><span class="line">    &#123;</span><br><span class="line">        ::<span class="built_in">DetourTransactionBegin</span>();</span><br><span class="line">        ::<span class="built_in">DetourUpdateThread</span>(<span class="built_in">GetCurrentThread</span>());</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">DetourTransactionCommit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="implement-cpp"><a href="#implement-cpp" class="headerlink" title="implement.cpp"></a>implement.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;table.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base/macro.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_BEGIN</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> char_type&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">string</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span>(char_type* ptr = <span class="literal">nullptr</span>) :</span><br><span class="line">        <span class="built_in">ptr</span>(ptr)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">string</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr)</span><br><span class="line">        &#123;</span><br><span class="line">            std::<span class="built_in">free</span>(ptr);</span><br><span class="line">            ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="type">const</span> char_type*() <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    char_type* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">string&lt;<span class="type">wchar_t</span>&gt; <span class="title">char2wide</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* src, UINT code_page = CP_ACP)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> src_size = ::<span class="built_in">lstrlenA</span>(src);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst_size = ::<span class="built_in">MultiByteToWideChar</span>(code_page, <span class="number">0</span>, src, src_size, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst_capacity = (dst_size + <span class="number">1</span>) * <span class="built_in">sizeof</span>(<span class="type">wchar_t</span>);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">wchar_t</span>*&gt;(std::<span class="built_in">malloc</span>(dst_capacity));</span><br><span class="line"></span><br><span class="line">    [[maybe_unused]] <span class="keyword">auto</span> <span class="type">const</span> result = ::<span class="built_in">MultiByteToWideChar</span>(code_page, <span class="number">0</span>, src, src_size, dst, dst_size);</span><br><span class="line"></span><br><span class="line">    dst[dst_size] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;dst&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&lt;<span class="type">char</span>&gt; <span class="title">wide2char</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* src, UINT code_page = CP_ACP)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> src_size = ::<span class="built_in">lstrlenW</span>(src);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst_size = ::<span class="built_in">WideCharToMultiByte</span>(code_page, <span class="number">0</span>, src, src_size, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst_capacity = (dst_size + <span class="number">1</span>) * <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> dst = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(std::<span class="built_in">malloc</span>(dst_capacity));</span><br><span class="line"></span><br><span class="line">    [[maybe_unused]] <span class="keyword">auto</span> <span class="type">const</span> result = ::<span class="built_in">WideCharToMultiByte</span>(code_page, <span class="number">0</span>, src, src_size, dst, dst_size, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    dst[dst_size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;dst&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string&lt;<span class="type">wchar_t</span>&gt; <span class="title">shiftjis2gbk</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* <span class="type">const</span> src)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">char2wide</span>(<span class="built_in">wide2char</span>(src, (UINT)Encoding::gbk), (UINT)Encoding::shift_jis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_END</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_BEGIN</span>(hook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;hook_function_help fn_name&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hook_struct_help</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER(fn_name)                                \</span></span><br><span class="line"><span class="meta">    template <span class="string">&lt;&gt;</span>                                          \</span></span><br><span class="line"><span class="meta">    struct hook_struct_help<span class="string">&lt;hook_function_help::fn_name&gt;</span> \</span></span><br><span class="line"><span class="meta">    &#123;                                                    \</span></span><br><span class="line"><span class="meta">        using fn_type = decltype(&amp;::fn_name);            \</span></span><br><span class="line"><span class="meta">    &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;hook_function_help T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">get_original_function_ptr</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> c++23 std::to_underlying</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;hook_struct_help&lt;T&gt;::fn_type&gt;(HOOK_LIST[<span class="built_in">static_cast</span>&lt;usize&gt;(T)].src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">REGISTER</span>(MessageBoxA)</span><br><span class="line"><span class="built_in">REGISTER</span>(MessageBoxW)</span><br><span class="line"><span class="built_in">REGISTER</span>(SetWindowTextA)</span><br><span class="line"><span class="built_in">REGISTER</span>(SetWindowTextW)</span><br><span class="line"><span class="built_in">REGISTER</span>(RegisterClassExA)</span><br><span class="line"><span class="built_in">REGISTER</span>(RegisterClassExW)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">MessageBoxA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::MessageBoxW&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(hWnd, <span class="built_in">char2wide</span>(lpText, global_info.code_page), <span class="built_in">char2wide</span>(lpCaption, global_info.code_page), uType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">MessageBoxW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::MessageBoxW&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(hWnd, <span class="built_in">shiftjis2gbk</span>(lpText), <span class="built_in">shiftjis2gbk</span>(lpCaption), uType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">SetWindowTextA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::SetWindowTextW&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(hWnd, <span class="built_in">char2wide</span>(lpString));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">SetWindowTextW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::SetWindowTextW&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(hWnd, <span class="built_in">shiftjis2gbk</span>(lpString));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM WINAPI <span class="title">RegisterClassExA</span><span class="params">(_In_ CONST WNDCLASSEXA* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::RegisterClassExW&gt;();</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> class_name = <span class="built_in">char2wide</span>(src-&gt;lpszClassName);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> menu_name = <span class="built_in">char2wide</span>(src-&gt;lpszMenuName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> dst = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> WNDCLASSEXW*&gt;(src);</span><br><span class="line">    dst.lpszClassName = class_name.ptr;</span><br><span class="line">    dst.lpszMenuName = menu_name.ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(&amp;dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM WINAPI <span class="title">RegisterClassExW</span><span class="params">(_In_ CONST WNDCLASSEXW* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> original = <span class="built_in">get_original_function_ptr</span>&lt;hook_function_help::RegisterClassExW&gt;();</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> class_name = <span class="built_in">shiftjis2gbk</span>(src-&gt;lpszClassName);</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> menu_name = <span class="built_in">shiftjis2gbk</span>(src-&gt;lpszMenuName);</span><br><span class="line"></span><br><span class="line">    WNDCLASSEXW dst = *src;</span><br><span class="line">    dst.lpszClassName = class_name.ptr;</span><br><span class="line">    dst.lpszMenuName = menu_name.ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">original</span>(&amp;dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">GetModuleFileNameA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_(nSize, ((<span class="keyword">return</span> &lt; nSize) ? (<span class="keyword">return</span> +<span class="number">1</span>) : nSize)) LPSTR lpFilename,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD nSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span> filename[MAX_PATH];</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> ret = ::<span class="built_in">GetModuleFileNameW</span>(hModule, filename, nSize);</span><br><span class="line">    ::<span class="built_in">WideCharToMultiByte</span>(global_info.code_page, <span class="number">0</span>, filename, MAX_PATH, lpFilename, MAX_PATH, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_END</span>(hook)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base/base.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hook_function</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* src = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">void</span>* dst = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_BEGIN</span>(hook)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">MessageBoxA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT uType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">MessageBoxW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT uType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">SetWindowTextA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">SetWindowTextW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">RegisterClassExA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ CONST WNDCLASSEXA *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">RegisterClassExW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ CONST WNDCLASSEXW *)</span></span>;</span><br><span class="line"></span><br><span class="line">_Success_(<span class="keyword">return</span> != <span class="number">0</span>)</span><br><span class="line">_Ret_range_(<span class="number">1</span>,nSize)</span><br><span class="line"><span class="function">DWORD</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">GetModuleFileNameA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_(nSize,((<span class="keyword">return</span> &lt; nSize) ? (<span class="keyword">return</span> + <span class="number">1</span>) : nSize)) LPSTR lpFilename,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD nSize</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">MultiByteToWideChar</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT CodePage,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_NLS_string_(cbMultiByte) LPCCH lpMultiByteStr,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ <span class="type">int</span> cbMultiByte,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_to_opt_(cchWideChar,<span class="keyword">return</span>) LPWSTR lpWideCharStr,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ <span class="type">int</span> cchWideChar</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NAMESPACE_END</span>(hook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">hook_function_help</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBoxA = <span class="number">0</span>,</span><br><span class="line">    MessageBoxW,</span><br><span class="line">    SetWindowTextA,</span><br><span class="line">    SetWindowTextW,</span><br><span class="line">    RegisterClassExA,</span><br><span class="line">    RegisterClassExW,</span><br><span class="line">    GetModuleFileNameA,</span><br><span class="line">    MAX,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HOOK_LIST_HELP(fn_name) &#123;::fn_name, ::hook::fn_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> hook_function HOOK_LIST[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(MessageBoxA),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(MessageBoxW),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(SetWindowTextA),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(SetWindowTextW),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(RegisterClassExA),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(RegisterClassExW),</span><br><span class="line">    <span class="built_in">HOOK_LIST_HELP</span>(GetModuleFileNameA),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">static_cast</span>&lt;usize&gt;(hook_function_help::MAX) == std::<span class="built_in">size</span>(HOOK_LIST));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h3><h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;base/basic_type.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">consteval</span> <span class="keyword">auto</span> <span class="title">get_dll_name</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(<span class="keyword">sizeof</span>(<span class="type">void</span>*) == <span class="number">8</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;locale_emulator_plus64.dll&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">constexpr</span> (<span class="built_in">sizeof</span>(<span class="type">void</span>*) == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;locale_emulator_plus32.dll&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> DLL_NAME</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOCALE_EMULATOR_PLUS_DLL_NAME</span></span><br><span class="line">    <span class="built_in">get_dll_name</span>()</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    LOCALE_EMULATOR_PLUS_DLL_NAME</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fixed_buffer</span></span><br><span class="line">&#123;</span><br><span class="line">    usize size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">wchar_t</span> data[MAX_PATH];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> fixed_buffer <span class="title">string2wstring</span><span class="params">(<span class="type">const</span> std::string_view string)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    usize size = ::<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, string.<span class="built_in">data</span>(), string.<span class="built_in">size</span>(), <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fixed_buffer buffer&#123;size&#125;;</span><br><span class="line">    <span class="keyword">if</span> (::<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, string.<span class="built_in">data</span>(), string.<span class="built_in">size</span>(), buffer.data, size) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer.data[size] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TCHAR absolute_dll_path[MAX_PATH];</span><br><span class="line">    ::<span class="built_in">GetModuleFileNameA</span>(<span class="literal">nullptr</span>, absolute_dll_path, MAX_PATH);</span><br><span class="line">    ::<span class="built_in">PathRemoveFileSpecA</span>(absolute_dll_path);</span><br><span class="line">    ::<span class="built_in">PathAppendA</span>(absolute_dll_path, DLL_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> <span class="type">const</span> [size, program_path] = ::<span class="built_in">string2wstring</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    ::PROCESS_INFORMATION process_info&#123;&#125;;</span><br><span class="line">    ::STARTUPINFOW startup_info&#123;.cb = <span class="built_in">sizeof</span>(startup_info)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wchar_t cur_dir[MAX_PATH];</span></span><br><span class="line">    <span class="comment">// std::memcpy(cur_dir, program_path, size * sizeof(wchar_t) + 1);</span></span><br><span class="line">    <span class="comment">// ::PathRemoveFileSpecW(cur_dir);</span></span><br><span class="line"></span><br><span class="line">    BOOL result = ::<span class="built_in">DetourCreateProcessWithDllExW</span>(</span><br><span class="line">        program_path, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>,</span><br><span class="line">        <span class="literal">nullptr</span>, FALSE, CREATE_DEFAULT_ERROR_MODE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>,</span><br><span class="line">        &amp;startup_info, &amp;process_info, absolute_dll_path, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件类型的学习&quot;&gt;&lt;a href=&quot;#文件类型的学习&quot; class=&quot;headerlink&quot; title=&quot;文件类型的学习&quot;&gt;&lt;/a&gt;文件类型的学习&lt;/h2&gt;&lt;h3 id=&quot;Lua&quot;&gt;&lt;a href=&quot;#Lua&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Gal：JQV人類救済部</title>
    <link href="http://example.com/2024/08/02/JQV%E4%BA%BA%E9%A1%9E%E6%95%91%E6%B8%88%E9%83%A8/"/>
    <id>http://example.com/2024/08/02/JQV%E4%BA%BA%E9%A1%9E%E6%95%91%E6%B8%88%E9%83%A8/</id>
    <published>2024-08-01T18:47:35.000Z</published>
    <updated>2024-08-02T11:19:15.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h2><p>偶然，世界迎来了污染纪。怪病“OE”向全世界蔓延，由于这个病，人类向人类以外的动物、有机物乃至无机物变异，这个世界中，只留下了三名幸存者。在这已经确定了终结的世界中，少女究竟想要拯救什么呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一&quot;&gt;&lt;a href=&quot;#第一&quot; class=&quot;headerlink&quot; title=&quot;第一&quot;&gt;&lt;/a&gt;第一&lt;/h2&gt;&lt;p&gt;偶然，世界迎来了污染纪。怪病“OE”向全世界蔓延，由于这个病，人类向人类以外的动物、有机物乃至无机物变异，这个世界中，只留下了三名幸存者。在</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>Gal:青空的卡缪</title>
    <link href="http://example.com/2024/07/25/Gal%EF%BC%9A%E9%9D%92%E7%A9%BA%E7%9A%84%E5%8D%A1%E7%BC%AA/"/>
    <id>http://example.com/2024/07/25/Gal%EF%BC%9A%E9%9D%92%E7%A9%BA%E7%9A%84%E5%8D%A1%E7%BC%AA/</id>
    <published>2024-07-24T16:51:25.000Z</published>
    <updated>2024-07-31T11:06:28.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h3><p>黄昏的末班车、小镇居民的异化、座敷童子的往事、吉村先生看见的黑暗、磷家庭的分崩离析、月台旁的蓝白小屋、</p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>绣球的轨迹、同一存在的二重身。</p><h3 id="角色："><a href="#角色：" class="headerlink" title="角色："></a>角色：</h3><p>磷、萤、聪、大本大人</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="事件：-1"><a href="#事件：-1" class="headerlink" title="事件："></a>事件：</h3><p>从青空的梦中醒来、持续的永夜、未知母亲的存在、异样的售卖机、空无一人的教学楼、乡土资料馆的探险、回归正轨的世界、不需要磷的家、磷和聪的远足、萝莉车、Dj戈多的广播、缺位的父母、封锁的道路、拿扳手的工人、废弃的房屋、与狒狒的战斗、风车的集合</p><h3 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h3><p>《银河铁道之夜》、《卜多力的一生》、《夜莺之星》、《渡过雪原》、迷途之家、座敷童子、蓝门小屋、城市的边境、无味的桃子、《等待戈多》、《奚平太郎》、《局外人》、概念化的幸运、失去的面容、希望与欲望的复合体、聪的笔记、事象的地平线、头文件类库函数思考模式、无限的青空、静止的纸飞机、</p><blockquote><p>人生中的不合理，事物都是模糊的，无意义的。</p><p>习惯于绝望是比绝望更坏的东西</p></blockquote><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><h3 id="事件：-2"><a href="#事件：-2" class="headerlink" title="事件："></a>事件：</h3><p>锈迹斑斑的铁路、向内部挤压的世界、偶然出现的火车、收割机、扭曲事物的集合、</p><h3 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h3><p>既存的道德感时没有意义的、有意义的事物是不存在的、蓝色的蓝色天空拼图、《银河铁道之夜》、蜗牛的空壳、蜗牛的悲伤、白犬之猿、火灯的意味、失去门窗的小屋、无人的电车、量子力学的幽灵、</p><p>一切存在都是这样，毫无道理地出生，因软弱而延续，因偶然而死亡。</p><p>理解总是始于失去。</p><p>世界本生并未思考过任何事物，因为我们在它的严重如同蚂蚁般微小。</p><p>巨人只是站在那里，每次动起来的时候都会将面前所有的东西推开、踩碎。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;h3 id=&quot;事件：&quot;&gt;&lt;a href=&quot;#事件：&quot; class=&quot;headerlink&quot; title=&quot;事件：&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>碧蓝幻想relink：因子</title>
    <link href="http://example.com/2024/07/09/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3relink%EF%BC%9A%E5%9B%A0%E5%AD%90/"/>
    <id>http://example.com/2024/07/09/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3relink%EF%BC%9A%E5%9B%A0%E5%AD%90/</id>
    <published>2024-07-09T14:57:33.000Z</published>
    <updated>2024-07-31T10:54:36.622Z</updated>
    
    <content type="html"><![CDATA[<p>碧蓝幻想relink里面的因子可以大致分为基本因子和专属因子，而获取方式通常是万事屋抽奖和遗物鉴定，万事屋可以出角色的专属因子，遗物鉴定会有特殊因子，像刀上舞、属性克制转换、追击等。</p><blockquote><p>碧蓝幻想存在伤害上限，能增加这个上限的因子目前有，伤害上限和刀上舞。</p></blockquote><ul><li>因子的副词条不会出现和主词条一样的。</li></ul><p>毕业的因子的配置是：</p><p>四个伤害上限V+；</p><p>一个暴击率V+（理论上可以实现百爆）；</p><p>属性克制转换；</p><p>三个追击；</p><p>角色专属因子；</p><ul><li>因子等级</li></ul><p>每个因子的等级上限不同，五级因子+觉醒武器天赋因子（等级+1），单个因子最多提供16的因子技能等级。</p><ul><li>因子推荐</li></ul><p>热血：在满血状态下能有70%左右的攻击力加成。</p><p>暴君：可以大幅度增加攻击力，并且能够压制血量，触发原巴武器的浩劫天赋，连击加成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;碧蓝幻想relink里面的因子可以大致分为基本因子和专属因子，而获取方式通常是万事屋抽奖和遗物鉴定，万事屋可以出角色的专属因子，遗物鉴定会有特殊因子，像刀上舞、属性克制转换、追击等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;碧蓝幻想存在伤害上限，能增加这个上限的因子目前有，</summary>
      
    
    
    
    
    <category term="碧蓝幻想relink" scheme="http://example.com/tags/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3relink/"/>
    
  </entry>
  
  <entry>
    <title>Gal:等間隔の黒い透明</title>
    <link href="http://example.com/2024/06/30/Gal%EF%BC%9A%E7%AD%89%E9%96%93%E9%9A%94%E3%81%AE%E9%BB%92%E3%81%84%E9%80%8F%E6%98%8E/"/>
    <id>http://example.com/2024/06/30/Gal%EF%BC%9A%E7%AD%89%E9%96%93%E9%9A%94%E3%81%AE%E9%BB%92%E3%81%84%E9%80%8F%E6%98%8E/</id>
    <published>2024-06-29T20:33:59.000Z</published>
    <updated>2024-07-31T10:56:58.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Episode1"><a href="#Episode1" class="headerlink" title="Episode1"></a>Episode1</h2><p>讲述了男主和女主的关系，女主是一位娇生惯养的公主一般的角色，男主则死承担着一位情绪价值的提供者的角度，女主有着与其年龄不相符的外貌，男女主保留着不正当的男女关系。</p><h2 id="Episode2"><a href="#Episode2" class="headerlink" title="Episode2"></a>Episode2</h2><p>男主的工作是网页设计，他会讲网上的所见所闻（如隧道的挖掘）之类的新闻告诉女主。男主与一个骆驼男一起工作，似乎还很害怕他。</p><h2 id="Episode3"><a href="#Episode3" class="headerlink" title="Episode3"></a>Episode3</h2><p>与骆驼的谈话，从对骆驼个人的情感倾向到对这个国家乃至星球的喜好。</p><p>我们从出生开始，就一直在能指链条上延宕。这个过程在这个链条上一直都存在。</p><p><img src="/2024/06/30/Gal%EF%BC%9A%E7%AD%89%E9%96%93%E9%9A%94%E3%81%AE%E9%BB%92%E3%81%84%E9%80%8F%E6%98%8E/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240630045837684.png" alt="image-20240630045837684"></p><h2 id="Episode4"><a href="#Episode4" class="headerlink" title="Episode4"></a>Episode4</h2><p>男主在经历一场电波的旅途，这段对电车上糟糕环境的描写可圈可点，以及说在这条路上骑自行车追逐的描绘。</p><h2 id="Episode5"><a href="#Episode5" class="headerlink" title="Episode5"></a>Episode5</h2><p><img src="/2024/06/30/Gal%EF%BC%9A%E7%AD%89%E9%96%93%E9%9A%94%E3%81%AE%E9%BB%92%E3%81%84%E9%80%8F%E6%98%8E/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240630050539263.png" alt="image-20240630050539263"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Episode1&quot;&gt;&lt;a href=&quot;#Episode1&quot; class=&quot;headerlink&quot; title=&quot;Episode1&quot;&gt;&lt;/a&gt;Episode1&lt;/h2&gt;&lt;p&gt;讲述了男主和女主的关系，女主是一位娇生惯养的公主一般的角色，男主则死承担着一位情绪价值的提供</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>Galgame：24年gal日记</title>
    <link href="http://example.com/2024/06/30/Galgame%EF%BC%9A24%E5%B9%B4gal%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2024/06/30/Galgame%EF%BC%9A24%E5%B9%B4gal%E6%97%A5%E8%AE%B0/</id>
    <published>2024-06-29T18:57:17.000Z</published>
    <updated>2024-07-31T10:49:37.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新打"><a href="#新打" class="headerlink" title="新打"></a>新打</h2><ol><li><p><a href="https://bangumi.tv/subject/43372">Dies irae ～Amantes amentes～</a></p></li><li><p><a href="https://bangumi.tv/subject/324325">私は女優になりたいの</a></p></li></ol><h2 id="在打"><a href="#在打" class="headerlink" title="在打"></a>在打</h2><ol><li><p><a href="https://bangumi.tv/subject/40445">J.Q.V 人類救済部～With love from isotope～</a></p></li><li><p><a href="https://bangumi.tv/subject/15920">水夏<del>SUIKA</del></a></p></li><li><p><a href="https://bangumi.tv/subject/137427">等間隔の黒い透明</a></p></li><li></li></ol><h2 id="复打"><a href="#复打" class="headerlink" title="复打"></a>复打</h2><ol><li><p><a href="https://bangumi.tv/subject/280440">死月妖花～四月八日～</a></p></li><li><p><a href="https://bangumi.tv/subject/7978">最果てのイマ</a></p></li><li><p><a href="https://bangumi.tv/subject/137992">西历2236年</a></p></li></ol><p>目を閉じて、心の声に耳を澄ませてみてください。<br>ただ、騒がしく心のなかでたくさんの声がしているのが分かれば十分です。<br>今行ったこれは実は一種の「瞑想」なんです。<br>どうですか、このときあなたは「今」を感じることができているはずです。<br>誰も「過去に聞いた歌」を口ずさんでいませんし「未来の予定」についても話していません。<br>あなたの耳に入ってくるのは外の音と、心臓の音と、鼻息の音だけです。<br>全て「いま」ここにある音です。<br>怠け者の３分間瞑想法<br>シオン「私の声は」<br>シオン「届かない」<br>届くべきではない。<br>心象素粒子<br>偉大なるドクター達へ<br>ユーレイ現象<br>死んだはずの人があたかも底にいるように感じる現象<br>ユーレイ現象　テレパシーの発現<br>梅雨<br>情報のフォーマット<br>HTとは「Holding Task」または「Holding&amp;Tasking」のことです。<br>こことの素粒子が私達の目に見えない道を行き来する現象。<br>テレパシーの原理<br>道ー＞道路<br>HTこー＞車<br>ハル　シオン、君は最初から、夢のような嘘だったのかも知れない<br>君にだけ何通かのメールは届いてないはずです<br>整个世界宛若一场幻梦，沉沦其中的人们，用日间残念缝补出了一个个残缺的故事。瑕瑜互现的世界化为完美的宝石，杂质如沉水的浮沫，不见踪影。<br>破碎的文字编织如网，笼络了过往的时流，抚摸着浓缩现时的结晶，连缀着称为未来的蜃景。<br>夢の中では夢のおかしさに気付けないから、誰かに言われるまではなにもおかしいと思えなかった。<br>私たちの現実は誰かの心の中の世界だったってこと。<br>称为梦境的是画笔，它大笔如椽，在纯白的画板上烙印下了世界的痕迹，在世界的边境。浓墨重彩的梦境与千篇一律的现实交织，模糊了虚拟与真实。<br>被诱骗参加了一场与机器人角力的音乐会，台下的人并不是因为我拥有天赋才来到这里，而是因为机器人能够弹奏得比我更好。<br>世间万物，宛若大树，岿然不动，anatagaushinattamonohaanatajishindesu<br>C.S.「君は真面目で、まっすくで、誠実で……だけど臆病な人です」<br>C.S.「だから、約東を破ってしまうことがとても怖いんです」<br>C.S.「ル—ルを破ってしまうことを恐れるんです」<br>C.S.「自分のなりたいようになんてなれないですよ」<br>C.S.「心理宇宙に来てまでみんな苦悩しているのが良い証拠じやないですか」</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新打&quot;&gt;&lt;a href=&quot;#新打&quot; class=&quot;headerlink&quot; title=&quot;新打&quot;&gt;&lt;/a&gt;新打&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bangumi.tv/subject/43372&quot;&gt;Dies irae ～Amantes</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>Gal:西历2236</title>
    <link href="http://example.com/2024/06/11/%E8%A5%BF%E5%8E%862236/"/>
    <id>http://example.com/2024/06/11/%E8%A5%BF%E5%8E%862236/</id>
    <published>2024-06-10T17:05:01.000Z</published>
    <updated>2024-07-31T11:05:19.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="西暦-2236-年-用語集"><a href="#西暦-2236-年-用語集" class="headerlink" title="西暦 2236 年 用語集"></a>西暦 2236 年 用語集</h2><h3 id="A"><a href="#A" class="headerlink" title="[ A ]"></a>[ A ]</h3><p><strong>A.I</strong>.……Artificial Intelligence の略。→人工知能の項を参照。</p><blockquote><p><strong>A.I.:</strong> Abbreviation for Artificial Intelligence. </p></blockquote><h3 id="C"><a href="#C" class="headerlink" title="[ C ]"></a>[ C ]</h3><p><strong>C.S</strong>.……21 世紀の科学者。世界初の HT の科学的観測に立ち会った科学者の一人。HT 基礎構造理論を提唱した。晩年に失踪を遂げている。</p><blockquote><p><strong>C.S.:</strong> A 21st Century scientist. One of the scientists present when HT was first experimentally proven to exist. Advocated the HT Infrastructure Theory. Went missing in their final years</p></blockquote><p><strong>CLOSE</strong>……病名。Consciously Locks One’s Selective Elements syndrome の略。後天性のゲート障害でゲートを開けなくなることでテレパシー通信に支障をきたす症候群のこと。精神病のひとつだとされている。治療法は見つかっていない。</p><blockquote><p><strong>CLOSE:</strong> Condition name, standing for “Consciously Locks One’s Selective Elements Syndrome.” Refers to a syndrome which is an acquired Gate disorder that locks off one’s ability to access one’s Gate and hinders their ability to establish telepathic communication. Said to be a mental disorder with no known cures as of this date.</p></blockquote><h3 id="E"><a href="#E" class="headerlink" title="[ E ]"></a>[ E ]</h3><p><strong>EAJOS[elementary axiom jump of Shikine]</strong> ……21 世紀に発達した「間違い学問」における飛躍公理。イージョス。人工知能工学の世界では今なお新しい EAJOS が登録され続けている。</p><blockquote><p><strong>EAJOS:</strong> Abbreviation for “Elementary Axiom Jump of Studies.” Stands for axioms which make a “jump” or breakthrough in the “Improper Studies” developed in the 21st Century. EAJOS for short. In the artificial intelligence world, there are still new EAJOS being registered to this date</p></blockquote><p><strong>EMP[electromagnetic pulse]</strong> ……電磁パルス。強力な電磁衝撃波は電子回路などに損傷を与えることがある。核兵器の使用でも EMP が発生するので軍事用の電子装置には EMP 対策が施されているものも多い。</p><blockquote><p><strong>EMP:</strong> Short for electromagnetic pulse. An occurrence where powerful electromagnetic waves cause damage to electric circuits. The use of nuclear weapons would also create an EMP, so there are many pieces of military-use electronic equipment which have counter-EMP measures built into them.</p></blockquote><h3 id="H"><a href="#H" class="headerlink" title="[ H ]"></a>[ H ]</h3><p><strong>HT</strong>……Holding Task または Holding &amp; Taking の略。HT 現象。高次元空間で生ずる伝播現象、またはそれに関する理論。2033 年に C.S.によって提唱された HT 基礎構造理論によると、全ての物体には情報が通る道が存在し、その通路を介することで情報のやり取りができるという。ここで言う「情報」にあたるのが「HT 子」と呼ばれる粒子の波である。HT はプリ方向次元空間と相容れない、部分クラウド空間内での粒子の運動であるため HT 子を始め HT に関わる現象が物理学的に観測不可能(物理的に不可視)である。また、HT 基礎構造理論の記述には梅雨幾何学が用いられる。梅雨幾何学では空間を記述するために、我々に馴染みのあるユークリッド幾何学で定義される「次元」の概念を拡張している。HT 基礎構造理論では梅雨幾何学を用いることで、特殊な場合を除いて HT 現象が物理的に不可視であることを証明している。 また、これをきっかけにして 18 次元宇宙論などの多次元宇宙論が盛んに提唱された。一般にテレパシーと呼ばれるコミュニケーション方式は HT 子がヒトのゲートからゲートに伝わり処理されることで情報(言語、五感、思念など)を伝えることができるとしている。 ユーレイ現象とは深い関わりがあり、歴史的にはユーレイ現象の研究実験中に偶然開発されたのが HT である。 研究によると、もともと人類の脳には HT を司る感覚器官が存在していたがそれは近年発見されるまで退化していたものと考えられている。動物など、脳または神経中枢を有している生き物ともテレパシー通信が可能であることからテレパシーが言語をもたない生き物のコミュニケーション手段になっていることがわかった。これらのことから、人類を含むほとんどの生き物は古来テレパシーによってコミュニケーションをとっていたが人類のみ発達した言語に取って代わられ、やがてテレパシーによるコミュニケーションをしなくなったというのが通説になっている。HT が科学的に解釈される以前の超常現象(ユーレイ現象、第六感、シンクロニシティなど)の多くは HT 基礎構造理論によって合理的に説明できる。HT 開発……現代のヒトの脳の HT を司る器官は生まれながらには機能していないため、HT開発が必要になる。幼児に対し、親などがテレパシーによって外部からゲートを刺激することによって実現する。</p><blockquote><p><strong>HT:</strong> Short for Holding Task or Holding &amp; Taking. HT Phenomenon. A propagation phenomenon originating from higher-dimensional space, or the theory attached to it. In 2033, C.S. advocated the HT Infrastructure Theory. This theory states that there exists a path for data to pass through within all objects, and by using that path as an intermediary, we can hold and take in said data. The “data” in this case being the waves of particles referred to as “HT Particles.” Due to the movement of particles within a partial cloud space that is incompatible with a pre-directional dimension space, all HT-linked phenomenon, including HT Particles, are impossible to observe on a physics-level (as they are physically invisible.) In addition, Superposition Geometry has been utilized to describe the HT Infrastructure Theory. In Superposition Geometry, in order to describe a space, we expand upon the concept of a “dimension” as it is defined to us in the terms of the more familiar Euclidean Geometry. The HT Infrastructure Theory, by utilizing Euclidean Geometry, and excluding any special cases, proves that HT phenomena are physically invisible. In addition, springboarding off of this, multidimensional space theories such as the 18th Dimensional Space Theory have been actively advocated. The communication method known more commonly as Telepathy can convey data (I.E. language, any of the five senses, thoughts) by having HT Particles going from one human’s Gate to another and being processed as such. This is very much linked to ghostly phenomena, and, historically speaking, HT was developed by chance while conducting an experiment into the research of ghostly phenomena. Based on research, it is believed that the sensory organs to govern HT have always existed in the minds of the human race, but that they had remained degenerate until HT was discovered in recent years. Telepathy has become a means of communication for life-forms devoid of language, all due to the fact that telepathic communication is possible with animals, or basically life-forms that possess a brain or nerve center. Stemming from this, the commonly accepted theory is that almost all lifeforms, including humans, have communicated through telepathy since ancient times. Humans were the only ones to develop language and replace telepathy, eventually leading to the downfall of telepathic communication as a whole. A majority of paranormal phenomena that occurred before HT was scientifically explained can be logically explained via the HT Infrastructure Theory</p></blockquote><h3 id="N"><a href="#N" class="headerlink" title="[ N ]"></a>[ N ]</h3><p><strong>NSL 方式[No Signal of Locator method]</strong> ……無信号位置特定方式。GPS 通信の情報符号化方式の一つ。HT と水路に流れる情報を使って水路上にある目的地の位置を大まかに特定する。主に未開拓の水脈を発見するのに役立っている。HT を利用するので人間が水路からコードを読み取る(感じ取る)ことになるが、とても複雑で膨大な符号表を覚えていなければならない。また、HT を読み取る力や、未フォーマット情報を感じ取るセンスによって精度が大きく変わる。無信号というのはもともと、フォーマットされた位置情報の流れていない水路か位置情報を見つける方式だから。</p><blockquote><p><strong>NSL Method:</strong> Short for No Signal Locator Method. A method of coding GPS transmissions into usable data. By using the data coursing through canals and HT, it’s possible to get a general location of a specific point placed on the canalways. It mainly serves useful when trying to detect underdeveloped waterways. Since it utilizes HT, human beings will end up reading (sensing) the data from the canals, but they must remember a rather complicated and vast code sheet to do anything with it. In addition, the accuracy of this method will vary greatly based on one’s power to read HT and their sense for unformatted data. The reason why it is referred to as “no signal” is because the method finds location data and&#x2F;or canals that don’t have any formatted location data in them.</p></blockquote><h3 id="P"><a href="#P" class="headerlink" title="[ P ]"></a>[ P ]</h3><p>**panta rhei [パンタ・レイ]**……「万物は流転している」の意。古代ギリシャの哲学者ヘラクレイトスの言葉。</p><blockquote><p><strong>Panta Rhei:</strong> Greek for “all things are in flux,” a quote from the Ancient Greek philosopher, Heraclitus.</p></blockquote><h3 id="あ"><a href="#あ" class="headerlink" title="[ あ ]"></a>[ あ ]</h3><p>**アーカイヴ[Archive]**……アカシック・フォーンの原本が保管されている都市。しかし実際には地球上にそのような都市は見つかっておらず、架空の都市だと考えられている。アカシック・フォーンは実際にその文面が現代まで伝えられていることから存在を否定されることはないが、その原本の存在については懐疑的な考古学者も多い。アーカイヴに訪れたという人の証言も多数あるが噂の範疇でとどまっている。アーカイヴでは非常に膨大な数のアカシック・フォーンが大きな書棚に整頓されていると言われている。アカシック・フォーン[Akashic Phones]……パラダイムロスト以前の人類の学術的知識や文化、歴史と以後の地球の科学や歴史について記してある書籍のこと。どのくらいの期間書き連ねられたかは不明だが、その数は膨大で都市一つ分を埋め尽くす程だと言われていることから、かなり長い年月にわたって書き続けられたものだと考えられている。パラダイムロスト以前の地球の記録として残っているものはこのアカシック・フォーンしかない。世の中に出回っているものはアカシック・フォーンの原本を複写したものであり、現在ではそれをさらにデータ化したものが広く流通している。アカシック・フォーンの原本はアーカイヴという都市で保管されているという説がある。原本の表紙の色は赤色で統一されていると言わ</p><p>れている。</p><p>**アカクラ[赤倉]**……地名。ミョウコウにある地域で大きなスキー場がある。</p><blockquote><p><strong>Akakura:</strong> Place name. A certain area of Myoko and home to a rather large ski slope.</p></blockquote><p>**アルベルト・アインシュタイン[Albert Einstein]**……20 世紀の理論物理学者。光量子説、ブラウン運動、特殊相対性理論、一般相対性理論など物理学に非常に大きな影響を残した。意識的閉門症……→CLOSE の項を参照。</p><blockquote><p><strong>Albert Einstein:</strong> 20th-century theoretical physicist. Known for his huge impact on physics by introducing concepts such as Quantum Theory, Brownian Motion, and The Theory of Relativity.</p></blockquote><p><strong>違法ロボット[illegal robot]</strong> ……違法なロボット。特に、人間とそっくりな有機ヒューマノイドが出てきてからはロボットの表記義務を無視したロボットのことをいうようになった。</p><blockquote><p><strong>Illegal Robot(s):</strong> Refers to illegally-built robots that disregard the labelling requirements put in place since the rise of organic humanoids that look similar to human beings.</p></blockquote><p><strong>インターネット[Internet]</strong> ……個々のコンピュータネットワークを相互に結び拡張して世界的規模にまで広がったネットワークの集合体。</p><p><strong>ウィトゲンシュタイン[Ludwig Josef Johann Wittgenstein]</strong> ……オーストリア生まれの哲学者。『語りえぬものについては、沈黙しなければならない』という言葉で有名。裏情報……世間一般には流れない情報。信憑性は弱い。</p><p>**エーテル[aether, ether, luminiferous aether]**……主に 19 世紀までの物理学で、光が伝播するために必要だと思われていた媒質のこと。20 世紀には特殊相対性理論などの理論がエーテルの概念を用いずに確立されており、エーテルに関する物理学理論は今ではほとんど論じられていない。オイラーの公式[Euler’s formula] ……数学者レオンハルト・オイラーによって導かれた指数関数と三角関数の間に成り立つ定理のこと。</p><p>$e^{i\theta}&#x3D;\cos \theta+i\sin\theta$</p><p>とくに$\theta&#x3D;\pi$のときの</p><p>$e^{i\theta}+1&#x3D;0$</p><p>はオイラーの等式と呼ばれる。この式は対数を象徴する自然対数の底 e と三角関数を象徴するπ、虚数単位の i、乗法の単位元である 1、加法の単位元である 0 が一堂に会しており、様々な数学の分野の橋渡しをする。これがもっとも美しい公式と呼ばれるゆえんでもある。</p><blockquote><p>A theorem that establishes the relationship between exponential and trigonometric functions derived by mathematician Leonhard Euler.</p><p>$e^{i\theta}&#x3D;\cos \theta+i\sin\theta$</p><p>Special case θ&#x3D;π gives </p><p>$e^{i\theta}+1&#x3D;0$</p><p>The above is what is referred to as Euler’s identity. The special case puts together the base of natural logarithm ?, trigonometic constant π, imaginary unit i, multiplication unit element 1, and addition unit element 0, helping bridge several different fields of mathematics. That is also the reason why it is referred to as “The Most Beautiful Equation.”</p></blockquote><p><strong>オルタナティブ元素[Alternative elements]</strong> ……21 世紀に発見されたもう一つの化学元素。触媒の研究時に発見されたという逸話がある。プリ方向次元の虚×虚×虚の領域に存在していて特殊な環境以外でその単体を観測することはできない。普通の化学元素との化合物として普段は使われている。オルタナティブ高分子化合物はスマートツールスなどの柔らかいデバイスを形作っている。音声会話……テレパシー会話に対して、空気を媒体とした音を使って会話すること。</p><blockquote><p><strong>Alternative Elements:</strong> Alternative chemical elements discovered in the 21st Century. Anecdotes state that they were discovered when researching some catalyst. They exist in a times-three imaginary Pre-Directional Dimension, and cannot be observed outside of some </p><p>special circumstances. They are normally used in compounds with normal chemical elements. Alternative High Molecular Compounds help form the squishy devices known as Smart Tools and things like them</p></blockquote><h3 id="か"><a href="#か" class="headerlink" title="[ か ]"></a>[ か ]</h3><p><strong>カード目録</strong>……図書館において、蔵書の名前や内容などの情報を書き記したカードが集められている場所。探している図書を見つけるのに便利。</p><blockquote><p><strong>Card Catalogue:</strong> A place in libraries where cards that have information pertaining to the subjects and names of the books within it can be found.</p></blockquote><p>**鏡の国[The alternative world]**……詳細は不明拡張言語パック……スマートツールス等のコンピュータ端末において、初期出荷状態でプリインストールされている言語ライブラリに加えて他の地域で使われている言語ライブラリを追加インストールするためのパッケージプログラム。</p><blockquote><p><strong>The Alternative World (Looking-Glass World):</strong> The details of this world are unknown. </p></blockquote><p><strong>かけ算[multiplication]</strong> ……算術における乗法のこと。a を b 回足し合わせるという操作を a×b のように表現する。</p><blockquote><p><strong>Multiplication:</strong> Basic arithmetical multiplication. An operation of adding <em>a</em> for <em>b</em> amount of times would be expressed as <em>a x b</em>, for example</p></blockquote><p>**記憶媒体[Storage]**……HT の情報媒体のうち記憶能力に特化しているもののこと。HT 子の伝達速度が非常に遅いため情報を劣化させないまま暫く保存することができる。→モノリス</p><p>**ゲート[Gate]**……ヒトの脳にあると考えられているテレパシーに関する器官または機能、メカニズムのこと。ヒトがテレパシー通信をする際、ゲートが互いに開いていなければならない。テレパシーという現象がテレパシーによる再帰的な観測のみしかなされないという性質をもつため、ゲートがどのように働くのか詳しく解明されていないが、脳波や血流の調査から脳のどの辺りに所在するのかという目安はついている。動物など脳または神経中枢を有している生き物にもゲートがあると考えられているが、その真偽を確かめるのは原理的に不可能である。</p><blockquote><p><strong>Gate:</strong> The organ, function, and&#x2F;or mechanism related to telepathy perceived to be in the human brain. When people make a telepathic transmission, both of their Gates must be open. Due to the phenomenon known as telepathy having a nature which only allows it to be recursively observed via telepathy itself, and while there is no clear explanation on how Gates function, a rough estimate from observation of brainwaves and blood flow is that it lies somewhere in a part of the brain. It is assumed that life-forms with brains and&#x2F;or nerve centers such as animals also possess Gates, but it is theoretically impossible to prove that true or not. </p></blockquote><p><strong>月光</strong>……ベートーヴェンのピアノソナタ「月光」のこと。中でも第三楽章は難曲であるとされる。</p><blockquote><p><strong>Moonlight Sonata:</strong> Beethoven’s famous piano sonata, the third movement of which is said to be especially difficult to play correctly</p></blockquote><p><strong>五感</strong>……視覚、聴覚、嗅覚、味覚、触覚の五つの感覚。HT を含めた六感と区別されて使われることが多い。</p><p><strong>国際水路法</strong>……世界中に張り巡らされた水路を正しく運用するための法律群のこと。心の素粒子……HT 子のこと。人の心は HT 子の運動によって記述できる。</p><p>**個人向けスマートツールス用 A.I.秘書[Personal A.I. Secretary System]**……西暦 2230 年頃に普及し始めたスマートツールス用のシステム。第７世代の A.I.を基盤に作られていて、暮らしの中で人を支え、よきパートナーとなることを目的としている。ほとんど人間と同じ振る舞いをするため、情操教育にもよいとされていて、「最後まで味方でいてくれるパートナー」「途方に暮れたときに導いてくれるパートナー」などとして幼少期の精神発達を手助けする可能性があるという研究報告も出ている。略して PASS。</p><blockquote><p><strong>Personal A.I. Secretary System (PASS):</strong> A system for Smart Tools that started to come in style around 2230 A.D. Built by using 7th Generation A.I. as the base, its purpose is to support people in their daily lives and provide a faithful partner to them. Since it mimics human behavior well enough, it is said to be good for emotional development as well, with reports coming out that say that it has the possibility to help early childhood mental development by stating it as “a partner by your side till the very end” and “a partner that will show you the way when you’re lost.”</p></blockquote><h3 id="さ"><a href="#さ" class="headerlink" title="[ さ ]"></a><strong>[ さ ]</strong></h3><p><strong>さけないチーズ</strong>……有名な某商品以外のチーズのこと。</p><p>**酸化銅(Ⅱ) [copper(II) oxide]**……化学式 CuO で表される銅の酸化物。黒色。</p><blockquote><p><strong>Copper (II) Oxide:</strong> A copper oxide denoted by the chemical formula CuO. Black in color</p></blockquote><p><strong>次元置換説[Dimension Permutation Hypothesis]</strong> ……宇宙が多次元空間でその一部分が影として現実に現れるものだとしたときに影の落とし方(次元の置換)によって様々なアスペクトの異なる宇宙が同時に存在するという説。</p><blockquote><p><strong>Dimension Permutation Hypothesis:</strong> Also known as the Permutation of Axis Hypothesis. A hypothesis based on the universe being a multi-dimensional space, and the way you get rid of a shadow (dimensional substitution) once a shadow forms from part of said universe. This theory supports universes of differing aspects coexisting at the same time</p></blockquote><p>**シャルル・ペロー[Charles Perrault]**……「長靴をはいた猫」の著者。</p><blockquote><p><strong>Charles Perrault:</strong> Author of the story “Puss in Boots.” </p></blockquote><p><strong>浄水器</strong>……水路の水を常に清潔に保つために施設事に設置される機械。</p><p><strong>情報爆発[Information explosion]</strong> ……急速に増加する出版物やデータ、またその影響を指した言葉。特に水路で情報爆発が起こると中が情報で飽和してしまい、発信元の分からない情報で溢れるので通常の運用は不可能になる。</p><blockquote><p><strong>Information Overload:</strong> A word that refers to a sudden and quick increase in publications and data, and&#x2F;or the effects of such. To be specific, once an information overload occurs in the canals, the water becomes saturated with information, and overflows with information without a clear origin, making regular usage impossible</p></blockquote><p><strong>ショック療法[shock therapy]</strong> ……患者に対してある種の衝撃や身体的ストレスを一時的に与えることによって症状の改善をはかる方法。シリ・シオン[Siri Shion ]……アカシック・フォーンの著者として書籍にその名前が記されている。女性だと言い伝えられていて、その功績から「女神」「人類の英知の象徴」などと称えられることこともよくあるが、実在の人物であるかどうかは不明瞭である。</p><blockquote><p><strong>Shock Therapy:</strong> A method of therapy in which you temporarily expose a patient to a certain kind of “shock” or physical stress to improve their condition.</p></blockquote><p><strong>シリ・シオンの伝説</strong>……アカシック・フォーンの著者、シリ・シオンがパラダイムロスト以前の人類の学術的知識や文化、歴史をパラダイムロスト以後に伝えたという伝説のこと。パラダイムロストによって人類のもつ遺産は全て失われた。全てがゼロになった地球で彼女がパラダイムロスト以前の地球の諸々と以後の自然科学について記したものがアカシック・フォーンであるとされている。</p><blockquote></blockquote><p><strong>人工知能</strong>……A.I. 23 世紀ではヒトとほぼ同等の思考能力をもつ A.I. 、つまり強い A.I.が実現されている。その基礎理論は 21 世紀に発展した「間違い学問」によって構築されていて A.I.の性格は選択されている公理の種類で決まる。人間と対話ができるという特徴から多岐にわたる分野で利用されている。近年では有機ロボット工学の発展も相まって HT や生殖機能を除いたヒトの特徴をほぼ全て再現したヒューマノイドが登場したが、生命倫理団体や労働組合の痛烈な批判を受けて全ての人工知能やロボットは人間とは区別され、人権を与えず、それらが人工知能やロボットであることが明らかに分かるように表示することを義務づける法律が制定された。現在では個人向けスマートツールス用 A.I.秘書が広く普及しており、人間のよきパートナーとして生活に加わっている。</p><blockquote><p><strong>Artificial Intelligence (A.I.):</strong> In the 23rd century, advanced forms of A.I. that possess cognitive thought nearly on par with humans were created. The basic theory was constructed from the “Improper Studies” developed during the 21st Century, and their personalities are determined </p><p>by the variety of axiom selected for them. They are used in numerous different fields due to their ability to effectively communicate with humans. In recent years, along with the development of organic robotic engineering, humanoids that replicate nearly all human characteristics barring HT and reproductive capabilities have been ushered in, but after much scathing criticism from bioethics organizations and labor unions, laws have been established that obligate all artificial intelligence and robots to be distinct from humans, not given human rights, and presented in a way that makes them clearly recognizable as robots or A.I. Recently, Personal A.I. Secretary Systems have become very popular and have been integrated into people’s lives as reliable partners.</p></blockquote><p>**水路[Canal]**……HT のうち特にテレパシー運用を快適かつグローバルにするために世界中に設けられた情報媒体のこと。テレパシーのネットワーク。水路に手を浸すことで世界中の人々とテレパシー通信をすることができる。22 世紀に世界中に整備された。水路の形状は地域によって異なるが流れている水は WHO と WHTO の定めた世界基準に則って世界中で統一されている。</p><blockquote><p><strong>Canal:</strong> An information medium installed all over the world for the purpose for easy and global usage of HT—most importantly, telepathy. A veritable telepathic network. Dipping your hand in the waters of the canal gives you access to telepathic communication with people all over the world. By the 22th Century, service has hit every corner of the globe. The shape of canals differs from region to region, but the water that flows within is uniform across the world, conforming to the standards put in place by the WHO and WHTO.</p></blockquote><p>**スマートツールス[Smart Tools]**……23 世紀で一般的に普及している個人向けコンピュータ端末。狭義にはオルタナティブ高分子ゲルで構成され、トポロジカルに形を変えることが出来る端末のことを言う。近年注目されている「柔らかいデバイス」の代表格であり、分子構造の定義ファイルがあれば様々な形に固定できる。外膜を完全に閉じてしまう設計のため内蔵電池の交換が出来ず、その寿命は 5～6 年であるとされる。</p><blockquote><p><strong>Smart Tools:</strong> A type of personal computer terminal that has come into popularity in the 23rd century. Strictly speaking, a Smart Tool is a terminal capable of topological shape-shifting, composed from Alternative High Molecular gel. Extremely popular in recent years, they are referred to as being “soft devices”, and can turn into several different forms so long as the needed molecular construction definition files are present. Due to the outer membranes being completely sealed off, the inner battery is non-exchangeable, giving them a life-span of about 5-6 years.</p></blockquote><p><strong>生殖[reproduction]</strong> ……うみふやすこと。生物の個体が自分と同じ種の新しい個体を作り出すこと。</p><p>**セキガワ[関川]**……地名。ミョウコウにある地域で、大きな川が流れている。善光寺……長野市にある寺。古くから宗派の別を超えて広く信仰を集めている。</p><p><strong>ソフトモヒカン[soft Mohican]</strong> ……玉ねぎのような髪型。</p><h3 id="た"><a href="#た" class="headerlink" title="[ た ]"></a><strong>[ た ]</strong></h3><p><strong>太陽嵐[solar storm]</strong> ……非常に大規模な太陽フレアが発生した際に太陽風が爆発的に放射され、それが地球や周りの人工衛星などに被害をもたらす現象。強力な電磁波も放射されるので電子機器が壊れることもある。</p><p><strong>超高濃度情報爆発</strong>……HT 情報の高密度衝撃波。爆発的に大きなノイズ。</p><p>**繋ぐ[Connect]**……テレパシー会話をするということ。ゲートを互いに開いて情報通信が可能な状態にすること。 また、記憶媒体などから情報を読み取ること。</p><p><strong>ディスコース[Disc Course Shooter]</strong> ……ディスコースシューターのこと。23 世紀の公共交通機関。予約制で乗車駅と時間帯と降車駅を自由に指定できる。大きなディスクが特徴で、方向指示のリールに沿って飛行する。飛行原理はディスクにより力場を変容させて揚力を得る仕組み。また、それによって他の車両と接触しないようになっているため事故は開業以来ひとつも起きていない。</p><p><strong>哲学的ゾンビ</strong>……物理学的反応は普通の人間と全く同じだがクオリアを持っていない人間のこと。またそれをもとにした哲学的思考実験。</p><p><strong>テレパシー[Telepathy]</strong> ……→HT の項を参照。</p><p><strong>テレパシーする</strong>……テレパシー通信、会話をすること。</p><p><strong>トートロジー[tautology]</strong> ……トートロジーのこと。</p><p><strong>銅[Copper]</strong> ……元素記号 Cu で表される原子番号 29 番の元素。赤色の金属。</p><p><strong>東京タワー</strong>……国内最大の電波塔。</p><p><strong>図書館[library]</strong> ……図書や資料を収集、保管し、閲覧ができるようにした施設。23 世紀では一般的に電子書籍が本棚に並べられていて、データの貸し出しをする。一部の研究機関等の隣接施設では紙製の書籍が置いてある図書館や書籍庫がある。</p><h3 id="な"><a href="#な" class="headerlink" title="[ な ]"></a><strong>[ な ]</strong></h3><p><strong>ナガノ県ナガノ市[長野県長野市]</strong> ……地名。標高が高く寒冷な土地。虹[rainbow] ……同心円上に広がる七色の帯が空に突然現れる現象。虹は消えるときの帯の崩れ方に幾何学的な特徴を見せる。数式を用いると以下のように説明できる。<br>$$<br>&amp;&amp;x&#x3D;\cos^{n}(t)&amp;&amp;\\<br>&amp;&amp;y&#x3D;\sin^{n}(t)&amp;&amp;<br>\tag{*}<br>$$</p><p>1 番外側の円の半径を r&#x3D;R とすると、r&#x3D;R&#x2F;2 のところにある輪が( * )において n&#x3D;1 で表さ</p><p>れる。r が R&#x2F;2 より小さくなる従って n の値は㱣に無限に近づいていき、大きくなるに従って n の値は 0 に近づいていくようにして崩れて消えていく。神出鬼没な自然現象でほとんど観測されない。</p><p><strong>虹[rainbow]</strong> ……雨上がりに七色の円弧状の帯が現れる現象。雨粒によって太陽光がスペク</p><p>トル分解されることによって起こる現象。</p><p><strong>二分割可能モデル[separable type]</strong> ……第 5 世代のスマートツールスから登場したモデル</p><p>で、それまでとは違い本体を２つにまで分割することができる。第四世代までのスマートツールスは形を自在に変えることはできても分割することはできなかったので革新的な新技術である。</p><p><strong>ネクラ[根暗</strong>]……根っから性格が暗いこと。またもっぱら A.I.との会話に熱心なマニア達のことをさす言葉でもある。</p><p><strong>猫は獅子に頭を下げるのか？</strong>……C.S.の著書。21 世紀に執筆された。</p><h3 id="は"><a href="#は" class="headerlink" title="[ は ]"></a><strong>[ は ]</strong></h3><p><strong>梅雨幾何学[Superposition geometry]</strong> ……21 世紀に提唱された幾何学。空間をクラウド</p><p>という小さな広がりの重ね合わせで表現した。これによりそれまでの幾何学をいくつかのクラウドの組み合わせとして表せるほかに、一つの空間にいくつかの状態が重なり合った空間を表現できるようになった。</p><p>**パッド[Pad]**……薄い板状のものでディスプレイを搭載している。ディスプレイ上に様々な</p><p>文書や画像、動画を表示する。入力装置も豊富であり様々なメモが出来る。パッヘルベルのカノン……ヨハン・パッヘルベルが作曲したカノン様式作品。三つの声部と常奏低音によって構成されるとても有名な曲。バネの動き……単振動のこと。単振動は円運動の一次元成分を抽出した運動である。例えば円の半径を A、角速度をω、時刻を t とすると単振動する物体の位置 x は以下の式で表される。</p><p>$x&#x3D;Asin(ωt)$</p><p>また、これを二回微分すると $ ma&#x3D;-Kx $ という運動方程式が導ける。(m、a は運動する物体の質量と加速度、K は定数) 単振動をする物体は以上のようにかかる力が位置によって決まるのが特徴。バネ定数 k のバネに付けられた物体の運動方程式は ma&#x3D;-kx と表されるので、バネの動きも単振動である。</p><p>**パラダイムロスト[The Paradigm Lost]**……21 世紀中盤にあったとされる宇宙規模の大変</p><p>革。パラダイムロスト前後の記録はほとんど残されておらず、それがどのような変革だったのかについては様々な方法で検証がなされているがあまり明確には分かっていない。</p><p>**フォーマット[Format]**……テレパシー通信をする際に相互間で情報をやり取りできるように共通の表現方法を用いるというプロセス。テレパシー会話をする際、ほとんどの場合、情報を言語にフォーマットしてから行われる。フォーマットされていない情報は色や興奮状態などしか伝わらないため会話をするのには向いていないからである。言語をもたない生き物とテレパシー通信をする際は情報のフォーマットの仕方が全く違うため高度な情報交換は期待できない。</p><p>**プリ方向次元[pre directional axis]**…… 身の回りで起こる物理現象が含まれる 6 つの次元軸。またはその空間。幅、奥行き、高さとそれぞれの虚数軸を合わせた６本である。</p><p><strong>フロイト先生、ユング</strong>……ジークムント・フロイトとカール・グスタフ・ユングのこと。フロイトは夢や無意識の研究をした第一人者。ユングも集合的無意識の存在などを主張した。</p><p>**ヘラクレイトス[Hērakleitos]**……古代ギリシャの哲学者。「万物は流転している」という言</p><p>葉で有名。</p><h3 id="ま"><a href="#ま" class="headerlink" title="[ ま ]"></a><strong>[ ま ]</strong></h3><p>**ミョウコウ[妙高]**……地名。高原でスキーリゾート地として有名。妙高高原メッセ……妙高高原にある公共施設、公民館。ホールや図書館が市民に貸し出されている。</p><p>**モノリス[monolith]**……板状の記憶媒体。様々な材質から、様々な大きさのものが作られており、それによって記憶容量や情報引き出し率が変わる。同じ体積では表面に文字が書かれている物の方が無地の物よりも記憶容量が大きいので、多くのモノリスには聖書などの文章が書かれている。</p><h3 id="や"><a href="#や" class="headerlink" title="[ や ]"></a><strong>[ や ]</strong></h3><p>**ユーレイ現象[幽霊現象]**……生物の周りにある物体にその生物の情報が記憶され第三者がそ</p><p>の情報を後で読み取ったときにあたかもその生物がそこにいるのかのように錯覚する現象。特に死去した人間が生前の姿でそこに生きているように見える現象のことを言うことが多い。</p><p>依り代……ユーレイ現象において情報が蓄積している物体のこと。たいていの場合その亡骸</p><p>が依り代となる。</p><h3 id="ら"><a href="#ら" class="headerlink" title="[ ら ]"></a><strong>[ ら ]</strong></h3><p><strong>ラジオ[radio]</strong> ……電磁波を利用して放送局が報道や音楽を発信する音声放送。また、それ</p><p>を受信する機械。</p><p><strong>ラマーズ法[Lamaze Technique]</strong> ……無痛分娩法のひとつ。「ヒッ、ヒッ、フー」の呼吸法</p><p>でよく知られている。</p><p><strong>乱数放送[Numbers Station]</strong> ……数字、文字、あるいは単語などの羅列が流れる発信源不詳</p><p>のラジオ放送。特定の相手に対して情報を伝達する暗号放送だとされる。→ワンタイムパッドルイス・キャロル[Lewis Carroll]……イギリスの作家、数学者。「不思議の国のアリス」の著者</p><h3 id="わ"><a href="#わ" class="headerlink" title="[ わ ]"></a><strong>[ わ ]</strong></h3><p><strong>ワンタイムパッド[one time pad]</strong> ……乱数伴を一回だけ使う暗号の運用法。</p><p>[ 数字 ]</p><p><strong>18 次元宇宙論</strong>……宇宙が梅雨期科学で言う 18 次元空間であるとする理論。HT 基礎構造理</p><p>論が成立するためには宇宙は 18 次元空間でなければならなかったため C.S.が提唱した。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;西暦-2236-年-用語集&quot;&gt;&lt;a href=&quot;#西暦-2236-年-用語集&quot; class=&quot;headerlink&quot; title=&quot;西暦 2236 年 用語集&quot;&gt;&lt;/a&gt;西暦 2236 年 用語集&lt;/h2&gt;&lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
</feed>
