<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柳瀬しおこうの夢</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-29T15:52:39.045Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SHIOKOU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板和群体数据</title>
    <link href="http://example.com/2024/07/29/%E6%A8%A1%E6%9D%BF%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2024/07/29/%E6%A8%A1%E6%9D%BF%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/</id>
    <published>2024-07-29T13:22:47.000Z</published>
    <updated>2024-07-29T15:52:39.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本章主要内容"><a href="#本章主要内容" class="headerlink" title="本章主要内容"></a>本章主要内容</h2><ul><li>函数模板与类模板</li><li>线性群体</li><li>群体数据的组织</li></ul><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><ul><li>如果重载的函数，其解决问题的逻辑是一致的，函数体语句相同，只是处理的数据类型不同，那么写多个相同的函数体，是重复劳动，而且还可能因为代码的冗余造成不一致性。</li><li>解决：使用模板</li></ul><h3 id="求绝对值函数的模板"><a href="#求绝对值函数的模板" class="headerlink" title="求绝对值函数的模板"></a>求绝对值函数的模板</h3><ul><li>整数类型和浮点数类型求绝对值的算法，需要写两种重载函数吗？</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">abs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">abs</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决：函数模板</li></ul><blockquote><p>创建一个通用功能的函数；</p><p>支持多种不同形参</p><p>简化重载函数的函数体设计</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> d=<span class="number">5.5</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">abs</span>(n)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">abs</span>(d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://imgur.com/a/lWcTksT"></p><h3 id="函数模板定义语法"><a href="#函数模板定义语法" class="headerlink" title="函数模板定义语法"></a>函数模板定义语法</h3><ul><li>语法形式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;模板参数表&gt;</span><br><span class="line">函数定义</span><br></pre></td></tr></table></figure><ul><li>+模板参数表的内容</li></ul><blockquote><p>类型参数：class(或typename)标识符</p><p>常量参数：类型说明符 标识符</p><p>模板参数：template&lt;参数表&gt;class 标识符</p></blockquote><p>输出：</p><p><img src="https://p.sda1.dev/18/abc308c1784bcd1987d39fd3af2cce49/006cb046ab052d647eee387c91e99d71.png"></p><h3 id="函数模板的示例"><a href="#函数模板的示例" class="headerlink" title="函数模板的示例"></a>函数模板的示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="comment">//定义函数模板 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outputArray</span><span class="params">(<span class="type">const</span> T *array, <span class="type">int</span> count)</span> </span>&#123; </span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) </span><br><span class="line"> cout &lt;&lt; array[i] &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line"> <span class="comment">//如果数组元素是类的对象，需要该对象所属类重载了流插入运算符“&lt;&lt;”</span></span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> A_COUNT = <span class="number">8</span>, B_COUNT = <span class="number">8</span>, C_COUNT = <span class="number">20</span>; </span><br><span class="line"><span class="type">int</span> a [A_COUNT] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;; </span><br><span class="line"><span class="type">double</span> b[B_COUNT] = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span> &#125;; </span><br><span class="line"><span class="type">char</span> c[C_COUNT] = <span class="string">&quot;Welcome!&quot;</span>; </span><br><span class="line"> cout &lt;&lt; <span class="string">&quot; a array contains:&quot;</span> &lt;&lt; endl; </span><br><span class="line"> <span class="built_in">outputArray</span>(a, A_COUNT); </span><br><span class="line"> cout &lt;&lt; <span class="string">&quot; b array contains:&quot;</span> &lt;&lt; endl; </span><br><span class="line"> <span class="built_in">outputArray</span>(b, B_COUNT); </span><br><span class="line"> cout &lt;&lt; <span class="string">&quot; c array contains:&quot;</span> &lt;&lt; endl; </span><br><span class="line"> <span class="built_in">outputArray</span>(c, C_COUNT); </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://p.sda1.dev/18/462884f4a8760f7007c8e2b2aeff1a2d/5a1589463899fadad249d0379fc29a77.png"></p><p>注意：</p><ul><li>一个函数模板并非自动可以处理所有类型的数据</li><li>只有能够进行函数模板中运算的类型，可以作为类型实参</li><li>自定义的类，需要重载模板中的运算符，才能作为类型实参</li></ul><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><h3 id="类模板的作用"><a href="#类模板的作用" class="headerlink" title="类模板的作用"></a>类模板的作用</h3><ul><li>使用类模板使用户可以为类声明一种模式，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值、能取任意类型（包括基本类型的和用户自定义类型）</li></ul><h3 id="类模板的声明"><a href="#类模板的声明" class="headerlink" title="类模板的声明"></a>类模板的声明</h3><ul><li>类模板</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tamplate &lt;模板参数表&gt;</span><br><span class="line"><span class="keyword">class</span> 类名</span><br><span class="line">&#123;类成员声明&#125;；</span><br></pre></td></tr></table></figure><ul><li>如果需要在类模板以外定义其成员函数，则要采用以下的形式：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;模板参数表&gt;</span><br><span class="line">类型名 类名&lt;模板参数标识符列表&gt;:函数名(参数表)</span><br></pre></td></tr></table></figure><h4 id="类模板示例"><a href="#类模板示例" class="headerlink" title="类模板示例"></a>类模板示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">float</span> gpa;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    T item;</span><br><span class="line">    <span class="type">bool</span> haveValue;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Store</span>();</span><br><span class="line">    <span class="function">T &amp;<span class="title">getElem</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">putElem</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T &amp;Store&lt;T&gt;::<span class="built_in">getElem</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(!haveValue)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No item present!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> Store&lt;T&gt;::<span class="built_in">putElem</span>(<span class="type">const</span> T &amp;x)&#123;</span><br><span class="line">    item=x;</span><br><span class="line">    haveValue=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Store&lt;<span class="type">int</span>&gt; s1,s2;</span><br><span class="line">    s1.<span class="built_in">putElem</span>(<span class="number">10</span>);</span><br><span class="line">    s2.<span class="built_in">putElem</span>(<span class="number">20</span>);</span><br><span class="line">    cout&lt;&lt;s1.<span class="built_in">getElem</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s2.<span class="built_in">getElem</span>()&lt;&lt;endl;</span><br><span class="line">    Student g=&#123;<span class="number">1000</span>,<span class="number">23</span>&#125;;</span><br><span class="line">    Store&lt;Student&gt; s3;</span><br><span class="line">    s3.<span class="built_in">putElem</span>(g);</span><br><span class="line">    cout&lt;&lt;s3.<span class="built_in">getElem</span>().id&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s3.<span class="built_in">getElem</span>().gpa&lt;&lt;endl;</span><br><span class="line">    Store&lt;<span class="type">double</span>&gt; d;</span><br><span class="line">    cout&lt;&lt;d.<span class="built_in">getElem</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个代码没有出现问题但是在编译的过程中却出错了</p></blockquote><h2 id="线性群体的概念"><a href="#线性群体的概念" class="headerlink" title="线性群体的概念"></a>线性群体的概念</h2><ul><li>群体是指由多个数据元素组成的集合体。群体可以分为两个大类：<strong>线性群体</strong>和<strong>非线性群体</strong></li><li>线性群体中的元素按位置排列有序，可以区分按顺序。</li><li>非线性群体不用位置顺序来标识元素。</li><li>线性群体中的元素次序与其逻辑位置关系是对应的。在线性群体中，可以按照访问的不同方法分为<strong>直接访问</strong>、<strong>顺序访问</strong>和<strong>索引访问</strong></li></ul><h2 id="数组类模板"><a href="#数组类模板" class="headerlink" title="数组类模板"></a>数组类模板</h2><ul><li>静态数组具有固定元素个数的群体，其中的元素可以通过下标直接访问。（大小在编译的时候就确定了，在运行时无法修改）</li><li>动态数组由一系列位置连续的，任意数量相同类型的元素组成（其元素个数可以在程序运行时改变）</li><li>vector就是用类模板实现的动态数组</li></ul><h3 id="动态数组类模板程序"><a href="#动态数组类模板程序" class="headerlink" title="动态数组类模板程序"></a>动态数组类模板程序</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本章主要内容&quot;&gt;&lt;a href=&quot;#本章主要内容&quot; class=&quot;headerlink&quot; title=&quot;本章主要内容&quot;&gt;&lt;/a&gt;本章主要内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数模板与类模板&lt;/li&gt;
&lt;li&gt;线性群体&lt;/li&gt;
&lt;li&gt;群体数据的组织&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>青空的卡缪</title>
    <link href="http://example.com/2024/07/25/%E9%9D%92%E7%A9%BA%E7%9A%84%E5%8D%A1%E7%BC%AA/"/>
    <id>http://example.com/2024/07/25/%E9%9D%92%E7%A9%BA%E7%9A%84%E5%8D%A1%E7%BC%AA/</id>
    <published>2024-07-24T16:51:25.000Z</published>
    <updated>2024-07-24T19:12:30.928Z</updated>
    
    <content type="html"><![CDATA[<p>s </p><p>在两位少女在乘坐电车回家的平常日，出现了不平常的事情。</p><ul><li>末班车上除了两位少女之外，谁都不在</li><li>出现了脸部只有血盆大口的异形</li><li>站台的土地开始崩坏</li></ul><p>在正常道路被异形堵住之后，萤和磷决定从以前林业公司运送木材的小道返回萤的家。</p><p>在这条道路上遇到一只狗，然后还有一个穿着工作服，拿着大锯子的类人怪物。</p><p>选择了去找聪，会被异形轮大米。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;s &lt;/p&gt;
&lt;p&gt;在两位少女在乘坐电车回家的平常日，出现了不平常的事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;末班车上除了两位少女之外，谁都不在&lt;/li&gt;
&lt;li&gt;出现了脸部只有血盆大口的异形&lt;/li&gt;
&lt;li&gt;站台的土地开始崩坏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在正常道路被异形堵住之</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>多态性</title>
    <link href="http://example.com/2024/07/24/%E5%A4%9A%E6%80%81%E6%80%A7/"/>
    <id>http://example.com/2024/07/24/%E5%A4%9A%E6%80%81%E6%80%A7/</id>
    <published>2024-07-24T05:27:37.000Z</published>
    <updated>2024-07-24T11:02:22.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符重载的规则"><a href="#运算符重载的规则" class="headerlink" title="运算符重载的规则"></a>运算符重载的规则</h2><p>思考：用“+”、“-”能够实现复数的加减运算吗？</p><p>重载未类的非静态成员函数</p><p>重载未非成员函数</p><h2 id="双目运算符重载为成员函数"><a href="#双目运算符重载为成员函数" class="headerlink" title="双目运算符重载为成员函数"></a>双目运算符重载为成员函数</h2><h3 id="运算符重载为成员函数"><a href="#运算符重载为成员函数" class="headerlink" title="运算符重载为成员函数"></a>运算符重载为成员函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数类型 <span class="keyword">operator</span> 运算符（形参）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">参数个数=原操作个数<span class="number">-1</span>（后置++，--除外）</span><br></pre></td></tr></table></figure><h3 id="双目运算符重载规则"><a href="#双目运算符重载规则" class="headerlink" title="双目运算符重载规则"></a>双目运算符重载规则</h3><p>​如果要重载B为类成员函数，使之能够实现表达式oprd1 B oprd2，其中oprd1为A类对象，则B应重载为A类的成员函数，形参类型应该是oprd2所属的类型。</p><p>​经重载后，表达式oprd1 B oprd2相当于oprd1.operator B(oprd2)</p><h4 id="复数类加减法重载为成员函数"><a href="#复数类加减法重载为成员函数" class="headerlink" title="复数类加减法重载为成员函数"></a>复数类加减法重载为成员函数</h4><ul><li>将+、-运算重载为复数类的成员函数</li><li>实部和虚部分别相加减</li><li>两个操作数都是复数类的对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r=<span class="number">0.0</span>,<span class="type">double</span> i=<span class="number">0.0</span>):<span class="built_in">real</span>(r),<span class="built_in">imag</span>(i)&#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; c2)<span class="type">const</span>;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; c2)<span class="type">const</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real,imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; c2)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">Complex</span>(real+c2.real,imag+c2.imag);&#125;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; c2)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">Complex</span>(real-c2.real,imag-c2.imag);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::display</span><span class="params">()</span><span class="type">const</span></span>&#123;cout&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">2.5</span>,<span class="number">3.5</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">1.1</span>,<span class="number">5.7</span>)</span></span>;</span><br><span class="line">    Complex c3=c1+c2;</span><br><span class="line">    c3.<span class="built_in">display</span>();</span><br><span class="line">    Complex c4=c1-c2;</span><br><span class="line">    c4.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/b59c5135b2a20caa291e51c6ea607b5d/04498db706ecd2c26342540b19dfb455.png"></p><h2 id="单目运算符重载为成员函数"><a href="#单目运算符重载为成员函数" class="headerlink" title="单目运算符重载为成员函数"></a>单目运算符重载为成员函数</h2><h3 id="前置单目运算符重载规则"><a href="#前置单目运算符重载规则" class="headerlink" title="前置单目运算符重载规则"></a>前置单目运算符重载规则</h3><p>如果要重载U为类成员函数，使之能够实现表达式U oprd，其中oprd为A类对象，则U应该被重载为A类的成员函数，无形参。</p><p>经过重载之后，表达式U oprd相当于oprd.operator U()</p><h3 id="后置单目运算符-和–重载规则"><a href="#后置单目运算符-和–重载规则" class="headerlink" title="后置单目运算符++和–重载规则"></a>后置单目运算符++和–重载规则</h3><p>如果要重载++或–为类成员函数，使之能够实现表达式oprd+或oprd-，其中oprd为A类对象，则++或–应被重载为A类的成员函数，且具有一个int类型的形参。</p><p>经重载后，表达式oprd++相当于oprd.operator ++(0)</p><h4 id="重载前置-和后置-为时钟类成员函数"><a href="#重载前置-和后置-为时钟类成员函数" class="headerlink" title="重载前置++和后置++为时钟类成员函数"></a>重载前置++和后置++为时钟类成员函数</h4><ul><li>前置单目运算符，重载函数没有形参</li><li>后置++运算符，重载函数需要有一个int形参</li><li>操作数是时钟类的对象</li><li>实现时间增加一秒钟</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Clock</span>(<span class="type">int</span> hour=<span class="number">0</span>,<span class="type">int</span> minute=<span class="number">0</span>,<span class="type">int</span> second=<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    Clock&amp; <span class="keyword">operator</span>++();</span><br><span class="line">    Clock <span class="keyword">operator</span>++(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hour,minute,second;</span><br><span class="line">&#125;;</span><br><span class="line">Clock::<span class="built_in">Clock</span>(<span class="type">int</span> hour,<span class="type">int</span> minute,<span class="type">int</span> second)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>&lt;=hour&amp;&amp;hour&lt;<span class="number">24</span>%%<span class="number">0</span>&lt;=minute&amp;&amp;minute&lt;<span class="number">60</span>&amp;&amp;<span class="number">0</span>&lt;=second&amp;&amp;second&lt;<span class="number">60</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;hour=hour;</span><br><span class="line">        <span class="keyword">this</span>-&gt;minute=minute;</span><br><span class="line">        <span class="keyword">this</span>-&gt;second=second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;cout&lt;&lt;<span class="string">&quot;Time Error!\n&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;hour&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;minute&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;second&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载为非成员函数"><a href="#运算符重载为非成员函数" class="headerlink" title="运算符重载为非成员函数"></a>运算符重载为非成员函数</h2><h3 id="运算符重载为非成员函数-1"><a href="#运算符重载为非成员函数-1" class="headerlink" title="运算符重载为非成员函数"></a>运算符重载为非成员函数</h3><p>有些运算符不能重载为成员函数，例如二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象。</p><h3 id="运算符重载为非成员函数的规则"><a href="#运算符重载为非成员函数的规则" class="headerlink" title="运算符重载为非成员函数的规则"></a>运算符重载为非成员函数的规则</h3><p>函数的形参代表依从左到右的次序排列的各操作数。</p><p>重载为非成员函数时。</p><p>参数个数&#x3D;原操作数个数（后置++，–除外）</p><p>至少应该有一个自定义类型的参数</p><p>后置单目运算符++和–的重载函数，形参列表中要增加一个int，但不必写形参名。</p><p>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元。</p><h3 id="运算符重载1为非成员函数的规则"><a href="#运算符重载1为非成员函数的规则" class="headerlink" title="运算符重载1为非成员函数的规则"></a>运算符重载1为非成员函数的规则</h3><p>双目运算符B重载后，表达式oprd1 B oprd2等同于operator B(oprd)后置单目运算符++和–重载后，表达式oprd B等同于operator B(oprd.0)</p><h4 id="重载Complex的加减法和“"><a href="#重载Complex的加减法和“" class="headerlink" title="重载Complex的加减法和“&lt;&lt;”运算符为非成员函数"></a>重载Complex的加减法和“&lt;&lt;”运算符为非成员函数</h4><ul><li><p>将+、-（双目）重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用。</p></li><li><p>将&lt;&lt;(双目)重载为非成员函数，并将其声明为复数类的友元，它的左操作数是std::ostream引用，右操作数为复数类的常引用，返回std::ostream引用，用以支持一下形式的输出：</p></li><li><pre><code class="cpp">cout&lt;&lt;a&lt;&lt;b;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">该输出调用的是</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">operator&lt;&lt;(operator&lt;&lt;(cout,a),b);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r=<span class="number">0.0</span>,<span class="type">double</span> i=<span class="number">0.0</span>):<span class="built_in">real</span>(r),<span class="built_in">imag</span>(i)&#123;&#125;;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; c1,<span class="type">const</span> Complex&amp; c2);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; c1,<span class="type">const</span> Complex&amp; c2);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> Complex&amp; c);</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real,imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; c1,<span class="type">const</span> Complex&amp; c2)&#123;<span class="keyword">return</span> <span class="built_in">Complex</span>(c1.real+c2.real,c1.imag+c2.imag);&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; c1,<span class="type">const</span> Complex&amp; c2)&#123;<span class="keyword">return</span> <span class="built_in">Complex</span>(c1.real-c2.real,c1.imag-c2.imag);&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out,<span class="type">const</span> Complex&amp; c)&#123;cout&lt;&lt;c.real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;c.imag;<span class="keyword">return</span> out;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">5</span>,<span class="number">4</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">2</span>,<span class="number">10</span>)</span>,c3</span>;</span><br><span class="line">    c3=c1-c2;</span><br><span class="line">    cout&lt;&lt;c1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c3&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c1+c2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![](https://p.sda1.dev/18/8755d261619d890c0e9353a8aed87a38/faf30fd4233c46ac29b3e3808e3f7d11.png)</code></pre></li></ul><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><h3 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a>类型转换规则</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base1::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>:<span class="keyword">public</span> Base1&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base2::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base2&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Derived::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Base1 *ptr)</span></span>&#123;</span><br><span class="line">    ptr-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base1 base1;</span><br><span class="line">    Base2 base2;</span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="built_in">fun</span>(&amp;base1);</span><br><span class="line">    <span class="built_in">fun</span>(&amp;base2);</span><br><span class="line">    <span class="built_in">fun</span>(&amp;derived);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/65caa7288507772341086ac552035df9/32842b637a6e08017db6dd6ecc28102e.png"></p><h3 id="通过虚函数实现运行时多态"><a href="#通过虚函数实现运行时多态" class="headerlink" title="通过虚函数实现运行时多态"></a>通过虚函数实现运行时多态</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base1::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>:<span class="keyword">public</span> Base1&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base2::display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base2::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base2&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::display</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Derived::display()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Base1 *ptr)</span></span>&#123;</span><br><span class="line">    ptr-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base1 base1;</span><br><span class="line">    Base2 base2;</span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="built_in">fun</span>(&amp;base1);</span><br><span class="line">    <span class="built_in">fun</span>(&amp;base2);</span><br><span class="line">    <span class="built_in">fun</span>(&amp;derived);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/ec68de0765b14cbb9f17ee3e894e4656/0d8ec154d2604ce54b232dd670aa8727.png"></p><h3 id="初识虚函数"><a href="#初识虚函数" class="headerlink" title="初识虚函数"></a>初识虚函数</h3><ul><li><p>用virtual关键字说明的函数</p></li><li><p>虚函数是实现运行时多态性基础</p></li><li><p>C++的虚函数时动态绑定的函数</p></li><li><p>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现运行过程中的多态。</p></li><li><p>一般成员函数可以是虚函数</p></li><li><p>构造函数不能是虚函数</p></li><li><p>析构函数可以是虚函数</p></li></ul><h3 id="一般虚函数成员"><a href="#一般虚函数成员" class="headerlink" title="一般虚函数成员"></a>一般虚函数成员</h3><h4 id="虚函数的声明"><a href="#虚函数的声明" class="headerlink" title="虚函数的声明"></a>虚函数的声明</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名 (形参表)；</span><br></pre></td></tr></table></figure><p>虚函数声明只能出现在类定义的函数原型声明中，而不能在成员函数实现的时候。</p><p>在派生类中可以对基类中的成员函数进行覆盖。</p><p>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理时静态的。</p><h3 id="virtual关键字"><a href="#virtual关键字" class="headerlink" title="virtual关键字"></a>virtual关键字</h3><p>派生类可以不显式的用virtual声明虚函数，这时系统就会用以下规则来判断派生类的一个成员函数是不是虚函数。</p><ul><li>该函数是否与基类的虚函数有相同名称、参数个数及对应参数类型</li><li>该函数是否与基类的虚函数有相同的返回值或者满足类型兼容规则的指针、引用型的返回值</li><li>如果从名称、参数及返回值三个方面检查之后，派生类的函数满足上述条件，就会自动确定为虚函数。这时，派生类的虚函数便覆盖率基类的虚函数。</li><li>派生类中的虚函数还会隐藏基类中同名函数的所有其他重载形式</li><li>一般习惯于在派生类的函数中也使用virtual关键字，以增加程序的可读性。</li></ul><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>为什么需要虚析构函数？可能通过基类指针删除派生类对象，如果你打算允许其他人通过基类指针调用对象的析构函数（通过delete这样做时正常的），就需要让基类的析构函数成为虚函数，否则执行delete的结果时不确定的。</p><h3 id="一个不使用虚析构函数的例子"><a href="#一个不使用虚析构函数的例子" class="headerlink" title="一个不使用虚析构函数的例子"></a>一个不使用虚析构函数的例子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude<span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">Base</span>();</span><br><span class="line">&#125;;</span><br><span class="line">Base::~<span class="built_in">Base</span>()&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base destructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>();</span><br><span class="line">    ~<span class="built_in">Derived</span>();</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude<span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span>~<span class="built_in">Base</span>();</span><br><span class="line">&#125;;</span><br><span class="line">Base::~<span class="built_in">Base</span>()&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base destructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Derived</span>();</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="虚表与动态绑定"><a href="#虚表与动态绑定" class="headerlink" title="虚表与动态绑定"></a>虚表与动态绑定</h2><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><ul><li>每个多态类有一个虚表(virtual table)</li><li>虚表中有当前类的各个虚函数的入口地址</li><li>每个对象有一个指向当前类的虚表的指针(虚指针vptr)</li></ul><h3 id="动态绑定的实现"><a href="#动态绑定的实现" class="headerlink" title="动态绑定的实现"></a>动态绑定的实现</h3><ul><li>构造函数中为对象的虚指针赋值</li><li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li><li>通过该入口地址调用虚函数</li></ul><p>虚表示意图</p><p><img src="https://p.sda1.dev/18/0738771e7ab995b92f3f0a5bb8a7c9a7/6eeb75ff7399cc94e2d4999d5a508e0f.png"></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>纯虚函数时一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名(函数表)=<span class="number">0</span>；</span><br></pre></td></tr></table></figure><p>带有纯虚函数的类称为抽象类</p><h3 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h3><p>带有纯虚函数的类叫做抽象类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;<span class="keyword">virtual</span> 类型 函数名(参数表)=<span class="number">0</span>；&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类作用"><a href="#抽象类作用" class="headerlink" title="抽象类作用"></a>抽象类作用</h3><ul><li>抽象类为抽象和设计的目的而声明</li><li>将有关数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为。</li><li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现</li></ul><blockquote><p>抽象类只能作为基类去使用</p><p>不能定义抽象类的对象</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span><span class="type">const</span> </span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>:<span class="keyword">public</span> Base1&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base2::display</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base2 display() const&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base2&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::display</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Derived display() const&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Base1*ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ptr-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base2 base2;</span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="built_in">fun</span>(&amp;base2);</span><br><span class="line">    <span class="built_in">fun</span>(&amp;derived);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/c7a3e07e30ca22ad5bd12a4b7f5262c3/917c23a6e50b415690ea9214116cab51.png"></p><h2 id="C-11：override和final"><a href="#C-11：override和final" class="headerlink" title="C++11：override和final"></a>C++11：override和final</h2><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>多态行为的基础：基类声明虚函数，继承类声明一个函数覆盖该虚函数</p><p>覆盖要求：函数签名（signature）完全一只</p><p>函数签名包括 函数名 参数列表 const</p><h3 id="显式函数覆盖"><a href="#显式函数覆盖" class="headerlink" title="显式函数覆盖"></a>显式函数覆盖</h3><p>c++11引入显式函数覆盖，在编译期而非运行期捕获此类错误，在虚函数显式重载中运用，编译器会检查基类是否存在一虚拟函数，在派生类中带有声明override的虚拟函数，有相同的函数前面（signature）；若不存在，则会回报错误。</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>C++11提供的final，用来避免类被继承，或是基类的函数被改写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Base1</span> <span class="keyword">final</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Base2</span> &#123;<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">final</span></span>;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived2</span> :Base2&#123;<span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;<span class="keyword">final</span>&#125;<span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><h2 id="第八章小结"><a href="#第八章小结" class="headerlink" title="第八章小结"></a>第八章小结</h2><ul><li>多态性的概念，运算符重载，虚函数，纯虚函数，抽象类，override和final</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运算符重载的规则&quot;&gt;&lt;a href=&quot;#运算符重载的规则&quot; class=&quot;headerlink&quot; title=&quot;运算符重载的规则&quot;&gt;&lt;/a&gt;运算符重载的规则&lt;/h2&gt;&lt;p&gt;思考：用“+”、“-”能够实现复数的加减运算吗？&lt;/p&gt;
&lt;p&gt;重载未类的非静态成员函数&lt;/</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>回到拉康：拉康的战场，敌人与回答</title>
    <link href="http://example.com/2024/07/23/%E5%9B%9E%E5%88%B0%E6%8B%89%E5%BA%B7%EF%BC%9A%E6%8B%89%E5%BA%B7%E7%9A%84%E6%88%98%E5%9C%BA%EF%BC%8C%E6%95%8C%E4%BA%BA%E4%BA%8E-%E4%B8%8E%E5%9B%9E%E7%AD%94/"/>
    <id>http://example.com/2024/07/23/%E5%9B%9E%E5%88%B0%E6%8B%89%E5%BA%B7%EF%BC%9A%E6%8B%89%E5%BA%B7%E7%9A%84%E6%88%98%E5%9C%BA%EF%BC%8C%E6%95%8C%E4%BA%BA%E4%BA%8E-%E4%B8%8E%E5%9B%9E%E7%AD%94/</id>
    <published>2024-07-23T15:10:14.000Z</published>
    <updated>2024-07-23T20:09:19.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回到拉康"><a href="#回到拉康" class="headerlink" title="回到拉康"></a>回到拉康</h2><h3 id="亚里士多德的《诗学》"><a href="#亚里士多德的《诗学》" class="headerlink" title="亚里士多德的《诗学》"></a>亚里士多德的《诗学》</h3><p>俄狄浦斯的关键是Plot，对具体事件的安排，是事件的组合排列。</p><p>开始&#x2F;发展&#x2F;结尾 the construction of events。</p><h4 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h4><p>逻辑-&gt;线性时间，回环的逻辑。</p><p>给自己定下一个逻辑。</p><p>借用一个主题，将自己的时间非线性化，给自己定下一个逻辑。</p><h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4><h3 id="拉康选集"><a href="#拉康选集" class="headerlink" title="拉康选集"></a>拉康选集</h3><h4 id="失窃的信"><a href="#失窃的信" class="headerlink" title="失窃的信"></a>失窃的信</h4><p>信件的消失是不可能，这是一种无意识对于真理的隐藏。</p><p>充满了发展，却又连接不起来的开端和结尾。</p><p>人没有主体性，镜像自我。</p><h4 id="海德格尔《从未有而来》"><a href="#海德格尔《从未有而来》" class="headerlink" title="海德格尔《从未有而来》"></a>海德格尔《从未有而来》</h4><p>主导问题：对存在的遗忘，存在者的存在样态是生命。</p><h4 id="倒错"><a href="#倒错" class="headerlink" title="倒错"></a>倒错</h4><p>appropriate：悲剧美，可以分手。</p><p>这里的内容其实我都没有怎么读懂，现在来串联一下自己了解到的东西，转喻和隐喻的关系我想到了一个比较适合我的理解方式：首先需要准备一个链条，转喻和隐喻都是行为，更换链条的一个结点就是隐喻，前一个结点的动作传到下一个结点就是转喻。</p><p>语言两极结构（the bipolar structure of language）</p><p>隐喻（相似性）和转喻（邻近性）的“二元模式对于认识所有的言语行为和人类一般行为都具有根本性的意义和影响。”③ 这也就意味着，隐喻和转喻的结构模式作为一种普泛性的研究范式，从修辞学<br>走向文化学的必然，这对于更深入地解释人类行为、精神病症、深层心理等棘手而重要的问题，具有巨大的方法论和认识论价值。</p><p>症候就是一个能指被另一个有关的能指替</p><p>I（纵聚合）轴 II（横组合）轴<br>隐喻 转喻<br>相似 邻近<br>选择 组合<br>替换 构成<br>聚合 组合<br>共时 历时<br>邻近性紊乱 相似性紊乱<br>浪漫主义和象征主义 现实主义<br>超现实主义 立体主义<br>抒情诗 史诗<br>诗歌 散文<br>蒙太奇 特写<br>交感巫术 模拟巫术<br>梦的认同与象征 梦的移置与凝缩</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回到拉康&quot;&gt;&lt;a href=&quot;#回到拉康&quot; class=&quot;headerlink&quot; title=&quot;回到拉康&quot;&gt;&lt;/a&gt;回到拉康&lt;/h2&gt;&lt;h3 id=&quot;亚里士多德的《诗学》&quot;&gt;&lt;a href=&quot;#亚里士多德的《诗学》&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="精神分析" scheme="http://example.com/tags/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="http://example.com/2024/07/23/git%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2024/07/23/git%E6%93%8D%E4%BD%9C/</id>
    <published>2024-07-23T09:23:53.000Z</published>
    <updated>2024-07-23T15:09:31.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p>一般工作流程</p><ul><li>克隆Git资源作为工作目录。</li><li>在克隆的资源上添加或修改文件</li><li>如果其他人修改了，你可以更新资源</li><li>在提交前查看修改</li><li>提交修改</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p><img src="https://p.sda1.dev/18/2fd9786efda6a8c9caa00586196f4d11/d04c8f15892553dd9f987d55ae96596d.png"></p><h2 id="Git工作区、暂存区和版本区"><a href="#Git工作区、暂存区和版本区" class="headerlink" title="Git工作区、暂存区和版本区"></a>Git工作区、暂存区和版本区</h2><ul><li>工作区：就是你在电脑里能看到的目录。</li><li>暂存区（stage or index）；一般存放在.git目录下的index文件中，所以我们把暂存区有时也叫作索引（index）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.git/index</span><br></pre></td></tr></table></figure><ul><li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="工作区、版本库的暂存区和版本库之间的关系"></p><ul><li>左侧为工作区，右侧为版本库。在版本库中标记为“index”的区域是暂存区（stage&#x2F;index），标记为“master”的是master分支所代表的目录树。</li><li>图中我们可以看出此时“HEAD”实际上是指向master分支的一个“游标”。所以图中的HEAD可以用master来替换。</li></ul><ul><li>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git&#x2F;objects” 目录下，里面包含了创建的各种对象及内容。</li><li>当对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</li><li>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</li><li>当执行 <strong>git reset HEAD</strong> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行 <strong>git rm –cached <file></file></strong> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行 <strong>git checkout .</strong> 或者 <strong>git checkout – <file></file></strong> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。</li><li>当执行 <strong>git checkout HEAD .</strong> 或者 <strong>git checkout HEAD <file></file></strong> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="img"></p><h1 id="Git创建仓库"><a href="#Git创建仓库" class="headerlink" title="Git创建仓库"></a>Git创建仓库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>Git使用该命令来初始化一个Git仓库，Git的很多命令都需要在Git的仓库中运行。</p><p>在进行完这步操作之后，Git仓库会生成一个.git目录，该目录包含了资源的所有元数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init newrepo</span><br></pre></td></tr></table></figure><p>这一步是将指定的目录作为Git仓库。而我们想要存入文件，以及将它们纳入版本控制就需要下面这样操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#x27;初始化项目版本&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong> 在 Linux 系统中，commit 信息使用单引号 **’**，Windows 系统，commit 信息使用双引号 **”**。</p><p>所以在 git bash 中 <strong>git commit -m ‘提交说明’</strong> 这样是可以的，在 Windows 命令行中就要使用双引号 **git commit -m “提交说明”**。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone</span><br></pre></td></tr></table></figure><p>我们使用git clone的命令从现有Git仓库中拷贝项目（类似swn checkout）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure><p>如果需要指定目录，则指令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>例子：比如我们要克隆hexo的小插件的Git代码仓库，可以用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-generator-searchdb</span><br></pre></td></tr></table></figure><p>git的配置使用<strong>git config</strong>的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=true</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.ignorecase=true</span><br><span class="line">core.precomposeunicode=true</span><br></pre></td></tr></table></figure><p>编辑git配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config -e#正对当前仓库</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config -e --global#针对系统上所有仓库 </span><br></pre></td></tr></table></figure><p>设置提交代码时的用户的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name&quot;shiokou&quot;</span><br><span class="line">$ git config --global user.email shiokou0408@gmail.com</span><br></pre></td></tr></table></figure><p>如果去掉–global参数只对目前仓库有效。</p><h1 id="GIT操作"><a href="#GIT操作" class="headerlink" title="GIT操作"></a>GIT操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add</span><br><span class="line">$ git commit</span><br></pre></td></tr></table></figure><ul><li>git init:初始化仓库</li><li>git add：添加文件到暂$存区</li><li>git commit：将暂存区内容添加到仓库中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone</span><br></pre></td></tr></table></figure><p>拷贝一份远程仓库，也就是下载一个项目</p><h2 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h2><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p><p>下表列出了有关创建与提交你的项目的快照的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到暂存区</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">将文件从暂存区和工作区中删除。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr><tr><td align="left"><code>git checkout</code></td><td align="left">分支切换。</td></tr><tr><td align="left"><code>git switch （Git 2.23 版本引入）</code></td><td align="left">更清晰地切换分支。</td></tr><tr><td align="left"><code>git restore （Git 2.23 版本引入）</code></td><td align="left">恢复或撤销文件的更改。</td></tr></tbody></table><h2 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr></tbody></table><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr></tbody></table><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><p>分支代表一条独立的开发线，分支有以下优势。</p><ul><li>可以从开发主线上分离</li><li>不影响主线的同时工作</li></ul><p><img src="https://static.jyshare.com/images/svg/git-brance.svg" alt="img"></p><p>Git的分支更像是指向更改快照的指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch(branchname)</span><br></pre></td></tr></table></figure><p>创建分支命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout(branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge</span><br></pre></td></tr></table></figure><p>合并分支命令：可以选择多次合并统一分支，也可以直接删除被并入的分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gitdemo</span><br><span class="line">$ cd gitdemo/</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository...</span><br><span class="line">$ touch README</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#x27;第一次版本提交&#x27;</span><br><span class="line">[master (root-commit) 3b58100] 第一次版本提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure><p>测试目录</p><p>Git分支管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数的时候，会显示本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>手动创建分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch yushio</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  yushio</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ echo &#x27;runoob.com&#x27; &gt; test.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#x27;add test.txt&#x27;</span><br><span class="line">[master 3e92c19] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch &#x27;testing&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>创建分支并切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b newtest</span><br><span class="line">Switched to a new branch &#x27;newtest&#x27;</span><br><span class="line">$ git rm test.txt </span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ touch runoob.php</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -am &#x27;removed test.txt、add runoob.php&#x27;</span><br><span class="line">[newtest c1501a2] removed test.txt、add runoob.php</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        runoob.php</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建了新分支，新的分支上删除了test.txt，增加了runoob.php，但是切换回master分支之后，前者还在，后者不在。</p><p>删除分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testing</span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git merge newtest</span><br><span class="line">Updating 3e92c19..c1501a2</span><br><span class="line">Fast-forward</span><br><span class="line"> runoob.php | 0</span><br><span class="line"> test.txt   | 1 -</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        runoob.ph</span><br></pre></td></tr></table></figure><p>将newtest合并到主分支上，newtest.txt没有了，合并完成之后，删除分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d newtest</span><br><span class="line">Deleted branch newtest (was c1501a2).</span><br></pre></td></tr></table></figure><p>之后就只有master分支了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>合并冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">$ cat runoob.php</span><br></pre></td></tr></table></figure><p>将runoob.php内容改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>创建change_site分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b change_site</span><br><span class="line">Switched to a new branch &#x27;change_site&#x27;</span><br><span class="line">$ vim runoob.php</span><br><span class="line">$ head -3 runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">$ git commit -am &#x27;changed the runoob.php&#x27;</span><br><span class="line">[change_site 7774248] changed the runoob.php</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p>换回master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">$ cat runoob.php</span><br><span class="line">$ vim runoob.php    # 修改内容如下</span><br><span class="line">$ cat runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">?&gt;</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/runoob.php b/runoob.php</span><br><span class="line">index e69de29..ac60739 100644</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+echo 1;</span><br><span class="line">+?&gt;</span><br><span class="line">$ git commit -am &#x27;修改代码&#x27;</span><br><span class="line">[master c68142b] 修改代码</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p>现在合并“change_site”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git merge change_site</span><br><span class="line">Auto-merging runoob.php</span><br><span class="line">CONFLICT (content): Merge conflict in runoob.php</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br><span class="line">$ cat runoob.php     # 打开文件，看到冲突内容</span><br><span class="line">&lt;?php</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">echo 1;</span><br><span class="line">=======</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>出现冲突，手动修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim runoob.php </span><br><span class="line">$ cat runoob.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">$ git diff</span><br><span class="line">diff --cc runoob.php</span><br><span class="line">index ac60739,b63d7d7..0000000</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@@ -1,3 -1,3 +1,4 @@@</span><br><span class="line">  &lt;?php</span><br><span class="line"> +echo 1;</span><br><span class="line">+ echo &#x27;runoob&#x27;;</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure><p>通知Git文件冲突已经解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">UU runoob.php</span><br><span class="line">$ git add runoob.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  runoob.php</span><br><span class="line">$ git commit</span><br><span class="line">[master 88afe0e] Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h2&gt;&lt;p&gt;一般工作流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;克隆Git资源作为工作目录。&lt;/li&gt;
&lt;li&gt;在克隆的资源</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>高精度问题</title>
    <link href="http://example.com/2024/07/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/07/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</id>
    <published>2024-07-21T11:22:30.000Z</published>
    <updated>2024-07-21T12:25:09.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我们在使用c++在进行一系列运算的过程中，不能按照我们在日常生活中的思维，因为在编程语言的计算中，往往还需要考虑内存的问题，位数过高的数据会超过系统能提供的内存大小，导致报错，而我们又需要进行一些高精度的计算问题，所以会出现专门解决高精度运算的高精度算法。</p><p>​高精度算法有四个基本的类型：高精度加法、高精度减法、高精度乘法、高精度除法。在本文中，我们将由浅入深，由易到难，层层剥开高精度算法背后的秘密。</p><h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><p>​由于通常的存储计位方式会导致我们的内存出现越界的情况，在高精度加法的运算中，我们采取了使用字符串存储目标数据的方式。</p><p>​整个程序的设计思路应该从，语言选择-&gt;输出选项-&gt;无效数据的排除-&gt;数据处理-&gt;结果输出的路线出发，下面给出一个高精度加法的例题，我们将从这个例题出发，剖析高精度加法的算法。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>高精度加法。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>两个整数<em>a</em>,<em>b</em>。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>结果。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入 #1</strong>复制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong>复制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h4><ul><li><p>20%20% 数据 <em>a</em>,<em>b</em> 在 long long 范围内；</p></li><li><p>100% 数据 0&lt;𝑎,𝑏≤$10^1008#</p></li><li><pre><code class="cpp">#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123;    string s=&#123;s1,s2&#125;;    for(int i=0;i&lt;=1;i++)    &#123;        s[i]=getline(cin,line);    &#125;    for(int )    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">​在计算这个高精度问题的时候，我们需要知道我们现在其实是在用字符串进行着计算，所以我们做的事情其实是将运算转化为字符串的计算，而联想我们平时用到的加法运算方式，就能发现，其实我们在进行多位数运算的时候，其实很多时候是使用了进位法的，所以现在我们需要解决的问题就是，研究明白字符串的进位运算方式。</span><br><span class="line"></span><br><span class="line">​在我们的思考过程中，我们先遍历一遍我们给如的这两个字符串的所有情况，不难发现，我们的运算位数和短的那个字符串相关，最简单的情况是，我们变换的位数和短字符串是一样的，一般的情况呢是需要运算比短字符串多一位的，最特殊的情况就是需要连续进位，这样就不能确定具体多少次了，最高位需要特殊处理，而一般位数的相加我只需要进行以下操作。</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">for(int i=0;i&lt;minlength;i++)</span><br><span class="line">&#123;</span><br><span class="line">int tem=s1[s1.size()-i]-&#x27;&#x27;+s2[s2.size()-i]-&#x27;&#x27;;</span><br><span class="line">if(i=minlength-1&amp;&amp;tem&gt;9)</span><br><span class="line">&#123;</span><br><span class="line">flag=1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if(tem&gt;9)</span><br><span class="line">&#123;</span><br><span class="line">s[i]+=tem%10;</span><br><span class="line">s[i+1]++;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">s[i]+=tem%10;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>在处理最高位的时候，我们需要考虑的事情在于，短字符串的最高位和其对应的长字符串的那一位相加之后的结果，这里其实可以分为三个类型：第一是相加的结果小于10，这样就直接结束处理过程，准备进入输出过程，而如果相加的结果大于10的话，这个时候也要分两种情况，第一种是进位的时候，不会导致下一位的结果也大于等于10，反之就又需要进位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=minlength;i&lt;maxlength;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i]+=s1[i];</span><br><span class="line">        s[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我们在使用c++在进行一系列运算的过程中，不能按照我们在日常生活中的思维，因为在编程语言的计算中，往往还需要考虑内存的问题，位数过高的数</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>碧蓝幻想relink因子</title>
    <link href="http://example.com/2024/07/09/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3relink%E5%9B%A0%E5%AD%90/"/>
    <id>http://example.com/2024/07/09/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3relink%E5%9B%A0%E5%AD%90/</id>
    <published>2024-07-09T14:57:33.000Z</published>
    <updated>2024-07-12T19:25:09.466Z</updated>
    
    <content type="html"><![CDATA[<p>碧蓝幻想relink里面的因子可以大致分为基本因子和专属因子，而获取方式通常是万事屋抽奖和遗物鉴定，万事屋可以出角色的专属因子，遗物鉴定会有特殊因子，像刀上舞、属性克制转换、追击等。</p><blockquote><p>碧蓝幻想存在伤害上限，能增加这个上限的因子目前有，伤害上限和刀上舞。</p></blockquote><ul><li>因子的副词条不会出现和主词条一样的。</li></ul><p>毕业的因子的配置是：</p><p>四个伤害上限V+；</p><p>一个暴击率V+（理论上可以实现百爆）；</p><p>属性克制转换；</p><p>三个追击；</p><p>角色专属因子；</p><ul><li>因子等级</li></ul><p>每个因子的等级上限不同，五级因子+觉醒武器天赋因子（等级+1），单个因子最多提供16的因子技能等级。</p><ul><li>因子推荐</li></ul><p>热血：在满血状态下能有70%左右的攻击力加成。</p><p>暴君：可以大幅度增加攻击力，并且能够压制血量，触发原巴武器的浩劫天赋，连击加成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;碧蓝幻想relink里面的因子可以大致分为基本因子和专属因子，而获取方式通常是万事屋抽奖和遗物鉴定，万事屋可以出角色的专属因子，遗物鉴定会有特殊因子，像刀上舞、属性克制转换、追击等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;碧蓝幻想存在伤害上限，能增加这个上限的因子目前有，</summary>
      
    
    
    
    
    <category term="碧蓝幻想" scheme="http://example.com/tags/%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>等間隔の黒い透明</title>
    <link href="http://example.com/2024/06/30/hatena%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2024/06/30/hatena%E6%94%B6%E9%9B%86/</id>
    <published>2024-06-29T20:33:59.000Z</published>
    <updated>2024-07-08T17:35:23.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Episode1"><a href="#Episode1" class="headerlink" title="Episode1"></a>Episode1</h2><p>讲述了男主和女主的关系，女主是一位娇生惯养的公主一般的角色，男主则死承担着一位情绪价值的提供者的角度，女主有着与其年龄不相符的外貌，男女主保留着不正当的男女关系。</p><h2 id="Episode2"><a href="#Episode2" class="headerlink" title="Episode2"></a>Episode2</h2><p>男主的工作是网页设计，他会讲网上的所见所闻（如隧道的挖掘）之类的新闻告诉女主。男主与一个骆驼男一起工作，似乎还很害怕他。</p><h2 id="Episode3"><a href="#Episode3" class="headerlink" title="Episode3"></a>Episode3</h2><p>与骆驼的谈话，从对骆驼个人的情感倾向到对这个国家乃至星球的喜好。</p><p>我们从出生开始，就一直在能指链条上延宕。这个过程在这个链条上一直都存在。</p><p><img src="/2024/06/30/hatena%E6%94%B6%E9%9B%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240630045837684.png" alt="image-20240630045837684"></p><h2 id="Episode4"><a href="#Episode4" class="headerlink" title="Episode4"></a>Episode4</h2><p>男主在经历一场电波的旅途，这段对电车上糟糕环境的描写可圈可点，以及说在这条路上骑自行车追逐的描绘。</p><h2 id="Episode5"><a href="#Episode5" class="headerlink" title="Episode5"></a>Episode5</h2><p><img src="/2024/06/30/hatena%E6%94%B6%E9%9B%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240630050539263.png" alt="image-20240630050539263"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Episode1&quot;&gt;&lt;a href=&quot;#Episode1&quot; class=&quot;headerlink&quot; title=&quot;Episode1&quot;&gt;&lt;/a&gt;Episode1&lt;/h2&gt;&lt;p&gt;讲述了男主和女主的关系，女主是一位娇生惯养的公主一般的角色，男主则死承担着一位情绪价值的提供</summary>
      
    
    
    
    
    <category term="gal" scheme="http://example.com/tags/gal/"/>
    
  </entry>
  
  <entry>
    <title>24年gal收集</title>
    <link href="http://example.com/2024/06/30/24%E5%B9%B4gal%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2024/06/30/24%E5%B9%B4gal%E6%94%B6%E9%9B%86/</id>
    <published>2024-06-29T18:57:17.000Z</published>
    <updated>2024-07-24T21:02:18.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新打"><a href="#新打" class="headerlink" title="新打"></a>新打</h2><ol><li><p><a href="https://bangumi.tv/subject/43372">Dies irae ～Amantes amentes～</a></p></li><li><p><a href="https://bangumi.tv/subject/324325">私は女優になりたいの</a></p></li></ol><h2 id="在打"><a href="#在打" class="headerlink" title="在打"></a>在打</h2><ol><li><p><a href="https://bangumi.tv/subject/40445">J.Q.V 人類救済部～With love from isotope～</a></p></li><li><p><a href="https://bangumi.tv/subject/15920">水夏<del>SUIKA</del></a></p></li><li><p><a href="https://bangumi.tv/subject/137427">等間隔の黒い透明</a></p></li><li></li></ol><h2 id="复打"><a href="#复打" class="headerlink" title="复打"></a>复打</h2><ol><li><p><a href="https://bangumi.tv/subject/280440">死月妖花～四月八日～</a></p></li><li><p><a href="https://bangumi.tv/subject/7978">最果てのイマ</a></p></li><li><p><a href="https://bangumi.tv/subject/137992">西历2236年</a></p></li></ol><p>目を閉じて、心の声に耳を澄ませてみてください。<br>ただ、騒がしく心のなかでたくさんの声がしているのが分かれば十分です。<br>今行ったこれは実は一種の「瞑想」なんです。<br>どうですか、このときあなたは「今」を感じることができているはずです。<br>誰も「過去に聞いた歌」を口ずさんでいませんし「未来の予定」についても話していません。<br>あなたの耳に入ってくるのは外の音と、心臓の音と、鼻息の音だけです。<br>全て「いま」ここにある音です。<br>怠け者の３分間瞑想法<br>シオン「私の声は」<br>シオン「届かない」<br>届くべきではない。<br>心象素粒子<br>偉大なるドクター達へ<br>ユーレイ現象<br>死んだはずの人があたかも底にいるように感じる現象<br>ユーレイ現象　テレパシーの発現<br>梅雨<br>情報のフォーマット<br>HTとは「Holding Task」または「Holding&amp;Tasking」のことです。<br>こことの素粒子が私達の目に見えない道を行き来する現象。<br>テレパシーの原理<br>道ー＞道路<br>HTこー＞車<br>ハル　シオン、君は最初から、夢のような嘘だったのかも知れない<br>君にだけ何通かのメールは届いてないはずです<br>整个世界宛若一场幻梦，沉沦其中的人们，用日间残念缝补出了一个个残缺的故事。瑕瑜互现的世界化为完美的宝石，杂质如沉水的浮沫，不见踪影。<br>破碎的文字编织如网，笼络了过往的时流，抚摸着浓缩现时的结晶，连缀着称为未来的蜃景。<br>夢の中では夢のおかしさに気付けないから、誰かに言われるまではなにもおかしいと思えなかった。<br>私たちの現実は誰かの心の中の世界だったってこと。<br>称为梦境的是画笔，它大笔如椽，在纯白的画板上烙印下了世界的痕迹，在世界的边境。浓墨重彩的梦境与千篇一律的现实交织，模糊了虚拟与真实。<br>被诱骗参加了一场与机器人角力的音乐会，台下的人并不是因为我拥有天赋才来到这里，而是因为机器人能够弹奏得比我更好。<br>世间万物，宛若大树，岿然不动，anatagaushinattamonohaanatajishindesu<br>C.S.「君は真面目で、まっすくで、誠実で……だけど臆病な人です」<br>C.S.「だから、約東を破ってしまうことがとても怖いんです」<br>C.S.「ル—ルを破ってしまうことを恐れるんです」<br>C.S.「自分のなりたいようになんてなれないですよ」<br>C.S.「心理宇宙に来てまでみんな苦悩しているのが良い証拠じやないですか」</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新打&quot;&gt;&lt;a href=&quot;#新打&quot; class=&quot;headerlink&quot; title=&quot;新打&quot;&gt;&lt;/a&gt;新打&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://bangumi.tv/subject/43372&quot;&gt;Dies irae ～Amantes</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>洛谷做题日记</title>
    <link href="http://example.com/2024/06/20/%E6%B4%9B%E8%B0%B7%E5%81%9A%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2024/06/20/%E6%B4%9B%E8%B0%B7%E5%81%9A%E9%A2%98%E6%97%A5%E8%AE%B0/</id>
    <published>2024-06-19T18:11:41.000Z</published>
    <updated>2024-07-08T17:31:40.914Z</updated>
    
    
    
    
    
    <category term="洛谷" scheme="http://example.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>“刺青，以对抗自己没有生命力这件事情。”</title>
    <link href="http://example.com/2024/06/12/%E7%BA%B9%E8%BA%AB%E7%9A%84%E7%88%B1%E6%AC%B2%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2024/06/12/%E7%BA%B9%E8%BA%AB%E7%9A%84%E7%88%B1%E6%AC%B2%E6%9C%BA%E5%88%B6/</id>
    <published>2024-06-12T12:42:40.000Z</published>
    <updated>2024-07-08T17:30:51.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-自残的机制"><a href="#1-自残的机制" class="headerlink" title="1 自残的机制"></a>1 自残的机制</h2><h3 id="1-1-凯瑟琳·里奥特"><a href="#1-1-凯瑟琳·里奥特" class="headerlink" title="1.1  凯瑟琳·里奥特"></a>1.1  凯瑟琳·里奥特</h3><p>自残就是给自己做一个标记，不管是洞穿、划痕还是畸形处理，这些都是古来有之的。</p><ul><li><strong>洞穿：打耳洞、唇钉、鼻钉</strong></li><li><strong>划痕：纹身、烟头，划一刀</strong></li><li><strong>畸形处理：裹小脚、带很重的围脖</strong></li><li><strong>割礼</strong></li></ul><p><strong>为什么人会对自己的身体动刀呢？</strong></p><p>在石器时代，那个刀耕火种的年代，外出狩猎的男人，最开始是在忍受痛苦，有着伤疤，在后面男人发现，伤口象征着苦难、坚韧、功劳、荣耀。</p><p>男人发现，如果自己完好无伤地回来，，那收到的各种待遇都不如那些受伤回来的伙伴，于是男人便发生了倒错-即自己给自己制造一些伤口，以证明自己的阳刚之气，证明自己的最英勇的人，我值得你们的拜服。</p><p>伤口是一个能指，是一个象征，是进入某个关系的注册符。</p><h3 id="1-2-存在被抛入世，它的第一个注册符是什么？"><a href="#1-2-存在被抛入世，它的第一个注册符是什么？" class="headerlink" title="1.2 存在被抛入世，它的第一个注册符是什么？"></a>1.2 存在被抛入世，它的第一个注册符是什么？</h3><p>就是你的肚脐眼，肚脐眼是主体与母亲分离的一个标志。</p><p>分离是主题最初的，永恒的创伤。</p><h4 id="1-2-1-独生子女"><a href="#1-2-1-独生子女" class="headerlink" title="1.2.1 独生子女"></a>1.2.1 独生子女</h4><p>父母难以放开他们唯一的孩子</p><h4 id="1-2-2-社会原因"><a href="#1-2-2-社会原因" class="headerlink" title="1.2.2 社会原因"></a>1.2.2 社会原因</h4><p>孩子无法独立面对经济压力</p><h4 id="1-2-3-年轻人找不到自己的身份"><a href="#1-2-3-年轻人找不到自己的身份" class="headerlink" title="1.2.3 年轻人找不到自己的身份"></a>1.2.3 年轻人找不到自己的身份</h4><p>这个时候，年轻人就会用某种伤痕，来证明自己的身份。</p><p>闻一个人的名字，来证明自己爱ta。</p><p>看到某个卡通符号，就能认同自己是某个小团体的存在。</p><h3 id="1-3-凯瑟琳的一个示例"><a href="#1-3-凯瑟琳的一个示例" class="headerlink" title="1.3 凯瑟琳的一个示例"></a>1.3 凯瑟琳的一个示例</h3><h4 id="1-3-1-伤痕纹身是一个隐喻，一个症状"><a href="#1-3-1-伤痕纹身是一个隐喻，一个症状" class="headerlink" title="1.3.1 伤痕纹身是一个隐喻，一个症状"></a>1.3.1 伤痕纹身是一个隐喻，一个症状</h4><h4 id="1-3-2-案例"><a href="#1-3-2-案例" class="headerlink" title="1.3.2 案例"></a>1.3.2 案例</h4><p>三岁的时候，被养父母从孤儿院中领养，对亲生父母没有任何记忆，只知道母亲在她出生几个月的时候，就去世了。</p><p>她不能说出完整的情感，长期自残，有自杀的冲动。</p><p>自残行为体现着案例女主说，自己身份的疑问？</p><p>案主通过在身体上打标记，试图来控制自己的身体，获取自己身体的控制权。</p><p>案主会脱得越来越多，像是在展示某种战利品一样。</p><p>通过展示自己的伤口，实在诉说自己的痛苦，希望捕获他人的目光，能爱我，以及爱我的痛苦。</p><p>案主开始给分析师看她写的日记，分析师解读她的日记。</p><p>分析师在阅读她的伤口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-自残的机制&quot;&gt;&lt;a href=&quot;#1-自残的机制&quot; class=&quot;headerlink&quot; title=&quot;1 自残的机制&quot;&gt;&lt;/a&gt;1 自残的机制&lt;/h2&gt;&lt;h3 id=&quot;1-1-凯瑟琳·里奥特&quot;&gt;&lt;a href=&quot;#1-1-凯瑟琳·里奥特&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="精神分析" scheme="http://example.com/tags/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>移除链表元素</title>
    <link href="http://example.com/2024/06/12/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2024/06/12/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</id>
    <published>2024-06-12T07:07:17.000Z</published>
    <updated>2024-07-08T17:31:26.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线性表是什么"><a href="#1-线性表是什么" class="headerlink" title="1. 线性表是什么"></a>1. 线性表是什么</h2><h3 id="1-1线性表的抽象数据类型"><a href="#1-1线性表的抽象数据类型" class="headerlink" title="1.1线性表的抽象数据类型"></a>1.1线性表的抽象数据类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADT 线性表(List)</span><br><span class="line"><span class="function">Data</span></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function">    <span class="title">InitList</span><span class="params">(*L)</span></span>;<span class="comment">//初始化链表</span></span><br><span class="line"><span class="built_in">ListEmpty</span>(L);<span class="comment">//检查链表是否为空</span></span><br><span class="line"><span class="built_in">clearList</span>(*L);<span class="comment">//清空链表已有元素</span></span><br><span class="line"><span class="built_in">GetElem</span>(L,i,*e);<span class="comment">//将链表的第i个位置的元素的值赋给e，然后返回</span></span><br><span class="line"><span class="built_in">LocateElem</span>(L,e);<span class="comment">//查找L中是否有e，Yes：元素位置，No：0</span></span><br><span class="line"><span class="built_in">ListInsert</span>(*L,i,e);<span class="comment">//在L的第i个位置插入元素e</span></span><br><span class="line"><span class="built_in">ListDelete</span>(*L,i,*e);<span class="comment">//删除线性表的第i个元素，并用e返回其值</span></span><br><span class="line"><span class="built_in">ListLength</span>(L);<span class="comment">//返回线性表L的元素个数</span></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-1合并链表"><a href="#1-1-1合并链表" class="headerlink" title="1.1.1合并链表"></a>1.1.1合并链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">union</span><span class="params">(List *La,List Lb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a_len,b_len;</span><br><span class="line">    ElemType e;</span><br><span class="line">    a_len=<span class="built_in">ListLength</span>(La);</span><br><span class="line">    b_len=<span class="built_in">ListLength</span>(Lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Lb;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">GetElem</span>(Lb,i,e);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">LocateElem</span>(La,e,equal))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ListInsert</span>(La,++a_len,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//查找，然后将La中没有的元素添加到后面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是求合集的函数</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-线性表的顺序存储结构"><a href="#1-1-2-线性表的顺序存储结构" class="headerlink" title="1.1.2 线性表的顺序存储结构"></a>1.1.2 线性表的顺序存储结构</h4><p>用一段地址连续的内存单元，依次存储线性表的数据元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType data[MAXZIZE];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><ul><li>存储的起始位置：数组data</li><li>线性表的最大存储容量</li><li>线性表的当前长度</li></ul><h4 id="1-1-3-顺序存储结构的插入与删除"><a href="#1-1-3-顺序存储结构的插入与删除" class="headerlink" title="1.1.3 顺序存储结构的插入与删除"></a>1.1.3 顺序存储结构的插入与删除</h4><ul><li>插入</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length==<span class="number">0</span>||i&lt;<span class="number">1</span>||i&gt;L.length) <span class="keyword">return</span> Error;</span><br><span class="line">        *e=L.data[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length==MAXSIZE) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length+<span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--) L-&gt;date[k+<span class="number">1</span>]=L-&gt;data[k];</span><br><span class="line">    &#125;<span class="comment">//将目标位置和之后的元素全部向后移动一个位置</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>]=e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList *L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length==<span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length) <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e=L-&gt;date[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(i&lt;L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=i;k&lt;L-&gt;length;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k<span class="number">-1</span>]=L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//删完之后，对应元素后面的元素全部前移一格，然后data数组大小减少一个</span></span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-结点（Node）"><a href="#1-2-结点（Node）" class="headerlink" title="1.2 结点（Node）"></a>1.2 结点（Node）</h3><p><img src="https://p.sda1.dev/18/aa16fe49d763d936b9ce44b1569d0159/a0880ffb4ecd93c9a7e526015bfcb84f.png"></p><p>链表中的第一个结点的存储位置叫做头指针</p><p><img src="https://p.sda1.dev/18/e24ef5346e902d28b84e8ce5ed398ce2/2cb8d8b89841146ec2a8266b491eacdf.png"></p><h4 id="1-2-1-线性表链式存储结构代码描述"><a href="#1-2-1-线性表链式存储结构代码描述" class="headerlink" title="1.2.1 线性表链式存储结构代码描述"></a>1.2.1 线性表链式存储结构代码描述</h4><ul><li>如果链表为空表，则头结点的指针域为“空”</li></ul><p><img src="https://p.sda1.dev/18/0ea6255eb2b334fa8b3bad7fb350cb08/43d6cb960da89e117f050254b3fe8a8e.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/341f9a39bb60f151f17ec60d38e9a021/506858485659b7b7837169ab906b131e.png"></p><h4 id="1-2-2-单链表的读取"><a href="#1-2-2-单链表的读取" class="headerlink" title="1.2.2 单链表的读取"></a>1.2.2 单链表的读取</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;<span class="comment">//声明一个新结点</span></span><br><span class="line">    j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;<span class="comment">//用next指针将所有结点串联起来</span></span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i) <span class="keyword">return</span> ERROR;</span><br><span class="line">    *e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-单链表的插入和删除"><a href="#1-2-3-单链表的插入和删除" class="headerlink" title="1.2.3 单链表的插入和删除"></a>1.2.3 单链表的插入和删除</h4><ul><li>插入</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    LinkList p,s;</span><br><span class="line">    p=*L;</span><br><span class="line">    j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;<span class="comment">//将p叠加到目标元素的位置</span></span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i) <span class="keyword">return</span> ERROR;</span><br><span class="line">    s=<span class="keyword">new</span> LinkList;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/327a8926e7b97bb927aa24434286e8ef/37bdeb1162591f31909725168c75dce7.png"></p><ul><li>删除</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    LinkList p,s;</span><br><span class="line">    p=*L;</span><br><span class="line">    j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;<span class="comment">//将p叠加到目标元素的位置</span></span><br><span class="line">    <span class="keyword">if</span>(!(p-next)||j&gt;i) <span class="keyword">return</span> ERROR;</span><br><span class="line">    s=p-&gt;next;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="comment">//p-&gt;next=p-&gt;next-&gt;next也可以</span></span><br><span class="line">    *e=q-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/d9b13d452e51d62e01f0f62fed7a5fd9/e436c6cbece682c27c19e2bb7a5a086c.png"></p><h2 id="2-线性表是"><a href="#2-线性表是" class="headerlink" title="2. 线性表是"></a>2. 线性表是</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-线性表是什么&quot;&gt;&lt;a href=&quot;#1-线性表是什么&quot; class=&quot;headerlink&quot; title=&quot;1. 线性表是什么&quot;&gt;&lt;/a&gt;1. 线性表是什么&lt;/h2&gt;&lt;h3 id=&quot;1-1线性表的抽象数据类型&quot;&gt;&lt;a href=&quot;#1-1线性表的抽象数据类型&quot;</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="http://example.com/2024/06/11/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://example.com/2024/06/11/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</id>
    <published>2024-06-11T14:43:37.000Z</published>
    <updated>2024-07-08T17:30:32.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是螺旋矩阵"><a href="#什么是螺旋矩阵" class="headerlink" title="什么是螺旋矩阵"></a>什么是螺旋矩阵</h2><p>螺旋矩阵就是从四周向中心遍历矩阵的所有元素，没有实质上的算法内容，更多的是做一个模拟，所以螺旋矩阵可以归类为模拟题。</p><h2 id="螺旋矩阵的难点在哪里"><a href="#螺旋矩阵的难点在哪里" class="headerlink" title="螺旋矩阵的难点在哪里"></a>螺旋矩阵的难点在哪里</h2><p>螺旋矩阵作为一个模拟题，具有相当多的边界条件，在编写代码的时候，要把握好所有的边界，同时需要特判输入样例中的特殊情况。</p><p>在模拟螺旋居正的过程中，我们的一个基本思路是：</p><ol><li>输出矩阵的基本信息：rows&amp;cols</li><li>向右遍历</li><li>向下遍历</li><li>直到遍历完所有的元素</li></ol><p><img src="https://p.sda1.dev/18/5f73561576743bdf724935475bb82a49/QQ%E6%88%AA%E5%9B%BE20240611225505.png" alt="https://p.sda1.dev/18/5f73561576743bdf724935475bb82a49/QQ截图20240611225505.png"></p><h2 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h2><p>中等</p><p>相关标签</p><p>相关企业</p><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><p><img src="https://pic.leetcode-cn.com/1ad0fe88d15dc87643435eb7a17b368191725a44da4596722977e5798ace5b62-Picture2.png" alt="img"></p><p><img src="https://pic.leetcode-cn.com/193444cbca5529fcd1bafec33ef576fe1309690be2c0110de05868f4415a8723-Picture3.png" alt="img"></p><p><img src="https://pic.leetcode-cn.com/bca38a428306cb2aacc00513821e74150947ba241d9b7199bcad6c7e843a0105-Picture4.png" alt="img"></p><p><img src="https://pic.leetcode-cn.com/e5de1e07957417f13d9fae22e6fb18dd5331b50258f0297f00ba57d25651df4a-Picture5.png" alt="img"></p><p><img src="https://pic.leetcode-cn.com/2fde8dcd1481e390532995c02d3575ec9675a27390513c1540f40431dad7997a-Picture6.png" alt="img"></p><p><img src="https://pic.leetcode-cn.com/1950d4c8ab6b09b62b7d5900ece4d8d4be882abebd2417a3030d172aedbc304e-Picture7.png" alt="img"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> rows = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cols = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter the size of your matrix&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; rows &gt;&gt; cols;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrix_1</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols)); <span class="comment">// Init with size</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; matrix_2; <span class="comment">// This should be a 1D vector</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter your matrix&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">            cin &gt;&gt; matrix_1[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matrix_1.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = rows - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c = cols - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = d; i &lt;= c; ++i) matrix_2.<span class="built_in">push_back</span>(matrix_1[a][i]);</span><br><span class="line">        <span class="keyword">if</span> (++a &gt; b) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= b; ++i) matrix_2.<span class="built_in">push_back</span>(matrix_1[i][c]);</span><br><span class="line">        <span class="keyword">if</span> (--c &lt; d) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &gt;= d; --i) matrix_2.<span class="built_in">push_back</span>(matrix_1[b][i]);</span><br><span class="line">        <span class="keyword">if</span> (--b &lt; a) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = b; i &gt;= a; --i) matrix_2.<span class="built_in">push_back</span>(matrix_1[i][d]);</span><br><span class="line">        <span class="keyword">if</span> (++d &gt; c) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix_2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; matrix_2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>, t = <span class="number">0</span>, b = matrix.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) res.<span class="built_in">push_back</span>(matrix[t][i]); <span class="comment">// left to right</span></span><br><span class="line">            <span class="keyword">if</span> (++t &gt; b) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = t; i &lt;= b; i++) res.<span class="built_in">push_back</span>(matrix[i][r]); <span class="comment">// top to bottom</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; --r) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = r; i &gt;= l; i--) res.<span class="built_in">push_back</span>(matrix[b][i]); <span class="comment">// right to left</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; --b) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = b; i &gt;= t; i--) res.<span class="built_in">push_back</span>(matrix[i][l]); <span class="comment">// bottom to top</span></span><br><span class="line">            <span class="keyword">if</span> (++l &gt; r) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是螺旋矩阵&quot;&gt;&lt;a href=&quot;#什么是螺旋矩阵&quot; class=&quot;headerlink&quot; title=&quot;什么是螺旋矩阵&quot;&gt;&lt;/a&gt;什么是螺旋矩阵&lt;/h2&gt;&lt;p&gt;螺旋矩阵就是从四周向中心遍历矩阵的所有元素，没有实质上的算法内容，更多的是做一个模拟，所以螺旋矩阵可</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>对弗洛伊德的简介</title>
    <link href="http://example.com/2024/06/11/%E5%AF%B9%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E7%9A%84%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2024/06/11/%E5%AF%B9%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E7%9A%84%E7%AE%80%E4%BB%8B/</id>
    <published>2024-06-10T18:59:31.000Z</published>
    <updated>2024-07-08T17:30:17.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尼采：什么是真理？"><a href="#尼采：什么是真理？" class="headerlink" title="尼采：什么是真理？"></a>尼采：什么是真理？</h2><p>一群活动的转喻，隐喻和拟人法。</p><p>不能将尼采理解为反语言的人物，尼采其实预设了一种吐真剂的事物。</p><p>转喻和隐喻是诗学的东西。</p><p>这两个事物被雅各布森和研究Freud的Lacan给发扬光大了。</p><p>转喻要有前后相连的因果性。</p><p>千帆过境，隐喻要形成某种统一，转喻则不需要。</p><h2 id="Lacan的看法"><a href="#Lacan的看法" class="headerlink" title="Lacan的看法"></a>Lacan的看法</h2><h3 id="Freud的《梦的解析》"><a href="#Freud的《梦的解析》" class="headerlink" title="Freud的《梦的解析》"></a>Freud的《梦的解析》</h3><p>梦有它伪装的形式。</p><blockquote><p>梦是无意识，Freud和Lacan共享一个事实</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;尼采：什么是真理？&quot;&gt;&lt;a href=&quot;#尼采：什么是真理？&quot; class=&quot;headerlink&quot; title=&quot;尼采：什么是真理？&quot;&gt;&lt;/a&gt;尼采：什么是真理？&lt;/h2&gt;&lt;p&gt;一群活动的转喻，隐喻和拟人法。&lt;/p&gt;
&lt;p&gt;不能将尼采理解为反语言的人物，尼采其实</summary>
      
    
    
    
    
    <category term="精神分析" scheme="http://example.com/tags/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>西历2236</title>
    <link href="http://example.com/2024/06/11/%E8%A5%BF%E5%8E%862236/"/>
    <id>http://example.com/2024/06/11/%E8%A5%BF%E5%8E%862236/</id>
    <published>2024-06-10T17:05:01.000Z</published>
    <updated>2024-07-24T20:59:11.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="西暦-2236-年-用語集"><a href="#西暦-2236-年-用語集" class="headerlink" title="西暦 2236 年 用語集"></a>西暦 2236 年 用語集</h2><h3 id="A"><a href="#A" class="headerlink" title="[ A ]"></a>[ A ]</h3><p><strong>A.I</strong>.……Artificial Intelligence の略。→人工知能の項を参照。</p><blockquote><p><strong>A.I.:</strong> Abbreviation for Artificial Intelligence. </p></blockquote><h3 id="C"><a href="#C" class="headerlink" title="[ C ]"></a>[ C ]</h3><p><strong>C.S</strong>.……21 世紀の科学者。世界初の HT の科学的観測に立ち会った科学者の一人。HT 基礎構造理論を提唱した。晩年に失踪を遂げている。</p><blockquote><p><strong>C.S.:</strong> A 21st Century scientist. One of the scientists present when HT was first experimentally proven to exist. Advocated the HT Infrastructure Theory. Went missing in their final years</p></blockquote><p><strong>CLOSE</strong>……病名。Consciously Locks One’s Selective Elements syndrome の略。後天性のゲート障害でゲートを開けなくなることでテレパシー通信に支障をきたす症候群のこと。精神病のひとつだとされている。治療法は見つかっていない。</p><blockquote><p><strong>CLOSE:</strong> Condition name, standing for “Consciously Locks One’s Selective Elements Syndrome.” Refers to a syndrome which is an acquired Gate disorder that locks off one’s ability to access one’s Gate and hinders their ability to establish telepathic communication. Said to be a mental disorder with no known cures as of this date.</p></blockquote><h3 id="E"><a href="#E" class="headerlink" title="[ E ]"></a>[ E ]</h3><p><strong>EAJOS[elementary axiom jump of Shikine]</strong> ……21 世紀に発達した「間違い学問」における飛躍公理。イージョス。人工知能工学の世界では今なお新しい EAJOS が登録され続けている。</p><blockquote><p><strong>EAJOS:</strong> Abbreviation for “Elementary Axiom Jump of Studies.” Stands for axioms which make a “jump” or breakthrough in the “Improper Studies” developed in the 21st Century. EAJOS for short. In the artificial intelligence world, there are still new EAJOS being registered to this date</p></blockquote><p><strong>EMP[electromagnetic pulse]</strong> ……電磁パルス。強力な電磁衝撃波は電子回路などに損傷を与えることがある。核兵器の使用でも EMP が発生するので軍事用の電子装置には EMP 対策が施されているものも多い。</p><blockquote><p><strong>EMP:</strong> Short for electromagnetic pulse. An occurrence where powerful electromagnetic waves cause damage to electric circuits. The use of nuclear weapons would also create an EMP, so there are many pieces of military-use electronic equipment which have counter-EMP measures built into them.</p></blockquote><h3 id="H"><a href="#H" class="headerlink" title="[ H ]"></a>[ H ]</h3><p><strong>HT</strong>……Holding Task または Holding &amp; Taking の略。HT 現象。高次元空間で生ずる伝播現象、またはそれに関する理論。2033 年に C.S.によって提唱された HT 基礎構造理論によると、全ての物体には情報が通る道が存在し、その通路を介することで情報のやり取りができるという。ここで言う「情報」にあたるのが「HT 子」と呼ばれる粒子の波である。HT はプリ方向次元空間と相容れない、部分クラウド空間内での粒子の運動であるため HT 子を始め HT に関わる現象が物理学的に観測不可能(物理的に不可視)である。また、HT 基礎構造理論の記述には梅雨幾何学が用いられる。梅雨幾何学では空間を記述するために、我々に馴染みのあるユークリッド幾何学で定義される「次元」の概念を拡張している。HT 基礎構造理論では梅雨幾何学を用いることで、特殊な場合を除いて HT 現象が物理的に不可視であることを証明している。 また、これをきっかけにして 18 次元宇宙論などの多次元宇宙論が盛んに提唱された。一般にテレパシーと呼ばれるコミュニケーション方式は HT 子がヒトのゲートからゲートに伝わり処理されることで情報(言語、五感、思念など)を伝えることができるとしている。 ユーレイ現象とは深い関わりがあり、歴史的にはユーレイ現象の研究実験中に偶然開発されたのが HT である。 研究によると、もともと人類の脳には HT を司る感覚器官が存在していたがそれは近年発見されるまで退化していたものと考えられている。動物など、脳または神経中枢を有している生き物ともテレパシー通信が可能であることからテレパシーが言語をもたない生き物のコミュニケーション手段になっていることがわかった。これらのことから、人類を含むほとんどの生き物は古来テレパシーによってコミュニケーションをとっていたが人類のみ発達した言語に取って代わられ、やがてテレパシーによるコミュニケーションをしなくなったというのが通説になっている。HT が科学的に解釈される以前の超常現象(ユーレイ現象、第六感、シンクロニシティなど)の多くは HT 基礎構造理論によって合理的に説明できる。HT 開発……現代のヒトの脳の HT を司る器官は生まれながらには機能していないため、HT開発が必要になる。幼児に対し、親などがテレパシーによって外部からゲートを刺激することによって実現する。</p><blockquote><p><strong>HT:</strong> Short for Holding Task or Holding &amp; Taking. HT Phenomenon. A propagation phenomenon originating from higher-dimensional space, or the theory attached to it. In 2033, C.S. advocated the HT Infrastructure Theory. This theory states that there exists a path for data to pass through within all objects, and by using that path as an intermediary, we can hold and take in said data. The “data” in this case being the waves of particles referred to as “HT Particles.” Due to the movement of particles within a partial cloud space that is incompatible with a pre-directional dimension space, all HT-linked phenomenon, including HT Particles, are impossible to observe on a physics-level (as they are physically invisible.) In addition, Superposition Geometry has been utilized to describe the HT Infrastructure Theory. In Superposition Geometry, in order to describe a space, we expand upon the concept of a “dimension” as it is defined to us in the terms of the more familiar Euclidean Geometry. The HT Infrastructure Theory, by utilizing Euclidean Geometry, and excluding any special cases, proves that HT phenomena are physically invisible. In addition, springboarding off of this, multidimensional space theories such as the 18th Dimensional Space Theory have been actively advocated. The communication method known more commonly as Telepathy can convey data (I.E. language, any of the five senses, thoughts) by having HT Particles going from one human’s Gate to another and being processed as such. This is very much linked to ghostly phenomena, and, historically speaking, HT was developed by chance while conducting an experiment into the research of ghostly phenomena. Based on research, it is believed that the sensory organs to govern HT have always existed in the minds of the human race, but that they had remained degenerate until HT was discovered in recent years. Telepathy has become a means of communication for life-forms devoid of language, all due to the fact that telepathic communication is possible with animals, or basically life-forms that possess a brain or nerve center. Stemming from this, the commonly accepted theory is that almost all lifeforms, including humans, have communicated through telepathy since ancient times. Humans were the only ones to develop language and replace telepathy, eventually leading to the downfall of telepathic communication as a whole. A majority of paranormal phenomena that occurred before HT was scientifically explained can be logically explained via the HT Infrastructure Theory</p></blockquote><h3 id="N"><a href="#N" class="headerlink" title="[ N ]"></a>[ N ]</h3><p><strong>NSL 方式[No Signal of Locator method]</strong> ……無信号位置特定方式。GPS 通信の情報符号化方式の一つ。HT と水路に流れる情報を使って水路上にある目的地の位置を大まかに特定する。主に未開拓の水脈を発見するのに役立っている。HT を利用するので人間が水路からコードを読み取る(感じ取る)ことになるが、とても複雑で膨大な符号表を覚えていなければならない。また、HT を読み取る力や、未フォーマット情報を感じ取るセンスによって精度が大きく変わる。無信号というのはもともと、フォーマットされた位置情報の流れていない水路か位置情報を見つける方式だから。</p><blockquote><p><strong>NSL Method:</strong> Short for No Signal Locator Method. A method of coding GPS transmissions into usable data. By using the data coursing through canals and HT, it’s possible to get a general location of a specific point placed on the canalways. It mainly serves useful when trying to detect underdeveloped waterways. Since it utilizes HT, human beings will end up reading (sensing) the data from the canals, but they must remember a rather complicated and vast code sheet to do anything with it. In addition, the accuracy of this method will vary greatly based on one’s power to read HT and their sense for unformatted data. The reason why it is referred to as “no signal” is because the method finds location data and&#x2F;or canals that don’t have any formatted location data in them.</p></blockquote><h3 id="P"><a href="#P" class="headerlink" title="[ P ]"></a>[ P ]</h3><p>**panta rhei [パンタ・レイ]**……「万物は流転している」の意。古代ギリシャの哲学者ヘラクレイトスの言葉。</p><blockquote><p><strong>Panta Rhei:</strong> Greek for “all things are in flux,” a quote from the Ancient Greek philosopher, Heraclitus.</p></blockquote><h3 id="あ"><a href="#あ" class="headerlink" title="[ あ ]"></a>[ あ ]</h3><p>**アーカイヴ[Archive]**……アカシック・フォーンの原本が保管されている都市。しかし実際には地球上にそのような都市は見つかっておらず、架空の都市だと考えられている。アカシック・フォーンは実際にその文面が現代まで伝えられていることから存在を否定されることはないが、その原本の存在については懐疑的な考古学者も多い。アーカイヴに訪れたという人の証言も多数あるが噂の範疇でとどまっている。アーカイヴでは非常に膨大な数のアカシック・フォーンが大きな書棚に整頓されていると言われている。アカシック・フォーン[Akashic Phones]……パラダイムロスト以前の人類の学術的知識や文化、歴史と以後の地球の科学や歴史について記してある書籍のこと。どのくらいの期間書き連ねられたかは不明だが、その数は膨大で都市一つ分を埋め尽くす程だと言われていることから、かなり長い年月にわたって書き続けられたものだと考えられている。パラダイムロスト以前の地球の記録として残っているものはこのアカシック・フォーンしかない。世の中に出回っているものはアカシック・フォーンの原本を複写したものであり、現在ではそれをさらにデータ化したものが広く流通している。アカシック・フォーンの原本はアーカイヴという都市で保管されているという説がある。原本の表紙の色は赤色で統一されていると言わ</p><p>れている。</p><p>**アカクラ[赤倉]**……地名。ミョウコウにある地域で大きなスキー場がある。</p><blockquote><p><strong>Akakura:</strong> Place name. A certain area of Myoko and home to a rather large ski slope.</p></blockquote><p>**アルベルト・アインシュタイン[Albert Einstein]**……20 世紀の理論物理学者。光量子説、ブラウン運動、特殊相対性理論、一般相対性理論など物理学に非常に大きな影響を残した。意識的閉門症……→CLOSE の項を参照。</p><blockquote><p><strong>Albert Einstein:</strong> 20th-century theoretical physicist. Known for his huge impact on physics by introducing concepts such as Quantum Theory, Brownian Motion, and The Theory of Relativity.</p></blockquote><p><strong>違法ロボット[illegal robot]</strong> ……違法なロボット。特に、人間とそっくりな有機ヒューマノイドが出てきてからはロボットの表記義務を無視したロボットのことをいうようになった。</p><blockquote><p><strong>Illegal Robot(s):</strong> Refers to illegally-built robots that disregard the labelling requirements put in place since the rise of organic humanoids that look similar to human beings.</p></blockquote><p><strong>インターネット[Internet]</strong> ……個々のコンピュータネットワークを相互に結び拡張して世界的規模にまで広がったネットワークの集合体。</p><p><strong>ウィトゲンシュタイン[Ludwig Josef Johann Wittgenstein]</strong> ……オーストリア生まれの哲学者。『語りえぬものについては、沈黙しなければならない』という言葉で有名。裏情報……世間一般には流れない情報。信憑性は弱い。</p><p>**エーテル[aether, ether, luminiferous aether]**……主に 19 世紀までの物理学で、光が伝播するために必要だと思われていた媒質のこと。20 世紀には特殊相対性理論などの理論がエーテルの概念を用いずに確立されており、エーテルに関する物理学理論は今ではほとんど論じられていない。オイラーの公式[Euler’s formula] ……数学者レオンハルト・オイラーによって導かれた指数関数と三角関数の間に成り立つ定理のこと。</p><p>$e^{i\theta}&#x3D;\cos \theta+i\sin\theta$</p><p>とくに$\theta&#x3D;\pi$のときの</p><p>$e^{i\theta}+1&#x3D;0$</p><p>はオイラーの等式と呼ばれる。この式は対数を象徴する自然対数の底 e と三角関数を象徴するπ、虚数単位の i、乗法の単位元である 1、加法の単位元である 0 が一堂に会しており、様々な数学の分野の橋渡しをする。これがもっとも美しい公式と呼ばれるゆえんでもある。</p><blockquote><p>A theorem that establishes the relationship between exponential and trigonometric functions derived by mathematician Leonhard Euler.</p><p>$e^{i\theta}&#x3D;\cos \theta+i\sin\theta$</p><p>Special case θ&#x3D;π gives </p><p>$e^{i\theta}+1&#x3D;0$</p><p>The above is what is referred to as Euler’s identity. The special case puts together the base of natural logarithm ?, trigonometic constant π, imaginary unit i, multiplication unit element 1, and addition unit element 0, helping bridge several different fields of mathematics. That is also the reason why it is referred to as “The Most Beautiful Equation.”</p></blockquote><p><strong>オルタナティブ元素[Alternative elements]</strong> ……21 世紀に発見されたもう一つの化学元素。触媒の研究時に発見されたという逸話がある。プリ方向次元の虚×虚×虚の領域に存在していて特殊な環境以外でその単体を観測することはできない。普通の化学元素との化合物として普段は使われている。オルタナティブ高分子化合物はスマートツールスなどの柔らかいデバイスを形作っている。音声会話……テレパシー会話に対して、空気を媒体とした音を使って会話すること。</p><blockquote><p><strong>Alternative Elements:</strong> Alternative chemical elements discovered in the 21st Century. Anecdotes state that they were discovered when researching some catalyst. They exist in a times-three imaginary Pre-Directional Dimension, and cannot be observed outside of some </p><p>special circumstances. They are normally used in compounds with normal chemical elements. Alternative High Molecular Compounds help form the squishy devices known as Smart Tools and things like them</p></blockquote><h3 id="か"><a href="#か" class="headerlink" title="[ か ]"></a>[ か ]</h3><p><strong>カード目録</strong>……図書館において、蔵書の名前や内容などの情報を書き記したカードが集められている場所。探している図書を見つけるのに便利。</p><blockquote><p><strong>Card Catalogue:</strong> A place in libraries where cards that have information pertaining to the subjects and names of the books within it can be found.</p></blockquote><p>**鏡の国[The alternative world]**……詳細は不明拡張言語パック……スマートツールス等のコンピュータ端末において、初期出荷状態でプリインストールされている言語ライブラリに加えて他の地域で使われている言語ライブラリを追加インストールするためのパッケージプログラム。</p><blockquote><p><strong>The Alternative World (Looking-Glass World):</strong> The details of this world are unknown. </p></blockquote><p><strong>かけ算[multiplication]</strong> ……算術における乗法のこと。a を b 回足し合わせるという操作を a×b のように表現する。</p><blockquote><p><strong>Multiplication:</strong> Basic arithmetical multiplication. An operation of adding <em>a</em> for <em>b</em> amount of times would be expressed as <em>a x b</em>, for example</p></blockquote><p>**記憶媒体[Storage]**……HT の情報媒体のうち記憶能力に特化しているもののこと。HT 子の伝達速度が非常に遅いため情報を劣化させないまま暫く保存することができる。→モノリス</p><p>**ゲート[Gate]**……ヒトの脳にあると考えられているテレパシーに関する器官または機能、メカニズムのこと。ヒトがテレパシー通信をする際、ゲートが互いに開いていなければならない。テレパシーという現象がテレパシーによる再帰的な観測のみしかなされないという性質をもつため、ゲートがどのように働くのか詳しく解明されていないが、脳波や血流の調査から脳のどの辺りに所在するのかという目安はついている。動物など脳または神経中枢を有している生き物にもゲートがあると考えられているが、その真偽を確かめるのは原理的に不可能である。</p><blockquote><p><strong>Gate:</strong> The organ, function, and&#x2F;or mechanism related to telepathy perceived to be in the human brain. When people make a telepathic transmission, both of their Gates must be open. Due to the phenomenon known as telepathy having a nature which only allows it to be recursively observed via telepathy itself, and while there is no clear explanation on how Gates function, a rough estimate from observation of brainwaves and blood flow is that it lies somewhere in a part of the brain. It is assumed that life-forms with brains and&#x2F;or nerve centers such as animals also possess Gates, but it is theoretically impossible to prove that true or not. </p></blockquote><p><strong>月光</strong>……ベートーヴェンのピアノソナタ「月光」のこと。中でも第三楽章は難曲であるとされる。</p><blockquote><p><strong>Moonlight Sonata:</strong> Beethoven’s famous piano sonata, the third movement of which is said to be especially difficult to play correctly</p></blockquote><p><strong>五感</strong>……視覚、聴覚、嗅覚、味覚、触覚の五つの感覚。HT を含めた六感と区別されて使われることが多い。</p><p><strong>国際水路法</strong>……世界中に張り巡らされた水路を正しく運用するための法律群のこと。心の素粒子……HT 子のこと。人の心は HT 子の運動によって記述できる。</p><p>**個人向けスマートツールス用 A.I.秘書[Personal A.I. Secretary System]**……西暦 2230 年頃に普及し始めたスマートツールス用のシステム。第７世代の A.I.を基盤に作られていて、暮らしの中で人を支え、よきパートナーとなることを目的としている。ほとんど人間と同じ振る舞いをするため、情操教育にもよいとされていて、「最後まで味方でいてくれるパートナー」「途方に暮れたときに導いてくれるパートナー」などとして幼少期の精神発達を手助けする可能性があるという研究報告も出ている。略して PASS。</p><blockquote><p><strong>Personal A.I. Secretary System (PASS):</strong> A system for Smart Tools that started to come in style around 2230 A.D. Built by using 7th Generation A.I. as the base, its purpose is to support people in their daily lives and provide a faithful partner to them. Since it mimics human behavior well enough, it is said to be good for emotional development as well, with reports coming out that say that it has the possibility to help early childhood mental development by stating it as “a partner by your side till the very end” and “a partner that will show you the way when you’re lost.”</p></blockquote><h3 id="さ"><a href="#さ" class="headerlink" title="[ さ ]"></a><strong>[ さ ]</strong></h3><p><strong>さけないチーズ</strong>……有名な某商品以外のチーズのこと。</p><p>**酸化銅(Ⅱ) [copper(II) oxide]**……化学式 CuO で表される銅の酸化物。黒色。</p><blockquote><p><strong>Copper (II) Oxide:</strong> A copper oxide denoted by the chemical formula CuO. Black in color</p></blockquote><p><strong>次元置換説[Dimension Permutation Hypothesis]</strong> ……宇宙が多次元空間でその一部分が影として現実に現れるものだとしたときに影の落とし方(次元の置換)によって様々なアスペクトの異なる宇宙が同時に存在するという説。</p><blockquote><p><strong>Dimension Permutation Hypothesis:</strong> Also known as the Permutation of Axis Hypothesis. A hypothesis based on the universe being a multi-dimensional space, and the way you get rid of a shadow (dimensional substitution) once a shadow forms from part of said universe. This theory supports universes of differing aspects coexisting at the same time</p></blockquote><p>**シャルル・ペロー[Charles Perrault]**……「長靴をはいた猫」の著者。</p><blockquote><p><strong>Charles Perrault:</strong> Author of the story “Puss in Boots.” </p></blockquote><p><strong>浄水器</strong>……水路の水を常に清潔に保つために施設事に設置される機械。</p><p><strong>情報爆発[Information explosion]</strong> ……急速に増加する出版物やデータ、またその影響を指した言葉。特に水路で情報爆発が起こると中が情報で飽和してしまい、発信元の分からない情報で溢れるので通常の運用は不可能になる。</p><blockquote><p><strong>Information Overload:</strong> A word that refers to a sudden and quick increase in publications and data, and&#x2F;or the effects of such. To be specific, once an information overload occurs in the canals, the water becomes saturated with information, and overflows with information without a clear origin, making regular usage impossible</p></blockquote><p><strong>ショック療法[shock therapy]</strong> ……患者に対してある種の衝撃や身体的ストレスを一時的に与えることによって症状の改善をはかる方法。シリ・シオン[Siri Shion ]……アカシック・フォーンの著者として書籍にその名前が記されている。女性だと言い伝えられていて、その功績から「女神」「人類の英知の象徴」などと称えられることこともよくあるが、実在の人物であるかどうかは不明瞭である。</p><blockquote><p><strong>Shock Therapy:</strong> A method of therapy in which you temporarily expose a patient to a certain kind of “shock” or physical stress to improve their condition.</p></blockquote><p><strong>シリ・シオンの伝説</strong>……アカシック・フォーンの著者、シリ・シオンがパラダイムロスト以前の人類の学術的知識や文化、歴史をパラダイムロスト以後に伝えたという伝説のこと。パラダイムロストによって人類のもつ遺産は全て失われた。全てがゼロになった地球で彼女がパラダイムロスト以前の地球の諸々と以後の自然科学について記したものがアカシック・フォーンであるとされている。</p><blockquote></blockquote><p><strong>人工知能</strong>……A.I. 23 世紀ではヒトとほぼ同等の思考能力をもつ A.I. 、つまり強い A.I.が実現されている。その基礎理論は 21 世紀に発展した「間違い学問」によって構築されていて A.I.の性格は選択されている公理の種類で決まる。人間と対話ができるという特徴から多岐にわたる分野で利用されている。近年では有機ロボット工学の発展も相まって HT や生殖機能を除いたヒトの特徴をほぼ全て再現したヒューマノイドが登場したが、生命倫理団体や労働組合の痛烈な批判を受けて全ての人工知能やロボットは人間とは区別され、人権を与えず、それらが人工知能やロボットであることが明らかに分かるように表示することを義務づける法律が制定された。現在では個人向けスマートツールス用 A.I.秘書が広く普及しており、人間のよきパートナーとして生活に加わっている。</p><blockquote><p><strong>Artificial Intelligence (A.I.):</strong> In the 23rd century, advanced forms of A.I. that possess cognitive thought nearly on par with humans were created. The basic theory was constructed from the “Improper Studies” developed during the 21st Century, and their personalities are determined </p><p>by the variety of axiom selected for them. They are used in numerous different fields due to their ability to effectively communicate with humans. In recent years, along with the development of organic robotic engineering, humanoids that replicate nearly all human characteristics barring HT and reproductive capabilities have been ushered in, but after much scathing criticism from bioethics organizations and labor unions, laws have been established that obligate all artificial intelligence and robots to be distinct from humans, not given human rights, and presented in a way that makes them clearly recognizable as robots or A.I. Recently, Personal A.I. Secretary Systems have become very popular and have been integrated into people’s lives as reliable partners.</p></blockquote><p>**水路[Canal]**……HT のうち特にテレパシー運用を快適かつグローバルにするために世界中に設けられた情報媒体のこと。テレパシーのネットワーク。水路に手を浸すことで世界中の人々とテレパシー通信をすることができる。22 世紀に世界中に整備された。水路の形状は地域によって異なるが流れている水は WHO と WHTO の定めた世界基準に則って世界中で統一されている。</p><blockquote><p><strong>Canal:</strong> An information medium installed all over the world for the purpose for easy and global usage of HT—most importantly, telepathy. A veritable telepathic network. Dipping your hand in the waters of the canal gives you access to telepathic communication with people all over the world. By the 22th Century, service has hit every corner of the globe. The shape of canals differs from region to region, but the water that flows within is uniform across the world, conforming to the standards put in place by the WHO and WHTO.</p></blockquote><p>**スマートツールス[Smart Tools]**……23 世紀で一般的に普及している個人向けコンピュータ端末。狭義にはオルタナティブ高分子ゲルで構成され、トポロジカルに形を変えることが出来る端末のことを言う。近年注目されている「柔らかいデバイス」の代表格であり、分子構造の定義ファイルがあれば様々な形に固定できる。外膜を完全に閉じてしまう設計のため内蔵電池の交換が出来ず、その寿命は 5～6 年であるとされる。</p><blockquote><p><strong>Smart Tools:</strong> A type of personal computer terminal that has come into popularity in the 23rd century. Strictly speaking, a Smart Tool is a terminal capable of topological shape-shifting, composed from Alternative High Molecular gel. Extremely popular in recent years, they are referred to as being “soft devices”, and can turn into several different forms so long as the needed molecular construction definition files are present. Due to the outer membranes being completely sealed off, the inner battery is non-exchangeable, giving them a life-span of about 5-6 years.</p></blockquote><p><strong>生殖[reproduction]</strong> ……うみふやすこと。生物の個体が自分と同じ種の新しい個体を作り出すこと。</p><p>**セキガワ[関川]**……地名。ミョウコウにある地域で、大きな川が流れている。善光寺……長野市にある寺。古くから宗派の別を超えて広く信仰を集めている。</p><p><strong>ソフトモヒカン[soft Mohican]</strong> ……玉ねぎのような髪型。</p><h3 id="た"><a href="#た" class="headerlink" title="[ た ]"></a><strong>[ た ]</strong></h3><p><strong>太陽嵐[solar storm]</strong> ……非常に大規模な太陽フレアが発生した際に太陽風が爆発的に放射され、それが地球や周りの人工衛星などに被害をもたらす現象。強力な電磁波も放射されるので電子機器が壊れることもある。</p><p><strong>超高濃度情報爆発</strong>……HT 情報の高密度衝撃波。爆発的に大きなノイズ。</p><p>**繋ぐ[Connect]**……テレパシー会話をするということ。ゲートを互いに開いて情報通信が可能な状態にすること。 また、記憶媒体などから情報を読み取ること。</p><p><strong>ディスコース[Disc Course Shooter]</strong> ……ディスコースシューターのこと。23 世紀の公共交通機関。予約制で乗車駅と時間帯と降車駅を自由に指定できる。大きなディスクが特徴で、方向指示のリールに沿って飛行する。飛行原理はディスクにより力場を変容させて揚力を得る仕組み。また、それによって他の車両と接触しないようになっているため事故は開業以来ひとつも起きていない。</p><p><strong>哲学的ゾンビ</strong>……物理学的反応は普通の人間と全く同じだがクオリアを持っていない人間のこと。またそれをもとにした哲学的思考実験。</p><p><strong>テレパシー[Telepathy]</strong> ……→HT の項を参照。</p><p><strong>テレパシーする</strong>……テレパシー通信、会話をすること。</p><p><strong>トートロジー[tautology]</strong> ……トートロジーのこと。</p><p><strong>銅[Copper]</strong> ……元素記号 Cu で表される原子番号 29 番の元素。赤色の金属。</p><p><strong>東京タワー</strong>……国内最大の電波塔。</p><p><strong>図書館[library]</strong> ……図書や資料を収集、保管し、閲覧ができるようにした施設。23 世紀では一般的に電子書籍が本棚に並べられていて、データの貸し出しをする。一部の研究機関等の隣接施設では紙製の書籍が置いてある図書館や書籍庫がある。</p><h3 id="な"><a href="#な" class="headerlink" title="[ な ]"></a><strong>[ な ]</strong></h3><p><strong>ナガノ県ナガノ市[長野県長野市]</strong> ……地名。標高が高く寒冷な土地。虹[rainbow] ……同心円上に広がる七色の帯が空に突然現れる現象。虹は消えるときの帯の崩れ方に幾何学的な特徴を見せる。数式を用いると以下のように説明できる。<br>$$<br>&amp;&amp;x&#x3D;\cos^{n}(t)&amp;&amp;\\<br>&amp;&amp;y&#x3D;\sin^{n}(t)&amp;&amp;<br>\tag{*}<br>$$</p><p>1 番外側の円の半径を r&#x3D;R とすると、r&#x3D;R&#x2F;2 のところにある輪が( * )において n&#x3D;1 で表さ</p><p>れる。r が R&#x2F;2 より小さくなる従って n の値は㱣に無限に近づいていき、大きくなるに従って n の値は 0 に近づいていくようにして崩れて消えていく。神出鬼没な自然現象でほとんど観測されない。</p><p><strong>虹[rainbow]</strong> ……雨上がりに七色の円弧状の帯が現れる現象。雨粒によって太陽光がスペク</p><p>トル分解されることによって起こる現象。</p><p><strong>二分割可能モデル[separable type]</strong> ……第 5 世代のスマートツールスから登場したモデル</p><p>で、それまでとは違い本体を２つにまで分割することができる。第四世代までのスマートツールスは形を自在に変えることはできても分割することはできなかったので革新的な新技術である。</p><p><strong>ネクラ[根暗</strong>]……根っから性格が暗いこと。またもっぱら A.I.との会話に熱心なマニア達のことをさす言葉でもある。</p><p><strong>猫は獅子に頭を下げるのか？</strong>……C.S.の著書。21 世紀に執筆された。</p><h3 id="は"><a href="#は" class="headerlink" title="[ は ]"></a><strong>[ は ]</strong></h3><p><strong>梅雨幾何学[Superposition geometry]</strong> ……21 世紀に提唱された幾何学。空間をクラウド</p><p>という小さな広がりの重ね合わせで表現した。これによりそれまでの幾何学をいくつかのクラウドの組み合わせとして表せるほかに、一つの空間にいくつかの状態が重なり合った空間を表現できるようになった。</p><p>**パッド[Pad]**……薄い板状のものでディスプレイを搭載している。ディスプレイ上に様々な</p><p>文書や画像、動画を表示する。入力装置も豊富であり様々なメモが出来る。パッヘルベルのカノン……ヨハン・パッヘルベルが作曲したカノン様式作品。三つの声部と常奏低音によって構成されるとても有名な曲。バネの動き……単振動のこと。単振動は円運動の一次元成分を抽出した運動である。例えば円の半径を A、角速度をω、時刻を t とすると単振動する物体の位置 x は以下の式で表される。</p><p>$x&#x3D;Asin(ωt)$</p><p>また、これを二回微分すると $ ma&#x3D;-Kx $ という運動方程式が導ける。(m、a は運動する物体の質量と加速度、K は定数) 単振動をする物体は以上のようにかかる力が位置によって決まるのが特徴。バネ定数 k のバネに付けられた物体の運動方程式は ma&#x3D;-kx と表されるので、バネの動きも単振動である。</p><p>**パラダイムロスト[The Paradigm Lost]**……21 世紀中盤にあったとされる宇宙規模の大変</p><p>革。パラダイムロスト前後の記録はほとんど残されておらず、それがどのような変革だったのかについては様々な方法で検証がなされているがあまり明確には分かっていない。</p><p>**フォーマット[Format]**……テレパシー通信をする際に相互間で情報をやり取りできるように共通の表現方法を用いるというプロセス。テレパシー会話をする際、ほとんどの場合、情報を言語にフォーマットしてから行われる。フォーマットされていない情報は色や興奮状態などしか伝わらないため会話をするのには向いていないからである。言語をもたない生き物とテレパシー通信をする際は情報のフォーマットの仕方が全く違うため高度な情報交換は期待できない。</p><p>**プリ方向次元[pre directional axis]**…… 身の回りで起こる物理現象が含まれる 6 つの次元軸。またはその空間。幅、奥行き、高さとそれぞれの虚数軸を合わせた６本である。</p><p><strong>フロイト先生、ユング</strong>……ジークムント・フロイトとカール・グスタフ・ユングのこと。フロイトは夢や無意識の研究をした第一人者。ユングも集合的無意識の存在などを主張した。</p><p>**ヘラクレイトス[Hērakleitos]**……古代ギリシャの哲学者。「万物は流転している」という言</p><p>葉で有名。</p><h3 id="ま"><a href="#ま" class="headerlink" title="[ ま ]"></a><strong>[ ま ]</strong></h3><p>**ミョウコウ[妙高]**……地名。高原でスキーリゾート地として有名。妙高高原メッセ……妙高高原にある公共施設、公民館。ホールや図書館が市民に貸し出されている。</p><p>**モノリス[monolith]**……板状の記憶媒体。様々な材質から、様々な大きさのものが作られており、それによって記憶容量や情報引き出し率が変わる。同じ体積では表面に文字が書かれている物の方が無地の物よりも記憶容量が大きいので、多くのモノリスには聖書などの文章が書かれている。</p><h3 id="や"><a href="#や" class="headerlink" title="[ や ]"></a><strong>[ や ]</strong></h3><p>**ユーレイ現象[幽霊現象]**……生物の周りにある物体にその生物の情報が記憶され第三者がそ</p><p>の情報を後で読み取ったときにあたかもその生物がそこにいるのかのように錯覚する現象。特に死去した人間が生前の姿でそこに生きているように見える現象のことを言うことが多い。</p><p>依り代……ユーレイ現象において情報が蓄積している物体のこと。たいていの場合その亡骸</p><p>が依り代となる。</p><h3 id="ら"><a href="#ら" class="headerlink" title="[ ら ]"></a><strong>[ ら ]</strong></h3><p><strong>ラジオ[radio]</strong> ……電磁波を利用して放送局が報道や音楽を発信する音声放送。また、それ</p><p>を受信する機械。</p><p><strong>ラマーズ法[Lamaze Technique]</strong> ……無痛分娩法のひとつ。「ヒッ、ヒッ、フー」の呼吸法</p><p>でよく知られている。</p><p><strong>乱数放送[Numbers Station]</strong> ……数字、文字、あるいは単語などの羅列が流れる発信源不詳</p><p>のラジオ放送。特定の相手に対して情報を伝達する暗号放送だとされる。→ワンタイムパッドルイス・キャロル[Lewis Carroll]……イギリスの作家、数学者。「不思議の国のアリス」の著者</p><h3 id="わ"><a href="#わ" class="headerlink" title="[ わ ]"></a><strong>[ わ ]</strong></h3><p><strong>ワンタイムパッド[one time pad]</strong> ……乱数伴を一回だけ使う暗号の運用法。</p><p>[ 数字 ]</p><p><strong>18 次元宇宙論</strong>……宇宙が梅雨期科学で言う 18 次元空間であるとする理論。HT 基礎構造理</p><p>論が成立するためには宇宙は 18 次元空間でなければならなかったため C.S.が提唱した。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;西暦-2236-年-用語集&quot;&gt;&lt;a href=&quot;#西暦-2236-年-用語集&quot; class=&quot;headerlink&quot; title=&quot;西暦 2236 年 用語集&quot;&gt;&lt;/a&gt;西暦 2236 年 用語集&lt;/h2&gt;&lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class</summary>
      
    
    
    
    
    <category term="galgame" scheme="http://example.com/tags/galgame/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://example.com/2024/06/10/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://example.com/2024/06/10/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2024-06-10T13:29:24.000Z</published>
    <updated>2024-07-08T17:29:52.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="滑动窗口是什么"><a href="#滑动窗口是什么" class="headerlink" title="滑动窗口是什么"></a>滑动窗口是什么</h3><p>滑动窗口可以用来解决数组&#x2F;字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。</p><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><p>给定一个整数数组，计算长度为 ‘k’ 的连续子数组的最大总和。</p><p>输入：arr [] &#x3D; {100,200,300,400}</p><p>​k &#x3D; 2</p><p>输出：700</p><p>解释：300 + 400 &#x3D; 700</p><h5 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h5><p>争对这个问题，我可以采用信息利用率最低的一种方式，就是将所有元素遍历一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(&amp;arr,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>()-k+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cut=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">            &#123;</span><br><span class="line">             cut=cut+arr[i+j];   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> maxsum=<span class="built_in">max</span>(cut,mansum);</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">return</span> maxsum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码里所写的那样，这里的解题思路很简单，就是用i指针进行引导，j在i指针后，k区间内进行滑动，这里滑动完之后，会留下一个信息，怎么记录这一个信息呢？因为这道题让我输出的是单信息，不用考虑信息丢失，我们就有两种方法来解决它，第一个方法是开多余的空间来记录他，就是说启动一个动态数组来存储产生的k区间和值信息，第二个方式就是采用迭代更新的方式，因为我们需要的单数据只需要占用一个位置，我们只要每次把这个位置更新了就好了，要做到这一点其实也不难，只需要我们使用两个值来记录，一个是current值，一个是max值，max值在current值和之前的max值之间进行更新。</p><h5 id="滑动窗口解法"><a href="#滑动窗口解法" class="headerlink" title="滑动窗口解法"></a>滑动窗口解法</h5><p>滑动窗口法只用了很小的一点变化就让窗口得到累加，我们可以寻找到不同窗口之间的关系，我们可以发现，其实窗口之间的信息差距只有1,数据的相似性高达$\frac{k-1}{k}\times100%$，这样我们其实在没算出一次的窗口时，都为下一次做了k-1次的运算，如果我们每次都把这个k-1次运算利用上，那我们的时间复杂度可以大大降低，下面时时间复杂度优化的计算过程。<br>$$<br>原本的时间复杂度（暴力法）：\\<br>窗口的个数:n&#x3D;arr.size()-k\\<br>而我们每个窗口都要进行k次运算，实际上我们运算的次数就是\\<br>n_1&#x3D;n\times\ k&#x3D;(arr.size()-k)\times k\\<br>而当我们采用滑动窗口的解法，每个窗口的运算变化是，减去一个无效数字，增加一个有效数字，所以运算的次数变为\\<br>n_2&#x3D;n\times 2&#x3D;(arr.size()-k)\times 2\\<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:<span class="built_in">fun</span>(&amp;arr,<span class="type">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cut=<span class="number">0</span>,max_1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            max_1+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cut =max_1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cut+=arr[i]-arr[i-k];</span><br><span class="line">            max_1=<span class="built_in">max</span>(max_1,cut);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么要用滑动窗口"><a href="#为什么要用滑动窗口" class="headerlink" title="为什么要用滑动窗口"></a>为什么要用滑动窗口</h3><p>使用滑动窗口可以帮助我们公用已有的计算量，减少计算机运算的次数，提高程序运行效率。</p><h3 id="怎么使用滑动窗口"><a href="#怎么使用滑动窗口" class="headerlink" title="怎么使用滑动窗口"></a>怎么使用滑动窗口</h3><ul><li>判断是否存在大区间里套小区间</li><li>小区间之间是否具有共有的运算量</li></ul><p>需要注意的部分在于</p><ol><li>k区间在滑动窗口下的更新方法</li><li>算数列首项的思想。</li></ol><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h2><p>中等</p><p>相关标签</p><p>相关企业</p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 </p><p><strong>子数组</strong></p><p><code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><blockquote><p>注意：子数组意思是直接从数组里面取一个序列的元素，不是单个取值。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><h3 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxsum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag=nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cut=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.<span class="built_in">size</span>();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;nums.<span class="built_in">size</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    cut+=nums[i+j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(cut&gt;=target)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="built_in">min</span>(j+<span class="number">1</span>,flag);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==nums.<span class="built_in">size</span>()+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxsum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag=nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cut=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.<span class="built_in">size</span>();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cut+=nums[j];</span><br><span class="line">                <span class="keyword">while</span>(cut&gt;=target)</span><br><span class="line">                &#123;</span><br><span class="line">                    cut-=nums[i++];</span><br><span class="line">                    flag=<span class="built_in">min</span>(j-i+<span class="number">2</span>,flag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==nums.<span class="built_in">size</span>()+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里用到的滑动窗口其实就是不断调整子序列的起始位置和终止位置，从而得到我们想要的结果。</p><p><img src="https://pic.leetcode-cn.com/1659059220-jxMpDA-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组.gif"></p><p>滑动窗口的精髓在于移动k区间的起始位置，关键代码在于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(cut&gt;=target)</span><br><span class="line">&#123;</span><br><span class="line">    cut-=nums[i++];</span><br><span class="line">    flag=<span class="built_in">min</span>(flag,j+<span class="number">2</span>-i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以分析得知，要知道一个事实，能够取到目标值的k区间，其终点带来的效果不是超出这个target值，就是刚刚好。如果是超出这个值的话，我们只需要在前面减去多余的数字就可以了。</p><p>在这个更新起始位置的代码中，我们用到的更新手段是，调节起始位置的索引，从而改变我们字串的索引值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;滑动窗口&lt;/h2&gt;&lt;h3 id=&quot;滑动窗口是什么&quot;&gt;&lt;a href=&quot;#滑动窗口是什么&quot; class=&quot;headerlink&quot; title=&quot;滑动窗</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="http://example.com/2024/06/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/06/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-06-09T05:28:08.000Z</published>
    <updated>2024-07-24T21:04:41.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习深度学习关键是动手"><a href="#学习深度学习关键是动手" class="headerlink" title="学习深度学习关键是动手"></a>学习深度学习关键是动手</h1><ul><li><p>深度学习是人工智能最热的领域<br>核心是神经网络</p></li><li><p>神经网络是一门语言</p></li><li><p>应该像学习Python&#x2F;C++一样学习<br>深度学习</p></li><li><p>是一本深度学习教科书<br>覆盖90年代至今的重要模型<br>每一章是一个Jupyter记事本<br>提供所有模型的完整实现<br>在真实数据上运行</p></li><li><p>内容免费<br><a href="https://zh.d2l.ai/">https://zh.d2l.ai/</a></p></li></ul><h1 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h1><p><img src="https://p.sda1.dev/18/e1d8281a361048724981392b20f0a9d2/658e7da32893c9cb72be2a26c253b731.png"></p><h1 id="深度学习介绍"><a href="#深度学习介绍" class="headerlink" title="深度学习介绍"></a>深度学习介绍</h1><p><img src="https://p.sda1.dev/18/8c98b3a6f279b67f8f31326577d581b4/d7694b35c1af508b16dcbebc2576b8aa.png"></p><h3 id="深度学习在图片分类上做了一个比较大的突破"><a href="#深度学习在图片分类上做了一个比较大的突破" class="headerlink" title="深度学习在图片分类上做了一个比较大的突破"></a>深度学习在图片分类上做了一个比较大的突破</h3><p><img src="https://p.sda1.dev/18/8cbd5c4df6060e94046a03d5c25f8265/30c75ee8ea820476cc2bb547b47868c9.png"></p><h3 id="样式迁移"><a href="#样式迁移" class="headerlink" title="样式迁移"></a>样式迁移</h3><p><img src="https://p.sda1.dev/18/e340d0b1567d8f1a9bcf3ac3c1f1b70e/dc9dd8d06dce943a0f909686dc613ec3.png"></p><p><img src="https://p.sda1.dev/18/c2e4d086d2dec274f72276fb3ab4e4cc/d33a8b86464b087a47ed8d5d3e3f0915.png"></p><h3 id="物体分割与检测"><a href="#物体分割与检测" class="headerlink" title="物体分割与检测"></a>物体分割与检测</h3><p><img src="https://p.sda1.dev/18/74af2ceff7b1fe6b477c3d03c51d01d6/60e908870ecad4092a7d52ff5dd7b053.png"></p><h3 id="人脸合成"><a href="#人脸合成" class="headerlink" title="人脸合成"></a>人脸合成</h3><p><img src="https://p.sda1.dev/18/98bd587c25c781a4f90bcc7fdf465299/3d09e95877280b14076eeb8aac9f4099.png"></p><h3 id="文字生成图片"><a href="#文字生成图片" class="headerlink" title="文字生成图片"></a>文字生成图片</h3><p><img src="https://p.sda1.dev/18/56d3b65e6b09caf3a6c87ef7fe3e31e3/bd845fa882b0a5d56e90fa3533cacde2.png"></p><h3 id="文字生成模型"><a href="#文字生成模型" class="headerlink" title="文字生成模型"></a>文字生成模型</h3><p><img src="https://p.sda1.dev/18/a9bd75ed63ba6ad9cfc1133c01c54557/d2feabeaf3a3fec1ed774d7be84fa2b9.png"></p><p><img src="https://p.sda1.dev/18/9e7881a5b8cc2161e8a3b40a4fb5fbb6/c7aeff9e81f25910a85b0a581338edef.png"></p><h3 id="无人驾驶"><a href="#无人驾驶" class="headerlink" title="无人驾驶"></a>无人驾驶</h3><p><img src="https://p.sda1.dev/18/cf07ec1ce1331cf36ab8929b4085c3d7/a362f71ffdbd87e5e369257cb6c9e12c.png"></p><h3 id="案例研究-广告点击"><a href="#案例研究-广告点击" class="headerlink" title="案例研究-广告点击"></a>案例研究-广告点击</h3><p><img src="https://p.sda1.dev/18/13766acd778617da84ab3b415a968453/ccd275803bc40ce1a265f998590d37e1.png"></p><h4 id="预测与训练"><a href="#预测与训练" class="headerlink" title="预测与训练"></a>预测与训练</h4><p><img src="https://p.sda1.dev/18/947da527c1d602863e2d808d25fe8958/a78a1eb32f31ca0af263540cd86e7faf.png"></p><h4 id="完整的故事"><a href="#完整的故事" class="headerlink" title="完整的故事"></a>完整的故事</h4><p><img src="https://p.sda1.dev/18/bdc7f6e374c9b4c666e56d98f8144527/5f9208ed4f6086665f83f243f7f5b1ed.png"></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="模型的可解释性"><a href="#模型的可解释性" class="headerlink" title="模型的可解释性"></a>模型的可解释性</h3><h3 id="符号学能和机器学习融合起来吗"><a href="#符号学能和机器学习融合起来吗" class="headerlink" title="符号学能和机器学习融合起来吗"></a>符号学能和机器学习融合起来吗</h3><h3 id="数据科学家和专家的区别"><a href="#数据科学家和专家的区别" class="headerlink" title="数据科学家和专家的区别"></a>数据科学家和专家的区别</h3><p>数据科学家是把专家的问题变成一个任务，训练出还行的模型。</p><p>专家训练出精度非常高的模型。</p><h3 id="mac是否支持Pytorch"><a href="#mac是否支持Pytorch" class="headerlink" title="mac是否支持Pytorch"></a>mac是否支持Pytorch</h3><h3 id="自然语言处理进度"><a href="#自然语言处理进度" class="headerlink" title="自然语言处理进度"></a>自然语言处理进度</h3><h3 id="无人驾驶的误判"><a href="#无人驾驶的误判" class="headerlink" title="无人驾驶的误判"></a>无人驾驶的误判</h3><h2 id="动手安装"><a href="#动手安装" class="headerlink" title="动手安装"></a>动手安装</h2><ul><li><p>[可选]使用 conda&#x2F;miniconda环境<br>conda env remove d2l-zh<br>conda create -n -y d2l-zh python&#x3D;3.8 pip<br>conda activate d2l-zh</p></li><li><p>安装需要的包<br>pip install -y jupyter d2l torch torchvision</p></li><li><p>下载代码并执行<br>wget <a href="https://zh-v2.d2l.ai/d2l-zh.zip">https://zh-v2.d2l.ai/d2l-zh.zip</a><br>unzip d2l-zh.zip<br>jupyter notebook</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习深度学习关键是动手&quot;&gt;&lt;a href=&quot;#学习深度学习关键是动手&quot; class=&quot;headerlink&quot; title=&quot;学习深度学习关键是动手&quot;&gt;&lt;/a&gt;学习深度学习关键是动手&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;深度学习是人工智能最热的领域&lt;br&gt;核心是神经网络</summary>
      
    
    
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>有序数组的平方</title>
    <link href="http://example.com/2024/06/09/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <id>http://example.com/2024/06/09/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</id>
    <published>2024-06-09T04:07:56.000Z</published>
    <updated>2024-07-08T17:29:17.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h2><p>已解答</p><p>简单</p><p>相关标签</p><p>相关企业</p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><p><strong>进阶：</strong></p><ul><li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li></ul><h3 id="题解1（暴力运算，平方加排序）"><a href="#题解1（暴力运算，平方加排序）" class="headerlink" title="题解1（暴力运算，平方加排序）"></a>题解1（暴力运算，平方加排序）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            nums[i++] = nums[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题解2（开新数组-左右指针）"><a href="#题解2（开新数组-左右指针）" class="headerlink" title="题解2（开新数组+左右指针）"></a>题解2（开新数组+左右指针）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> b=a.<span class="built_in">size</span>()<span class="number">-1</span>,r=a.<span class="built_in">size</span>(),l=<span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(a.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[l])&lt;<span class="built_in">fabs</span>(a[r]))</span><br><span class="line">            &#123;</span><br><span class="line">                c[b]=a[r]*a[r];</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                c[b--]=a[l]*a[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/1631932242-BViXlX-977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif" alt="977.有序数组的平方.gif"></p><p>这个算法的思路是，新开一个数组用来记录信息，首位两个指针互相交换信息，有一个特点，其实就是，生成的新数组的值，其实应该从小到大，依次是从中间，左右之一取得的。</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;977-有序数组的平方&quot;&gt;&lt;a href=&quot;#977-有序数组的平方&quot; class=&quot;headerlink&quot; title=&quot;977. 有序数组的平方&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/squares-of-a-s</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>移除元素</title>
    <link href="http://example.com/2024/06/09/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2024/06/09/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2024-06-08T17:36:10.000Z</published>
    <updated>2024-07-08T17:28:50.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>数组其实是一个连续的内存空间，删除元素的基本原理是</p><ul><li>空间不变</li><li>计数方法会进行包装</li></ul><h3 id="erase函数"><a href="#erase函数" class="headerlink" title="erase函数"></a>erase函数</h3><p>在vector这个模板里面，就算使用了erase函数，原本申请的数组所占有的内存也是不发生变化的。</p><table><thead><tr><th>a[0]</th><th>a[1]</th><th>a[2]</th><th>a[3]</th><th>a[4]</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>1</td><td>2</td><td>3</td><td>5</td><td>5</td></tr></tbody></table><blockquote><p>删除4元素的原理，就是删除将下一位的元素那进来补位，然后通过某些手段，屏蔽接下来的元素，这样就可以形成一个新的数组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void erase(&amp;a,int b)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[i]==b)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=i;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">a[j-1]=a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复杂度O(i+(n-i))=O(n)</span><br></pre></td></tr></table></figure><h3 id="库函数的使用"><a href="#库函数的使用" class="headerlink" title="库函数的使用"></a>库函数的使用</h3><p>过于简单的题目（能用库函数一次解决的），就不要用库函数</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><blockquote><p>其实就是牺牲空间，获取时间，原理是这样的，我们采用额外的空间，比如再声明一个数组，这样一个数组有了之后，我们就可以采用快慢指针的方法，快指针的作用很简单，就是用于遍历数组中的所有元素，而慢指针的作用在于标度待删除元素的存在，确认数组在最后拥有的数组大小。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delete element(&amp;a,int b)</span><br><span class="line">&#123;</span><br><span class="line">int slow=0;</span><br><span class="line">vector&lt;int&gt;a_1;</span><br><span class="line">for(int fast=0;fast&lt;a.size();fast++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[fast]!=b) slow++;</span><br><span class="line">&#125;</span><br><span class="line">return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么是快慢指针"><a href="#什么是快慢指针" class="headerlink" title="什么是快慢指针"></a>什么是快慢指针</h4><p>快慢指针是双指针算法中的一种。不同于左右对撞指针，快慢指针中的两个指针是从同一侧但以不同的策略移动的指针。因此，两个指针中会有一个移动较快的快指针（fast）和一个较慢的慢指针（slow）。当快指针移动到数组的顶端时，停止遍历或进行新一轮遍历。</p><h4 id="为什么要用快慢指针"><a href="#为什么要用快慢指针" class="headerlink" title="为什么要用快慢指针"></a>为什么要用快慢指针</h4><p>使用双指针最实在的好处在于，我们的快指针相当于一个探路侠，它每走一步就会给予慢指针一个信息，让慢指针完成它的一部分工作，这样尽量让两个指针分工操作。</p><p>快指针的工作在前面进行，而快指针完成工作之后，对于它本身信息的传递，其实是不消耗空间，也不消耗时间的。我们可以利用信息的充分化利用，使得两个指针能干更多有意义的事情。</p><h4 id="快慢指针是怎么用的"><a href="#快慢指针是怎么用的" class="headerlink" title="快慢指针是怎么用的"></a>快慢指针是怎么用的</h4><ul><li>链表：在链表中，链表往往是单向链表，这个时候使用快慢指针，让它们朝着同一个方向进行迭代。</li><li>数组：数组利用的是索引的只是，在return值里面使用索引，便可以返回对应长度数组的值。</li></ul><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int val = ...; // 要移除的值</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的预期答案。</span><br><span class="line">                            // 它以不等于 val 的值排序。</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // 调用你的实现</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // 排序 nums 的前 k 个元素</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br><span class="line">解释：你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">解释：你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。</span><br><span class="line">注意这五个元素可以任意顺序返回。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;</span><br><span class="line">        int slow = 0;</span><br><span class="line">        for (int fast = 0; fast &lt; nums.size(); fast++) &#123;</span><br><span class="line">            if (nums[fast] != val)</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        return slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/496fb1149023399a4fb0163b1520cb4b/B7EC9CA94D6DF2BEB4E92654E268692E.png"></p><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h2><p>简单</p><p>相关标签</p><p>相关企业</p><p>提示</p><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int slow = 0;</span><br><span class="line">        for (int fast = 1; fast &lt; nums.size(); fast = fast + 1) &#123;</span><br><span class="line">            if (nums[slow] != nums[fast])</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        return slow + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p.sda1.dev/18/0310a04d7db7eb8d955b8c89eca22e95/0DEE598ED87C4D5522F12F9FD0F44B2C.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;数组其实是一个连续的内存空间，删除元素的基本原理是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空间不变&lt;/li&gt;
&lt;li&gt;计数方法会进行包装&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>n1考试错题</title>
    <link href="http://example.com/2024/06/04/n1%E8%80%83%E8%AF%95%E9%94%99%E9%A2%98/"/>
    <id>http://example.com/2024/06/04/n1%E8%80%83%E8%AF%95%E9%94%99%E9%A2%98/</id>
    <published>2024-06-04T03:35:38.000Z</published>
    <updated>2024-07-08T17:34:17.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2023年12月"><a href="#2023年12月" class="headerlink" title="2023年12月"></a>2023年12月</h2><ul><li><p>墓前「ぼぜん」</p><p>粗膳「そぜん」</p><p>呆然「ぼうぜん」</p><p>騒然「そうぜん」</p></li><li><p>諭す「さとす」</p><p>あやす「泣く子をあやす」</p><p>正す「ただす」「誤りを正す」</p><p>癒す「いやす」</p></li><li><p>秩序「ちつじょ」</p><p>全幅「ぜんぷく」</p><p>潜伏「せんぷく」</p></li><li><p>清らか「きよらか」：清らかな愛</p><p>朗らか「ほがらか」：ほがらかなひと</p><p>滑らか「なめらか」：滑らかな肌</p></li><li><p>心境「しんきょう」：静かな心境</p><p>人口「じんこう」：</p><p>振興「しんこう」：産業を進行する</p></li><li><p>自制（じせい）：自律。自己の食欲を自制するのは難しいことです。</p><p>自立（じりつ）：独立。彼は若い頃から自立して生活しています。</p><p>自重（じじゅう）：自尊。彼は自分の言動に自重を持つべきです。</p><p>自任（じにん）：自负。彼は自分の能力を自任しすぎている。</p></li><li><p>返上（へんじょう）</p><p>還元（かんげん）：（化学）还原；还原，返回本来面目（包含以其他形式将利益还原转化的语感）</p><p>配給（はいきゅう）：配给，配售。</p><p>譲渡（じょうと）：转让，让出。</p></li><li><p>びっしょり：湿透的。雨の中を歩いていたら、びっしょりになりました。</p><p>どっさり：大量的。彼は野菜をどっさりと買った。</p><p>どんより：昏暗的。天気がどんよりとしていて、外に出る気分ではありません。</p><p>ぐったり：筋疲力尽的。長い山登りの後、彼はぐったりと倒れました。</p></li><li><p>ノイズ：噪音。ノイズの多い環境で作業するのは難しいです。在噪音多的环境下工作是困难的。</p><p>ロック：锁死，上锁。ドアをロックしてください。请把门锁上。</p><p>タブー：禁忌。そのトピックは家庭内でのタブーとされています。这个话题在家庭中是禁忌的。</p><p>ネック：颈部、障碍。彼はネックのけがを負った。他颈部受伤了。</p></li><li><p>発散（はっさん）：发散、释放。ストレスを発散するためには、運動が役立つことがあります。运动有时可以帮助释放压力。</p><p>発射（はっしゃ）：发射。ロケットは成功裏に発射されました。火箭成功发射了。</p><p>流出（りゅうしゅつ）：流出。この川は毎日多くの水を海に流出させています。这条河每天都向海洋流出大量的水。</p><p>排出（はいしゅつ）：排出。工場は有害な化学物質を排出している可能性があります。工厂可能会排放有害化学物质。</p></li><li><p>紛らわしい（まぎらわしい）：令人困惑的。彼の言葉は紛らわしいので、誰もが理解できません。他的话令人困惑，没有人能理解。</p><p>もっともらしい：貌似真实的。彼の説明はもっともらしいが、実際には事実とは異なる可能性があります。他的解释看似真实，但实际上可能与事实不符。</p><p>図々しい：厚颜无耻的。彼は図々しい態度で他人のものを取りました。他用厚颜无耻的态度拿走了别人的东西。</p><p>なれなれしい：过于亲近的。彼は初対面の人に対してなれなれしい態度をとることがあります。他有时对初次见面的人表现出过于亲近的态度。</p></li><li><p>行き詰まる（いきつまる）：陷入困境。プロジェクトは予算不足のため行き詰まりました。由于预算不足，项目陷入困境。</p><p>行き着く（いきつく）：最终达到。彼は長い旅の末に夢の国に行き着きました。在漫长的旅途后，他最终到达了梦寐以求的国度。</p><p>行き届く（いきとどく）：充分完成。彼は仕事を完璧に行き届けることに誇りを持っています。他以完美地完成工作为荣。</p></li><li><p>懸念（けねん）：担忧。彼は試験の結果を懸念しています。他担忧考试的结果。</p><p>期待（きたい）：期待。新しいプロジェクトに対する期待が高まっています。对于新项目有着高度期待。</p><p>心配（しんぱい）：担心。彼女は友達の安全を心配しています。她担心朋友的安全。</p></li><li><p>予想（よそう）：预期。天気予報によると、明日は雨が予想されています。根据天气预报，预计明天会下雨。</p><p>重視（じゅうし）：重视。この会社は従業員の意見を重視しています。这家公司重视员工的意见。</p></li><li><p>やつれる：憔悴。忙しい仕事のため、彼は最近やつれているように見えます。由于繁忙的工作，他最近看起来憔悴。</p><p>遠慮（えんりょ）：克制。彼女は遠慮せずに自分の意見を述べました。她毫不犹豫地表达了自己的意见。</p><p>張り切る（はりきる）：充满干劲。新しいプロジェクトに取り組むため、彼は張り切っています。为了参与新项目，他充满干劲。</p><p>やせ衰える（やせおとろえる）：瘦弱衰落。彼は病気でやせ衰えています。他因疾病而瘦弱衰落。</p></li><li><p>感動（かんどう）：感动。その映画は多くの人々を深く感動させました。这部电影深深感动了许多人。</p><p>奮闘（ふんとう）する：努力奋斗。彼は困難に立ち向かい、必死に頑張っています。他面对困难，拼命努力。</p><p>じっと我慢（がまん）する：默默忍耐。彼は長い間痛みを我慢していた。他默默忍受了很长时间的疼痛。</p><p>必死に頑張る（ひっしにがんばる）：全力以赴。試験前に彼は必死に頑張った。考试前，他全力以赴。</p></li><li><p>激しく怒る（はげしくおこる）：愤怒地。彼は激しく怒り、部屋を出て行った。他愤怒地离开了房间。</p><p>焦って取り組む（あせってとりくむ）：匆忙应对。プロジェクトの最後の瞬間になって、私たちは焦って取り組んだ。在项目的最后一刻，我们匆忙应对。</p><p>不慮（ふりょ）：意外。不慮の事故で車が損傷しました。车辆在意外事故中受损。</p></li><li><p>仕方ない（しかたない）：没办法，无可奈何。雨が降ってピクニックは中止になった。仕方ないね。因为下雨，我们的野餐取消了。没办法啦。</p><p>あり得ない（ありえない）：不可能，难以置信。その話はあり得ない。信じられない。那个故事不可能发生。难以置信。</p><p>思いがけない（おもいがけない）：出乎意料之外。彼からのプレゼントは思いがけないものでした。他送的礼物是出乎意料之外的东西。</p><p>情けない（なさけない）：无情；可怜；可耻。彼の状況は本当に情けない。他的情况真是可怜。</p></li><li><p>根こそぎ：全部，一点不留地。根こそぎ持って行く。全部拿走。</p><p>すべて：全部，一切。すべての問題を解決しました。我们解决了所有的问题。</p><p>だいぶ：相当，颇。この町はだいぶ変わりました。这个城镇发生了相当大的变化。</p></li><li><p>一度に（いちどに）：一次，同时。すべての仕事を一度に終わらせるのは難しい。一次完成所有工作很难。</p><p>次々と（つぎつぎと）：一个接一个，依次。彼らは次々と部屋に入ってきた。他们一个接一个地进入了房间。</p></li><li><p>没頭する（ぼっとうする）：全身心投入。新しい趣味に没頭することで、彼はストレスを解消しています。通过全身心投入新的兴趣爱好，他减轻了压力。</p><p>飽きる（あきる）：厌烦，腻烦。彼は同じ食事に飽きてしまった。他对相同的食物感到厌烦。</p><p>憧れる（あこがれる）：向往，崇拜。彼女は映画スターに憧れています。她向往成为电影明星。</p></li><li><p>不満を持つ（ふまんをもつ）：感到不满。彼は給料に不満を持っている。他对工资感到不满。</p><p>熱中する（ねっちゅうする）：热衷，沉迷。彼はゲームに熱中している。他沉迷于游戏。</p></li><li><p>兆し（きざし）：迹象。経済の兆しは依然として良くない。经济的迹象仍然不容乐观。</p><p>予定（よてい）：计划。明日の予定を教えてもらえますか。能告诉我明天的计划吗？</p><p>見通し（みとおし）：瞭望，眺望。（遠くの方まで見えること。）見通しのきく場所。眼界开阔的地方。预料，预见；推测。（物事のなりゆきや、未来の事まで予測すること。）これからの見通しがつかない。今后如何很难预料。</p><p>予想（よそう）：预测。専門家は来年の経済成長について予想を出しました。专家们对明年的经济增长进行了预测。</p></li><li><p>収容（しゅうよう）收容，容纳。</p><p>収納（しゅうのう）：收纳；收藏。（国や地方公共団体が、租税その他の現金を受領すること。）国庫に収納する。收入国库。</p><p>収録（しゅうろく）：搜集，收录。刊载，刊登。载入书籍、报刊等。新聞に収録する。刊登在报上。</p></li><li><p>ビタミンに富む（とむ）：富裕。（財産が増える。）丰富。（たくさん持っている。）資源に富んでいる国。资源丰富的国家。</p></li><li><p>冴える（さえる）：寒冷，清澈，鲜明。清爽；清醒。目がさえてなかなか眠れない。精神兴奋根本睡不着。</p></li><li><p>厳守する（げんしゅする）：严守，严格遵守。（きびしく守ること。）秘密を厳守する。严守秘密。</p></li><li><p>豊か（ゆたか）：丰富。豊かな才能。丰富的才能。</p></li><li><p>喝了咖啡后，精神兴奋根本睡不着。</p></li><li><p>明確（めいかく）：明确。（明らかで確実なこと。）明確な判断を下す。做出明确的判断。</p></li><li><p>激烈，猛烈。痛烈に叱る。激烈地训斥。</p></li><li><p>残酷（ざんこく）：残酷，残忍，冷酷。残酷なしうちを受ける。受到残酷的对待。</p></li><li><p>過酷（かこく）：严酷，苛刻，残酷。（厳しすぎるさま。）過酷な条件。苛刻的条件。</p></li><li><p>猛烈（もうれつ）：猛烈，凶猛，激烈。猛烈に戦う。激烈战斗。</p></li><li><p>完結（かんけつ）：完成；完结；结束。この仕事が完結したらつぎの仕事にかかる。这一项工作完成后，就开始下一项工作。</p></li><li><p>終わる（おわる）：完，完毕，结束，告终，终了。（続いていた物事がしまいになる。）授業が終わる。下课</p></li><li><p>完成する（かんせいする）：完成，竣工。6 月に完成の予定。预定六月完成。</p></li><li><p>完了（かんりょう）：完结，完了。（完全に終わること。）仕事の完了を急ぐ。急于赶完工作。</p></li><li><p>脆い（もろい）：脆，易坏、脆弱。ガラス食器はきれいだが脆い。玻璃餐具很漂亮但是容易坏。</p></li><li><p>弱い（よわい）：弱，脆弱。彼は体力が弱い。他体力弱。</p></li><li><p>浅い（あさい）：浅，不深。この川は浅いところが多い。这条河有很多浅水区。</p></li><li><p>失われる（うしなわれる）：丢失，失落，丧失，失去。命を失う。丧命。</p></li><li><p>真剣（しんけん）：认真。そのもの前接形容词词干、名词，表示那个东西本身。</p></li><li><p>真剣（しんけん）で：中顿，后接句子</p></li><li><p>真剣（しんけん）に：变副词</p></li><li><p>真剣（しんけん）な：后接名词</p></li><li><p>する間：在~期间，状态一直持续</p></li><li><p>する限り：表示动作的限制条件， “只要”</p></li><li><p>するうちに：在~期间，发生了自然而然的变化</p></li><li><p>するとしたら：要是~的话，假定</p></li><li><p>できずにいたなら：ず表否定，いた处于某种状态，なら假定，要是不能的话</p></li><li><p>できずにいたところ：ところ表时候，即在不能打包行李的时候</p></li><li><p>できないようにしたら：ようにする坚持做、尽量做，たら假定，要是尽量不能的话</p></li><li><p>できないようにしたところ：在尽量不能的时候，语义不通</p></li><li><p>降ることがあるかのように：ことがある一般现在时，通常有这样的事情。かのように宛如、好像。好像（通常）会有下雪一样，语义不通</p></li><li><p>降るなんて思えないぐらい：なんて，惊讶感叹轻蔑的感情，“什么的”。思えない可能性的否定，不能认为。ぐらい程度。不能认为要下雪什么的程度，语义不通</p></li><li><p>降るとは思わないように：とは意外，ように好像。好像不觉得下雪了一样，与原文不搭配</p></li><li><p>降るんじゃないかというぐらい：んじゃないか委婉陈述意见，好像要下雪那种程度的冷 </p></li><li><p>歩くほかない：只好走</p></li><li><p>歩けなくもない：不是不能走</p></li><li><p>歩いてはいられない：不能再走了，迫于某种情况不能再继续以前的状态。</p></li><li><p>歩けるわけがない：强烈否定，不可能走得了。</p></li><li><p>おいでくださいました：尊敬語，表示“来”</p></li><li><p>お越しいただきました：谦让语，表示“来”</p></li><li><p>ご参加いただきました：谦让语，表示“参加”</p></li><li><p>ご覧くださいました：尊敬语，表示“看”</p></li><li><p>するつもりでいる：打算做某事，でいる处于某种状态。</p></li><li><p>してくるつもりだ：てくる，以前到现在的变化趋势，但时态为将来时，即未来会打算去海外旅行起来。</p></li><li><p>したつもりになれる：たつもり假装、就当作，なれる可能形，可以假装去了海外旅行。</p></li><li><p>するつもりになっていた：ていた过去持续的状态，即之前有过此种打算</p></li></ul><h2 id="2023年7月"><a href="#2023年7月" class="headerlink" title="2023年7月"></a>2023年7月</h2><ul><li><p>かんどく：干扰项<br>がんどく(玩読)：阅读,精读<br>かんとく(監督)：监督；导演；教练，领队<br>がんとく：干扰项</p></li><li><p>はしょう：干扰项<br>はせい（派生）：派生<br>はっしょう（発祥）：发源，发祥<br>はっせい（発生）：发生；出现</p></li><li><p>ぼけて（惚ける）： (头脑)迟钝；装糊涂；假装不知道<br>かけて（駆ける·欠ける·掛ける·架ける·賭ける）：跑；缺少，欠；挂上，戴上；架上；赌博<br>ぬけて（抜ける）：脱落；漏掉；跑气；穿过；退出，脱离<br>すけて（透ける）：透过，看见</p></li><li><p>いどむ（挑む）：挑战，挑衅；<br>はげむ（励む）：鼓励<br>なやむ（悩む）：烦恼<br>のぞむ（臨む）：面临；遭受；担任；临到</p></li><li><p>じょうじつに（情実）：情面，私情<br>にょじつに（如実に）：如实地</p></li><li><p>保護：保护<br>防御：防御<br>警備：警备，警戒；戒备；警卫<br>支援：支援</p></li><li><p>従順（じゅうじゅん）に：顺从；听话；温顺，驯顺，驯服<br>厳正（げんせい）に：严格<br>忠実（ちゅうじつ）に：忠诚，忠实；忠实于，如实，照原样<br>均等（きんとう）に：均等，均匀，平均</p></li><li><p>めくる：翻（书，被子等）<br>掬う（すくう）：抄取；捞取；掬取，捧；舀；撇<br>挟む（はさむ）：插入；夹住；隔；插（话）<br>摘む（つまむ）：（用手指）捏，夹；吃；摘取（要点）</p></li><li><p>志望：志愿，愿望。希望将来能实现某种志向的心愿。<br>本意：本意，本心；真心，真意；本来的愿望，初衷<br>欲求：欲望，希求<br>念願：（多年来的）心愿，愿望</p></li><li><p>ポーズ：【pose】姿势，样子，架子；【pause】暂停，停顿<br>カーソル：计算尺的游标，指针，指示器：光标<br>ピント：（相机的）焦点，焦距；（说话的）中心，要点<br>テンポ：（音乐的）拍子；（事情的发展）速度</p></li><li><p>乗り込む：乘上，坐进（交通工具）；（乘坐交通工具）进入，开进<br>食い込む：深入，陷入；侵入，侵犯；挤进<br>駆け込む：跑进，跑入里面<br>追い込む：赶进，撵进；逼入，使陷入（困境）</p></li><li><p>てっきり：满以为是，原以为一定是<br>きっぱり：断然，干脆，斩钉截铁，清楚，明确<br>しっかり：结实，紧固，连接紧密<br>はっきり：清楚，明确；（头脑）清醒</p></li><li><p>払う（はらう）：去除；支付；处理掉；驱赶<br>預かる（あずかる）：暂存，（代人）保管；担任，管理<br>返却する（へんきゃく）：还，归还，退还<br>用意する（ようい）：准备，预备；注意，警惕，防备</p></li><li><p>爽やか（さわやかな）：（天气）清爽，爽朗；（心情）爽快<br>穏やか（おだやか）：平稳；絶静；平静；温和；安详<br>細やか（こまやかな）：浓厚，细腻，深厚<br>軽やか（かろやかな）：（动作、节奏等）轻快</p></li><li><p>スポット：【spot】场所地点；污点，斑点；聚光灯<br>場所（ばしょ）：地方，场所<br>商品（しょうひん）：商品，货品<br>方法（ほうほう）：方法，办法<br>時期（じき）：时期，时候；期间</p></li><li><p>拮抗（きっこう）：较量，对抗，颉颃<br>差がある：有差距<br>差がない：没有差距<br>高くなっている：高的<br>低くなっている：低的</p></li><li><p>風当たり：受到的非难、压力；风势<br>要求（ようきゅう）：要求<br>信頼（しんらい）：信赖<br>期待（きたい）：期待，期望，希望，指望<br>批判（ひはん）：批判，批判，评论；指正</p></li><li><p>あどけない：天真无邪，天真烂漫，稚气<br>不安そうな（ふあんそうな）：不安的<br>真剣な（しんけんな）：认真的，一丝不苟的<br>無邪気な（むじゃきな）：天真无邪，单纯，天真，纯朴<br>羨ましそうな（うらやましそうな）：羡慕的，眼红的</p></li><li><p>解析：出荷：发货，装载货物；上市，出货<br>应该用：出演（しゅつえん）：演出；出场，登台。<br>应该用：出店（でみせ&#x2F;しゅってん）：分号，分店。由总店分到别处去的店。<br>应该用：出品（しゅっぴん）：展出作品，展出产品。</p></li><li><p>解析：譲る：让给，转让；谦让，让步<br>应该用：配送（はいそう）：发送；分发，分送<br>应该用：渡す（わたす）：交，付；给，交给<br>应该用：届ける（とどける）：送到；送给；送去；投递，递送</p></li><li><p>底力（そこぢから）：潜力，底力，深厚的力量。（底にひそんでいて、いざという時に発揮する強い力や能力。）<br>应该用：握力（あくりょく）：握力。<br>句意：他虽然看上去不起眼，但在重要场合的潜力很大。<br>应该用：超能力（ちょうのうりょく）：超能力。<br>应该用：能力（のうりょく）：能力。</p></li><li><p>巨大，极大<br>应该用：大規模（だいきぼ）：大规模，规模宏大。<br>应该用：高大（こうだい）：高大。<br>应该用：巨大（きょだい）：巨大。<br>句意：那个歌手，在年轻人中有着极高的人气。</p></li><li><p>手痛い：「ミスなどが」重大，严重<br>句意：在工作中犯了重大错误，给周围的人添麻烦了。<br>应该用：激しい（はげしい）：激烈，强烈。<br>应该用：手強い（てごわい）：不好对付的，不易击败的。<br>应该用：手早い（てばやい）：敏捷的。麻利，手快。</p></li><li><p>誘致：招徕，招揽，吸引<br>应该用：誘導（ゆうどう）：引导，诱导，导航<br>应该用：募集（ぼしゅう）：募集；征募；招募。<br>应该用：導入（どうにゅう）：导入，引进，引入，输入。</p></li><li><p>~を（も）満足させる：让……（也）感到满足</p></li><li><p>いつか：曾经，以前，过去不知何时；不知不觉，无意之中，不知何时；（未来）早晚，迟早，改日，不久。</p></li><li><p>につき：关于… 每； 以…的理由。<br>に至るまで：至…；（直）到…。从…甚至到…全部。强调上限，出现的名词常带有极端的含义。<br>をもって：以…，以此…。写明开始、结束、界线点。一般用于会议等正式场合的发言。作为书面语时是文件中使用的较为生硬的表达方式。<br>を皮切りに： 以…为开端。</p></li><li><p>誘われるまま：「<del>まま」表示顺其自然，听其自然；随心所欲，自由；无论怎样都……任凭……都无所谓；原封不动，一如原样，仍旧，照旧<br>誘われようが：干扰项<br>誘われた上に：「</del>上に」表示累加、递进，相当于”不仅……而且….”的意思。<br>誘われない限り：「~ない限り」表示在前項的前提下，后项就能得到保证。相当于”只要不……就……”。也可以翻译成”除非……”。</p></li><li><p>点に加えて：除了这一点外（还有）…「~に加えて」表示…再加上…；除…之外。<br>点を除いて：除了这一点外（没有）…；后项接否定，表达除了这个以外的合适的人、物和事情已没有了。即只有这个。<br>場合に加えて：除了这一种情况外（还有）…<br>場合を除いて：除了这一情况（没有）…</p></li><li><p>なってからであっても：「<del>てから」表示在……之后；「</del>であっても」表示虽然…..但是……<br>なったばかりなのか：「<del>たばかり」表示刚刚…<br>なってからというもの：「</del>てからというもの」表示自从……就……</p></li><li><p>入れたつもりだった：「<del>つもり」接在动词た形后面，表示就当作…….就算是……。<br>入れっぱなしだった：「</del>っぱなし」接在动词连用形后面，表示动作一直持续。放置不管、置之不理。<br>入れっこなかった：「<del>っこない」接在动词连用形后面，是一种强调否定表达，绝对不……绝不……。<br>入れるべきではなかった：「</del>べきではない」表示不应该……</p></li><li><p>広くないはずなんだよ：「<del>はずなんだ」表示説话人主观上的推测，应该……<br>広いなんてことはないよ：「</del>なんてことはない」表示加强语气，强调不存在某种情况<br>広くないわけじゃないんだよ：「<del>わけでは（じゃ）ない」表示并非会……；用来否定那些想当然的推测。<br>広いなんてもんじゃないよ：「</del>なんてもんじゃない」表示别提有多……；简直太…… 非常……</p></li><li><p>乗りたがったものだ：「<del>たがる」表示第三者的愿望，但因此此处是指过去的自己，不是现在的自己，因此可以用「</del>たがる」；「<del>たものだ」表示对过去事情的回忆。<br>乗りたがったところだ：「</del>たところだ」表示刚刚……<br>乗ってほしがったものだ：「ほしがる」表示第三者的愿望，一般没有「~てほしがる」的形式，故为干扰项<br>乗ってほしがったところだ：干扰项</p></li><li><p>秋の初めのこの時期は、真夏に戻ったかのような日もあればひんやりとした日もあり、気温の差が大きくて体調を崩しやすいので、注意が必要だ。<br>这个时期的初秋时节，有些日子仿佛回到了盛夏，而有些日子又比较凉爽，气温变化很大，很容易生病，所以需要当心。<br>要点：「<del>も</del>ば~も」表示既…又…。在前面叙述的基础上再继续叙述的表达方式。使用褒义词与褒义词、或者贬义词与贬义词的组合方式。</p></li><li><p>歴史的価値が高いとされる旧白木小学校の校舎を初めて見たが、とても100年前に建てられたものとは思えないほどの現代的なデザインに驚いた。<br>第一次看到被认为具有重要历史价值的原白木小学校址，它那现代化的设计让人很难相信它是100年前建成的。<br>要点：「~とは思えないほど」表示到了让人很难相信的程度。</p></li><li><p>企業の海外進出が成功するかどうかは、その国の事情をよく知る優秀な人材を確保できるか否かにかかっているといってもいいだろう。<br>可以说，一个企业能否成功进军海外，取决于它能否获得对该国情况充分了解的优秀人力资源。<br>要点：「<del>かどうかは、</del>か否かにかかっている」表示能否……取决于能否……。</p></li><li><p>空虚な：実質的な意味がない</p><p>ネーミング：名前を付けること</p><p>デフォルト：標準</p><p>戯れ続ける：ここでは、付き合い続ける</p></li></ul><h2 id="2022年12月"><a href="#2022年12月" class="headerlink" title="2022年12月"></a>2022年12月</h2><ul><li><p>勇敢（ゆうかん）：勇敢。勇敢に挑む。勇敢地挑战。<br>ゆうがん：干扰项，无常用词<br>勇健（ゆうけん）：健壮，强壮有活力。<br>有限（ゆうげん）：有限。有限な資源。有限的资源。</p></li><li><p>深刻（しんこく）：严肃；重大。深刻な問題。重大的问题。<br>2.じゅうこく：干扰项，无常用词<br>3.忠告（ちゅうこく）：忠告，劝告。<br>忠告を受け入れる。接受忠告。<br>4.じんこく：干扰项，无常用词。</p></li><li><p>労わる（いたわる）：慰劳，安慰；同情。部下を労わる。慰劳部下。<br>敬う（うやまう）：尊敬。先生を敬う。尊敬老师<br>慕う（したう）：爱慕，怀念；敬慕，敬仰。母国を慕う。怀念祖国。<br>庇う（かばう）：庇护；保护。過失を庇う。包庇过错。</p></li><li><p>制定（せいてい）：制定。法律を制定する。制定法律。<br>せてい：干扰项，无常用词。<br>正常（せいじょう）：正常。正常に行動する。正常行动。<br>施錠（せじょう）：上锁。ドアに施錠する。給门上锁。</p></li><li><p>んげ：扰项，无常用词。<br>沈下（ちんか）：沉降，下沉。地面が沈下する。地面下沉。<br>進化（しんか）：进化；事物逐渐好转。社会は進化していく。社会将会继续进步<br>しんげ：干扰项，无常用词</p></li><li><p>：被大雪所阻挡，无法前进。<br>囲む（かこむ）：包围，围绕；围攻。石で庭を囲む。用石头把院子围上<br>絡む（からむ）：缠在上；纠缠。草が木に絡む。草缠在树上。<br>拒む（こばむ）：拒绝，不接受。命令を拒む。抗命令。<br>阻む（はばむ）：阻挡，阻止。人の行く道を阻む。阻挡别人的去路。</p></li><li><p>手軽（てがる）：简単，简便。手軽な方法。简便的方法。<br>軽率（けいそつ）：轻率，草率。軽率な判断。草率的判断。<br>気軽（きがる）：轻松愉快，舒畅，随意。気軽に聞いてください。请随便问。<br>軽快（けいかい）：动作轻快；心情愉快。軽快な曲。轻快的曲子</p></li><li><p>谋求知识的牢固，而重复“预习-上课-复习”这一循环。<br>ピッチ：pitch投球；划桨次数，速度。<br>サイクル：cycle周期，循环过程<br>シフト：shift移动；改変；替换；轮班。シフト制。轮制<br>ベース：base基本，基础；地基。赤をベースにする。以红色为底色。</p></li><li><p>代行（だいこう）：代理，代办。社長の代行をする。代理社长的职务。<br>仲裁（ちゅうさい）：调停，劝解。けんかを仲裁する。劝架。<br>干渉（かんしょう）：干渉，干预。内政に干渉する。干涉内政。</p><p>媒介（ばいかい）：媒介，传播。ウイルスを媒介する。传播病毒</p></li><li><p>仕業（しわざ）：行为，搞鬼，勾当。彼の仕業に違いない。一定是他干的。<br>素振り（そぶり）：态度，举止，样子。怪しい素振り。可疑的举止<br>腕前（うでまえ）：能力，本事，手艺。腕前を試す。小试牛刀<br>扱い（あつかい）：使用；待遇；看待。飛行機の扱いは難しい。飞机的操作很难。</p></li><li><p>公寓正要完成的时候发现漏洞，工事就中止了<br>発覚（はっかく）：暴露，被发現。陰謀（いんぼう）が発覚した。阴谋败露了。<br>派生（はせい）：引发；从原有实物中分化。新しい問題が派生した。出现了新问题。<br>波及（はきゅう）：波及，影响。影響は全世界に波及する。影响波及全世界。<br>露出（ろしゅつ）：暴露露出。<br>電線が地上に露出した。电线露出地面。</p></li><li><p>ざらざら：手感粗糙，不光滑。<br>ねばねば：粘不拉几，黏黏糊糊。<br>すべすべ：光滑，滑溜。<br>ごつごつ：不平滑，凹凸不平；生硬。</p></li><li><p>掛け合う（かけあう）：相当于，对应；交涉。上司に掛け合う。与上司交涉。<br>張り合う（はりあう）：竞争，争夺。二人で彼女を張り合う。两个人争她一个。<br>噛み合う（かみあう）：互相咬；齿轮咬合；一致。意見が嚙み合わない。意见不一致。<br>釣り合う（つりあう）：平衡，均衡；匀称，合适。収入と支出が釣り合う。收支平衡。</p></li><li><p>我被朋友刺激到，开始了我的事业。<br>触発（しょくはつ）：触发；受到刺激。例：他人の成功に触発された。&#x2F;被别人的成功刺激了。<br>誘う（さそう）：邀请，劝诱。例：映画館に誘われた。&#x2F;被约去电影院了。<br>提案（ていあん）：建议，提案。例：法律改正について提案する。&#x2F;提议改正法律。<br>助ける（たすける）：帮助，救命。例：父の仕事を助ける。&#x2F;帮父亲干活。<br>刺激（しげき）：物理，生理刺激。</p></li><li><p>言動（げんどう）：语言和行为。閉口（へいこう）：为难；吃不消；没办法；腻烦；折服。<br>慣れる（なれる）：习慣；熟练；亲近。例：新しい仕事に慣れた。&#x2F;习惯新的工作了。<br>困る（こまる）：难受；苦恼；穷困。例：事件の処理に困る。&#x2F;事情难以处理。<br>がっかりする：灰心，失望。<br>ほっとする：松了一口气，放心。例：試験が終わってほっとする。&#x2F;考完试松了一口气。</p></li><li><p>気まま（きまま）：随意，任意；任性。例：気ままな子ども。&#x2F;任性的孩子。<br>質素（しっそ）：朴素；俭朴；简陋。例：質素な暮らし。&#x2F;俭朴的生活<br>退屈（たいくつ）：无聊，闷；寂寞。例：退屈な内容。&#x2F;无聊的内容。<br>贅沢（ぜいたく）：奢侈；浪費。例：贅沢に使う。&#x2F;大手大脚地使用。<br>自由（じゆう）：自由；随意。</p></li><li><p>まだ：还没，尚未。例：まだ来ていない。&#x2F;还没来。<br>かなり：颇为；相当；出乎意料。例：かなり疲れた。&#x2F;相当疲劳了<br>いくつか：一些；一点点；附在数后面表示零数。例：りんごがいくつある。&#x2F;有几个苹果。<br>恐らく（おそらく）：恐怕，大概，一定。例：恐らく雨になる。&#x2F;恐怕要下雨。</p></li><li><p>手分け（てわけ）：分工。例：手分けして探す。&#x2F;分头寻找。<br>分割（ぶんかつ）：分割，瓜分；分期付款。例：領土を分割する。&#x2F;瓜分领土。<br>分別（ぶんべつ）：辨別力；判断力；分类。例：分別がつく。&#x2F;有分辨力。<br>分担（ぶんたん）：分担。例：費用を分担する。&#x2F;分担费用。<br>分類（ぶんるい）：分类。例：血液型で分類する。&#x2F;按血型分类。</p></li><li><p>生麻利地处理了剩下的工作。<br>てきぱき：麻利，爽快，敏捷，利索。<br>早く正確に（はやくせいかくに）：又快又正确地。</p><p>時間をかけて丁寧に（じかんをかけてていねいに）：花费时间仔细地。<br>張り切って（はりきって）：干劲十足。<br>嫌がらず（いやがらず）：不讨厌，不勉强。</p></li><li><p>应该用：最後（さいご）：最后。最後の荷物です。这是最后的行李。<br>句意：因为很想知道结局，所以我就熬夜把很厚一本书看完了。<br>应该用：後ろ（うしろ）：后面<br>应该用：先端（せんたん）：顶端，头；先锋。葉の先端。叶子尖尖。</p></li><li><p>そそる：引起，勾起（感情或行为）<br>应该用：注意を払う（はらう）：提醒注意，给与警告。<br>应该用：煽る（あおる）：吹动，煽动。愛国心を煽る。激发爱国情怀。<br>句意：料理的色，香，味都是勾出食欲的要素。<br>应该用：強いられる（しいられる）：被迫。</p></li><li><p>遮断（しゃだん）：截断，隔断；分离。退路を遮断する。切断退路。<br>句意：这个房间的话，就可以阻外面的声音，录音钢琴演奏了<br>应该用：中止（ちゅうし）：中止，中途取消。<br>应该用：控える（ひかえる）：控制，节制。塩分を控える。控制盐分摄取。<br>应该用：終わりにする（おわり）：结束，终止</p></li><li><p>要請（ようせい）：请求，要求。彼からの要請だ。这是他的请求。<br>应该用：需要（じゅよう）：需要，需求。需要が急増する。需求量剧增。<br>句意：在受地的请求下，国家派遣医疗队伍前往。<br>应该用：必要（ひつよう）：必要，必需，必须。その必要はない。没有那个必要。<br>应该用：請求（せいきゅう）：请求，索取，要求。</p></li><li><p>ぎこちない：生硬，笨拙，笨手笨脚<br>句意：我在和我的偶像歌手面的时候，紧张地连动作都有些僵硬了<br>去掉ぎこちないので也可以使句子通顺。</p><p>应该用：悪い（わるい）：不好，差。生育（せいいく）が悪そうだ。生长不好。<br>应该用：不明瞭（ふめいりょう）：发音不明确</p></li><li><p>解析：断じて（だんじて）：决不，绝对。断じて許せない。决不可饶恕<br>应该用：まったく：副词，完全；实在是。私はまったく知らなかった。我完全不知道。<br>应该用：全然（ぜんぜん）：加上否定，表示完全不。<br>应该用：決して（けっして）：强烈否定，绝不会。決して忘れません。绝不会忘记<br>句意：对待别人歧视或是欺凌的行为是绝对不允许的。</p></li><li><p>あまりに：太<del>，过于</del>。<br>いっさい：一切，全部；完全不<del>（后接否定）。例：遅刻は一切許さない。&#x2F;お酒は一切飲まない。<br>できれば：如果可以的话。<br>どうしても：怎么也</del>，无论如何也~。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2023年12月&quot;&gt;&lt;a href=&quot;#2023年12月&quot; class=&quot;headerlink&quot; title=&quot;2023年12月&quot;&gt;&lt;/a&gt;2023年12月&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;墓前「ぼぜん」&lt;/p&gt;
&lt;p&gt;粗膳「そぜん」&lt;/p&gt;
&lt;p&gt;呆然「ぼうぜん</summary>
      
    
    
    
    
    <category term="日本語" scheme="http://example.com/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"/>
    
  </entry>
  
</feed>
