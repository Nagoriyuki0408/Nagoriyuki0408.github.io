<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>函数</title>
    <url>/2024/05/17/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>   ▪   函数定义：<br>将我们设计好的算法，单独封装出来。<br>函数的参数，计算所需要的参数或者条件。<br>函数的返回值、可有可无。<br>功能性函数和数值形函数。<br>定义一个函数<br>1：定义函数名<br>类型标识符 函数名（形式参数表）<br>｛语句序列<br>｝<br>形式参数定义模式：<type1> num1.<br>2：形参只在函数中具有效果。<br>返回值就是函数的计算结果。<br>类型标识符（函数返回值的类型） 函数名（形式参数表）<br>｛语句序列<br>return xx；<br>｝<br>无返回值的函数用void作为类型标识符，也不用写return语句。<br>   ▪   函数调用：<br>对于定义好的函数，以及c++库里面的函数，我们直接调用就可以了。<br>调用函数的规则：<br>1：调用函数之前需要事前声明<br>函数的定义和调用不在一个程序之中。<br>调用函数之前，我们需要进行一个函数的原型声明。<br>调用形式：<br>函数名（实参列表）<br>2：嵌套调用：<br>函数之间互相调用。<br>3：递归调用：<br>函数自己调用自己。<br>例题1：指数函数<br>#include&lt;bits&#x2F;stdc++&gt;<br>using namespace std;<br>int pow(int a,int b)<br>{for(int i&#x3D;1;i&lt;&#x3D;b;i++)<br>a*&#x3D;a;<br>return a;<br>}<br>int main()<br>{int i,j;<br>int c;<br>cout&lt;&lt;”Please enter the numbers”<br>cin&gt;&gt;i;<br>cin&gt;&gt;j;<br>c&#x3D;pow(i,j);<br>cout&lt;&lt;c&lt;&lt;end;<br>return 0;<br>}<br>例题2：将二进制数转化为十进制数<br>#include&lt;bits&#x2F;stdc++&gt;<br>using namespace std;<br>int pow(int a,int b)<br>{for(int i&#x3D;1;i&lt;&#x3D;b;i++)<br>a*&#x3D;a;<br>return a;<br>}<br>int main()<br>{int value&#x3D;9;<br>cout&lt;&lt;”Enter an 8bit binary number”;<br>for(int i&#x3D;7;i&gt;&#x3D;0;i–)<br>{char ch;<br>cin&gt;&gt;ch;<br>if(ch&#x3D;&#x3D;‘1’)<br>{velus+&#x3D;static_cast<int>(power(2,i);}<br>cout&lt;&lt;”Decimal value is”&lt;&lt;value&lt;&lt;endl;<br>}<br>double power (double x,int n)<br>{<br>double val&#x3D;1.0;<br>while(n–)<br>val*&#x3D;x;<br>return val;}</p>
<p>例题三：计算π的值<br>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>double arctanx(int x)<br>{double sqr&#x3D;x<em>x;<br>double e&#x3D;x;<br>double r&#x3D;0;<br>int i&#x3D;1;<br>while(e&#x2F;i&gt;1e-15)<br>{double f&#x3D;e&#x2F;i;<br>r&#x3D;(i%4&#x3D;&#x3D;1)?r+f:r-f;<br>e</em>&#x3D;sqr;<br>1+&#x3D;2;}<br>return r;<br>}<br>int main()<br>{<br>double a&#x3D;16.0<em>arctan(1&#x2F;5.0);<br>double b&#x3D;4.0</em>arctan(1&#x2F;239.0);<br>cout&lt;&lt;”PI&#x3D;”&lt;&lt;a-b&lt;&lt;endl;<br>return 0;<br>}<br>例题4：寻找回文数字<br>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>bool symm(unsigned n)<br>{unsigned i&#x3D;n;<br>unsigned m&#x3D;0;<br>while(i&gt;0)<br>{m&#x3D;m<em>10+i%10;<br>i&#x2F;&#x3D;10;}<br>return m&#x3D;&#x3D;n;<br>}<br>int main()<br>{for(int i&#x3D;11;i&lt;&#x3D;999;i++)<br>{if(symm(m)&amp;&amp;symm(m*m)&amp;&amp;summ(m*m*m))}<br>cout&lt;&lt;m&lt;&lt;m*m&lt;&lt;m*m*m&lt;&lt;endl;<br>return 0;<br>}<br>例题5：分段函数<br>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>double sin(double a)<br>{<br>double g&#x3D;0;<br>double t&#x3D;x;<br>int n&#x3D;1;<br>do<br>{<br>g+&#x3D;t;<br>n++;<br>t&#x3D;-t</em>x<em>x&#x2F;(2</em>n-1)&#x2F;(2<em>n-2);<br>}while(fabs(t)&gt;&#x3D;1e-10);<br>return g;<br>｝<br>int main()<br>{double k,r,s;<br>cout&lt;&lt;”r&#x3D;”;<br>cin&gt;&gt;r;<br>cout&lt;&lt;”s&#x3D;”;<br>cin&gt;&gt;s;<br>if(r</em>r&lt;&#x3D;s*s)<br>k&#x3D;sqrt(sin(r)*sin(r)+sin(s)<em>sin(s));<br>else k&#x3D;sin(r</em>s)&#x2F;2;<br>cout&lt;&lt;k&lt;&lt;endl;<br>return 0;}<br>例题六：投骰子</p>
<p>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>&#x2F;*srand函数<br>原型：void srand（unsigned int seed）<br>参数：seed产生随机数的种子<br>需要头文件：<cstdlib><br>功能：为使rand（）产生一系列伪随机整数而设置起始点。使用1作为seed参数，可以重新初始化rand（）<br><em>&#x2F;<br>enum GameStatus{WIN,LOSE,PLAYING};<br>int main(){<br>int sum,myPoint;<br>GameStaus staus;<br>unsigned seed;<br>int rollDice();<br>cout&lt;&lt;”Please enter an unsigned integer”;<br>cin&gt;&gt;seed;<br>srand(seed);<br>sum&#x3D;rollDice();<br>switch(sun){<br>case 7:<br>case 11:<br>staus&#x3D;WIN;<br>break;<br>case 2:<br>case 3:<br>case 12;<br>staus &#x3D;LOSE;<br>break;<br>default;<br>staus&#x3D;PLAYING;<br>myPoint&#x3D;sum;<br>cout&lt;&lt;”point is”&lt;&lt;myPoint&lt;&lt;endl;<br>break;}<br>while(staus&#x3D;&#x3D;PLAYING)<br>{sum&#x3D;doolDice();<br>if(sum&#x3D;&#x3D;myPoint()<br>staus&#x3D;WIN;<br>else if(sum&#x3D;&#x3D;)}<br>int rollDice()<br>{int die1&#x3D;1+rand()%6;<br>int die2&#x3D;1+rand()%6;<br>int sum&#x3D;die1+die2;<br>cout&lt;&lt;”player rolled”&lt;&lt;die1&lt;&lt;”+”&lt;&lt;<br>die2&lt;&lt;”&#x3D;”&lt;&lt;sum&lt;&lt;endl;<br>return sum;}<br>   ▪   函数的嵌套调用<br>主函数调用a函数，a函数调用b函数。<br>就是在一个流程中，不断嵌套新函数。<br>为什么能够精准地返回第一时间的位置呢？<br>因为有栈的存在。<br>例子：<br>int fun2（int m）<br>｛return m</em>m｝<br>int fun1（int a，int b）<br>{return fun2(a)+fun2(b)}</p>
<p>   ▪   函数的递归调用<br>函数自己调用自己。<br>函数可以直接或者间接地调用自身。<br>例题1：计算n！<br>公式n！&#x3D;n*（n-1）！&#x2F;&#x2F;递归就是可以转化为数列前后两项的关系。<br>int fun（int a）<br>{if(a&#x3D;0) fun(a)&#x3D;1;<br>return afun(a-1);}<br>例题2：从n个人里面选择k个人作为委员会。<br>C（n，k）&#x3D;n！&#x2F;k!*n-k）！<br>C(n,k)&#x3D;C(n-1,k)+C(n-1,k-1)<br>终止条件在递归里面很重要。<br>int comm（int n，int k）<br>｛if（k&gt;n）return 0;<br>else if(n&#x3D;&#x3D;k||k&#x3D;&#x3D;0) return 1;<br>else return comm(n-1,k)+comm(n-1,k-1);｝<br>tip:找出递归边界的方法：<br>数列本身的限制，公式计算的极限。<br>例题3：汉诺塔问题</p>
<p>void move（char src,char dest）<br>{cout&lt;&lt;src&lt;&lt;”–&gt;”&lt;&lt;dest&lt;&lt;endl;}<br>void hanoi(int n,char scr,char medium,char dest){<br>if(n&#x3D;&#x3D;1) move(src,dest);<br>else {hanoi(n-1,src,dest,medium);<br>move(src,dest);<br>hanoi(n-1,medium,scr,dest);}<br>}<br>int main()<br>{int m;<br>hanoi(m,a,b,c);<br>return 0;<br>}<br>&#x2F;&#x2F;追踪递归过程：<br>&#x2F;&#x2F;进入，n！&#x3D;1.调用自身<br>&#x2F;&#x2F;每一次数据规模都在缩小<br>&#x2F;&#x2F;第一次3 A B C<br>&#x2F;&#x2F;第二次（调用自身）2 A C B<br>&#x2F;&#x2F;第三次（调用自身）1 A B C<br>&#x2F;&#x2F;第四次（调用move（））A-&gt;C<br>&#x2F;&#x2F;第五次（退回n&#x3D;2的状态，调用move（））A-&gt;B<br>&#x2F;&#x2F;第六次（调用自身）1 B A C<br>&#x2F;&#x2F;第七次（调用move（））B-&gt;C<br>&#x2F;&#x2F;第八次（退回n&#x3D;2的状态）<br>执行完之后，退回入栈的状态，深入递归点进入后，形成流程。<br>   ▪   函数的参数传递<br>形式参数是不占内存的，当调用函数的时候，才会给形参分配内存空间。<br>实参可以是常量，变量和表达式。<br>转化（隐含）：将实参转化为形参。<br>单向传值的作用，被调用函数只会处理形参，形参得到形参的值的时候，就切割了。<br>return语句只能返回一个值。<br>现在需要一个双向传值的事物，方法是传引用&amp;。传引用作参数可以保障实参数据的安全。<br>   ▪   引用类型<br>值传递：单向传递。<br>引用传递：双向传递。<br>引用类型、<br>引用（&amp;）是标识符的别名<br>定义一个引用的时候，必须同时对它进行初始化，使它指向一个已存在的对象。<br>例如：<br>int i，j;<br>int &amp;ri&#x3D;i;&#x2F;&#x2F;定义int引用ri，并初始化为变量i的引用。<br>j&#x3D;10;<br>ri&#x3D;j;&#x2F;&#x2F;相当于把j赋值给i<br>一旦一个引用被初始化后，就不能改为指向其他对象<br>引用可以作为形参<br>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>void swap(int a,int b){<br>int t&#x3D;a;a&#x3D;b;b&#x3D;t;<br>}<br>int main(){<br>int x&#x3D;5,y&#x3D;10;<br>cout&lt;&lt;”x&#x3D;”&lt;&lt;x&lt;&lt;”y&#x3D;”&lt;&lt;u&lt;&lt;endl;<br>swap(x,y);<br>cout&lt;&lt;”x&#x3D;”&lt;&lt;x&lt;&lt;”y&#x3D;”&lt;&lt;u&lt;&lt;endl;<br>return 0;<br>}<br>&#x2F;&#x2F;不会发生变化<br>#include&lt;bits&#x2F;stdc++.h&gt;<br>using namespace std;<br>void swap(int&amp; a,int&amp; b){<br>int t&#x3D;a;a&#x3D;b;b&#x3D;t;<br>}<br>int main(){<br>int x&#x3D;5,y&#x3D;10;<br>cout&lt;&lt;”x&#x3D;”&lt;&lt;x&lt;&lt;”y&#x3D;”&lt;&lt;u&lt;&lt;endl;<br>swap(x,y);<br>cout&lt;&lt;”x&#x3D;”&lt;&lt;x&lt;&lt;”y&#x3D;”&lt;&lt;u&lt;&lt;endl;<br>return 0;<br>}<br>   ▪   含有可以变化的参数的函数<br>可以变化长度的参数表：<br>如果所有的实参类型相同，可以传递一个initializer_list的标准库类型<br>如果实参的类型不同，我们可以编写可变参数的模板<br>initializer_list<br>initializer_list是一种标准库类型，用于表示某种特定类型的值的数组，该类型定义在同名的头文件中。<br>具体操作：<br>initializer_list<T>lst;&#x2F;&#x2F;默认初始化，T类型元素的空列表<br>nitializer_list<T>lst{a,b,c};&#x2F;&#x2F;lst的元素数量和初始值一样多，lst的元素是对应初始值的副本；列表中的元素是const<br>lst2(lst)&#x2F;&#x2F;拷贝或者赋值一个initializer_list对象但不拷贝列表中的元素；拷贝后原始列表和副本共享元素。<br>lst2&#x3D;lst<br>lst.size(）&#x2F;&#x2F;列表中的元素数量<br>lst.begin（）&#x2F;&#x2F;返回指向lst首元素的指针<br>lst.end()&#x2F;&#x2F;返回指向lst尾元素下一位置的指针<br>在编写代码输出程序所产生的错误信息时，最好统一用一个函数实现该功能，使得对所有错误的处理都能够整齐划一，<br>然而错误信息的种类不同，<br>调用错误星系时输出函数时传递的参数也会各不相同<br>使用initializer_list编写一个错误信息输出函数，使其可以作用于可变数量的形参。<br>   ▪   内联函数<br>简单地说，就是在调用简单函数提高效率的工具。<br>减少调用函数的麻烦。<br>内联函数声明时的关键字 inline<br>编译时在调用处用函数体进行替换<br>节省了参数传递<br>控制转移等开销<br>注意：<br>内联函数中不能有循环语句和switch语句<br>内联函数的定义必须出现在内联函数在第一次被调用之前<br>例子：<br>#include&lt;bits&#x2F;stdc++&gt;<br>using namesapce std;<br>const double PI&#x3D;3.14159265358979;<br>inline double calArea(double radius){<br>return PI<em>radius</em>radius;<br>}<br>int main() {<br>double r&#x3D;3.0;<br>double area&#x3D;calArea(r);<br>cout&lt;&lt;area&lt;&lt;endl;<br>return 0;<br>}<br>   ▪   Constexpr函数（常量表达式函数）<br>他修饰的函数中，当所有参数都是constexpr时，一定返回constexpr。<br>只要给的是常量，那么返回的也是一个常量。<br>constexpr int get_size（）｛return 20；｝<br>constexpr int foo&#x3D;get_size();<br>&#x2F;&#x2F;正确：foo是一个常量表达式。<br>   ▪   带默认参数值的函数<br>可以在调用的时候，不给予参数也可以有一个默认形参可以使用。<br>int add（int x&#x3D;5，int y&#x3D;6）｛<br>return x+y;｝<br>int main()<br>{add(10,20);&#x2F;&#x2F;10+20<br>add(10);&#x2F;&#x2F;10+6<br>add();&#x2F;&#x2F;5+6<br>}<br>&#x2F;&#x2F;所有有默认参数的形参都必须列在形参列表的最右，即默认参数值的右边不能有无默认值的参数；<br>调用时，实参和形参的结合次序是从左向右<br>int add（int x，int y&#x3D;5，int z&#x3D;6）;&#x2F;&#x2F;正确<br>int add（int x&#x3D;1，int y&#x3D;5，int z）；&#x2F;&#x2F;错误<br>int add（int x&#x3D;1，int y，int z&#x3D;6）；&#x2F;&#x2F;错误<br>默认参数值与函数的调用位置<br>如果一个函数有原型声明，且原型声明在定义之前，则默认参数值应该在函数原型声明中给出；<br>如果只有函数的定义，或函数定义在前，<br>则默认参数值可以在函数定义中给出。<br>int add（int x&#x3D;5，int y&#x3D;6）；<br>int main（）<br>｛add（）；｝<br>int add（int x，int y）｛<br>return x+y；｝</p>
<p>int add（int x&#x3D;5，int y&#x3D;6）｛<br>return x+y；｝<br>int main（）<br>｛add（）；｝<br>例题1：<br>函数getVolume计算体积<br>有三个形参：length、width、height<br>其中width和height带有默认值2和3<br>主函数中以不同形式调用getVolume<br>int getVloume（int length，int width，int height&#x3D;3）；<br>int main（）<br>{const int X&#x3D;10,Y&#x3D;12,Z&#x3D;15;<br>cout&lt;&lt;”Some box data is”;<br>cout&lt;&lt;getVolume(X,Y,Z)&lt;&lt;endl;<br>cout&lt;&lt;”Some box data is”;<br>cout&lt;&lt;getVolume(X,Y)&lt;&lt;endl;<br>cout&lt;&lt;”Some box data is”;<br>cout&lt;&lt;getVolume(X,&lt;&lt;endl;<br>return 0;<br>}<br>int getVolume(int length,int width,int height){<br>cout&lt;&lt;setw(5)&lt;&lt;length&lt;&lt;setw(5)&lt;&lt;width&lt;&lt;setw(5)&lt;&lt;height&lt;&lt;’\t’<br>return length<em>width</em>height;<br>}<br>   ▪   函数重载<br>函数多态性的体现，C++中允许功能相近的函数在相同的作用域内以相同函数名声明，从而形成重载。方便使用，便于记忆。<br>int add(int x,int y);<br>float add(float x,float y);<br>int add(int x,int y,int z);<br>注意事项，重载函数的形参必须不同：个数不同或者类型不同。<br>编译程序将根据实参和形参的类型及个数的最佳匹配来选择调用哪一个函数。<br>int add(int x,int y);<br>int add(int x,int y);<br>编译器不以形参名来区分<br>int add(int x,int y);<br>void add(int x,int y);<br>编译器不以返回值来区分<br>不要将不同功能的函数声明为重载函数，以免出现调用结果的误解，混淆，这样不好。<br>int add(int x,int y)<br>{return x+y;}<br>float add(float x,float y)<br>{return x-y;}<br>int sumOfSquare(int a,int b){<br>return a<em>a+b</em>b;<br>}<br>Double sumOfSquare(double a,double b){<br>return a<em>a+b</em>b;<br>}<br>   ▪   C++系统函数<br>C++的系统库提供了几百个函数可以供程序员使用，例如：<br>求平方根函数（sqrt）<br>求绝对值函数（abs）<br>使用系统函数时要包含相应的头文件，例如；<br>cmath<br>例题一：从键盘中输出一个角度值，求出该角度的正弦值，余弦值和正切值。<br>分析：系统函数中提供了求正弦值，余弦值和正切值的函数：sin（），cos（），tan（），函数的声明在头文件cmath中。</p>
<p>#include<iostream><br>#include<cmath><br>int main(){</p>
<p>   ▪   第三章总结<br>函数的定义与调用，参数传递<br>内联函数，带默认值的函数，函数重载<br>C++系统函数</p>
<p>   ▪   实验三（上）<br>本部分的主要实验任务是通过实验练习来进一步理解以下内容：<br>1、掌握函数的定义和调用方法。<br>2、学习debug的step into 功能追踪到函数内部。<br>3、递归算法<br>例题一、编写函数float Convert(float TempFer)<br>参数和返回值都是float类型<br>实现算法C&#x3D;（F-32）*5&#x2F;9;<br>float Convert(float F){<br>return (F-32)*5&#x2F;9;<br>}<br>例题二、编写斐波那契数列<br>a（n）&#x3D;a（n-1）+a（n-2）；<br>int a（int n）{<br>if(n&lt;3) return 1;<br>else if(n&lt;&#x3D;0) break;<br>return a(n-1)+a(n-2);<br>}</p>
]]></content>
  </entry>
  <entry>
    <title>存在与虚无</title>
    <url>/2024/05/17/%E5%AD%98%E5%9C%A8%E4%B8%8E%E8%99%9A%E6%97%A0/</url>
    <content><![CDATA[<p><img src="/himanatsu1.jpg" alt="存在"></p>
<p>apparence：显象<br>conscience positionelle：意识的位置<br>contingence：偶然性<br>absurde：荒谬的<br>corps：身体的<br>dimention：维度<br>Étre ：存在<br>avoir：拥有<br>existence：存在<br>existentialisme：存在主义<br>l’être-dans-le-monde:在世的存在<br>l’être-au-milieu-du-monde:没于世界的存在<br>étre -la：desein，在那里<br>interrogation：拷问<br>mauvaise foi：自欺，坏的相信<br>bonnoe foi：好的相信，真诚<br>mobile：动力，motif，动机<br>monde：世界<br>Noéme:noese胡塞尔现象学中的术语，前者翻译成，作为对象的意识，后者译作作为活动的意识。<br>poesence à  soi：面对自我在唱<br>projet：谋划，计划<br>rien：乌有<br>est été ：被存在<br>exister：动词的存在<br>一、现象的观念：<br>消除二元论，用现象的一元论替换的理解：类比自然科学当中的实验，理论不足以解决问题（二元论）的情况时，现象会给出答案。<br>在面对对象变成语言中，我们会将具有同类性质的对象抽象为一个类，在类中我们有私密数据，保护数据还有公开数据，现象学还原就是只关注测试函数中出现的对象，人们陷入二元论的原因，究其根本是不能访问私有数据，探究对象本质。<br>这样思考，就能发现，现象学还原之后的对象就只具有对象的部分性质，如果我们拿现象来概括对象的所有，就会陷入以偏概全的逻辑谬误。<br>不理解的地方：这样的还原为什么是把存在物的整个存在吸收到它隐藏的那个实在中，为什么物体的实在性能否定显现。<br>学习的东西：<br>黑格尔：“景象背后这幻觉”<br>胡塞尔和海德格尔“现象学”<br>康德的现象（Erecheinung）6</p>
]]></content>
  </entry>
  <entry>
    <title>拉康和弗洛伊德关于无意识的论述</title>
    <url>/2024/05/17/%E6%8B%89%E5%BA%B7%E5%92%8C%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E5%85%B3%E4%BA%8E%E6%97%A0%E6%84%8F%E8%AF%86%E7%9A%84%E8%AE%BA%E8%BF%B0/</url>
    <content><![CDATA[<p>在拉康选集中，拉康说明了回到弗洛伊德的意义。<br>Wo Ss war,Soll ich werden.<br>where the id was,there the ego shall be.<br>拉康将两者进行对比，认为翻译是错误的。<br>Wo-&gt;where:德语对地点的区别比较严格，wohin去某地，wohere从哪里出发。所以不能用简单的where来代替。<br>-&gt;O wohim -&gt;wohere-&gt;wokhao<br>Ss it（本我）没有用任何定冠词：der（阳性）das（中性）die（阴性）<br>war：sein      da-sein（be，was）<br>soll：should<br>ich:主体。<br>werden：在德语里是变成&#x2F;并不是去到哪里。不是到达wo不是从wo出来，而是凭空地在某个地方生成出来的事物。<br>在它所在的地方，在它绝对所在的地方，我出现在那里，这是我的责任。<br>骑手自我：自我（ich）像一个骑马的人，驾驭着那个本我（Ss）。<br>在它（无意识）所在的地方，在它绝对所在的地方，我出现在那里，这是我（S&#x2F;）的责任。<br>对弗洛伊德的颠覆，自我是要去控制本我的，在拉康这里无意识是一个空位，它应该在这里，它曾经在某个地方，它已经一闪而过了，但是我应该出现在这里，我凭空出现在这里，这是我的责任。<br>能指链：主体需要把这个缺口缝补上。<br>它曾在能指链上留下了一个空缺，伪自我必须要道这个断裂之处去。<br>我并不知道那个弗洛伊德所谓的那个无意识的我已经死了，所以我作为主体才能来到这个位置，我作为主体是以不在而在的状态出现在那个能指链的断裂之处。<br>把两个东西缝合在了一起：一个真正的存在会因自知而死，一个话语（将大他者的言语转述）却是由死来维持（维持住了表面的稳定，你作为符号系统的工具，不断修补）。<br>死了两次：第一次是在镜像阶段的误认（没有死透的就是对象a），第二次是你会说话进入了象征域之后.<br>人是死掉的存在。<br>集体无意识：弗洛伊德，拉康的无意识。遵从剥夺他意识的他者。<br>A Nazi Jew</p>
]]></content>
  </entry>
  <entry>
    <title>小他者、对象a、大他者</title>
    <url>/2024/05/17/%E5%B0%8F%E4%BB%96%E8%80%85%E3%80%81%E5%AF%B9%E8%B1%A1a%E3%80%81%E5%A4%A7%E4%BB%96%E8%80%85/</url>
    <content><![CDATA[<p>Lacan理论：（1901-1981）<br>Zizek：1936-1953古典时期<br>1、镜像阶段<br>2、回到Freud（理论弑父）<br>3、语言结构主义（索绪尔提出的能指）<br>青年拉康：<br>1、超现实主义思潮（达利，蛋中达利）<br>拉康认为Freud是自己的精神导师。<br>母子共同体：反对建构主义，行走的疯癫，这个世界全都是假的。<br>2、新黑格尔主义<br>柯耶夫 主体间性的讨论。<br>对显示的批判，对黑格尔的主奴辩证法、欲望辩证法的重新解读。<br>乔伊斯《尤利西斯》-后现代主义的著作<br>拉康和巴塔耶的妻子西维娅来了一场激情<br>早期拉康：<br>想象域：镜像理论<br>①小他者：不是梦中情人的a<br>②伪自我&#x2F;伪主体a‘（moi）<br>中期拉康：<br>象征域：能指链<br>①语言学的结构主义：语言即对存在的杀戮<br>②伪个人主体论：大他者理论A“无意识是大他者的语言”，颠覆弗洛伊德的无意识（最基本的原欲）。<br>③欲望-&gt;转喻<br>晚期拉康：真实域（实在界），容易被理解成实在论的实在，象征域的失败才能进入真实域。这个时候才出现了对象a。<br>绝对的肯定，显示的错位，用宗教的话语就是神的衣裳在你的手心划过。Freud给出的人格理论有心心相惜的点。等待戈多：在明知他不会来的情况下，还是要等待他来。缺如。<br>①大写的物<br>②对象啊<br>③症候（症象人）</p>
]]></content>
  </entry>
  <entry>
    <title>爱与典范</title>
    <url>/2024/05/17/%E7%88%B1%E4%B8%8E%E5%85%B8%E8%8C%83/</url>
    <content><![CDATA[<p>   ▪   爱的典范：<br>不是讲述对与错的问题，典雅爱情中，起作用的是一种符号爱完成生化成了一种符号，成为了一首诗歌。<br>在虐恋之中，症状代替了符号。<br>使徒的爱：圣爱是幻想父亲的爱，对自己的幻想的爱的一种回应，他正在永恒地爱着我，我也可以永恒地爱着她。这只手是一种幻影，幻想自己的手是可以伸进火堆里而幻想出的大他者的手。<br>在使徒在受鞭笞的时候，他们会处于那种极致的享乐之中，他们真的能感受到大他者拉着了他。<br>“性关系的尽头是爱，因此我不会说并不存在爱，我知识说性关系不存在”<br>一朵曼妙的花朵<br>一个新鲜的水果<br>在我双手触碰两者的时候，突然有一只手伸了出来。在触碰这只手的过程中，那只手突然着火了。我只能用作为表达失败的方式来表达爱，在爱的灰烬之处，向我伸出了一只手。<br>lacan：这灰烬之手是一种镜像的自恋结构。<br>古典的爱中，典雅爱情之中，性是不可能，自恋式的想象。<br>原作者的解释不是权威，作者已死。<br>爱处于偶然的逻辑相中，爱的相遇链接了原本两个没有关系的能指。其如其分的神迹，直接有了一朵美丽的花。她仿佛有无限的可能，在诱惑着我。<br>1、Darian Loader《拉康》：这两只手一定不是对称结构。<br>2、Bruce Fink：爱必须是一种回应（积极的解读）<br>从灰烬中伸出的那只手理解为父之名，在爱之中，我们和父之名打交道。父之名认可了你的爱，将你的爱注册在案。没有爱就没有注册在安的结婚证，爱是一种必然的创伤，爱召唤出了父之名。给了我们一种担保，让我们不至于过于哀悼我们成为灰烬的爱情。<br>   ▪   爱的表达<br>说、写、做<br>说就是言说：任何对爱的表达都是对爱的缺失，“我爱你”的意思就是你来爱我吧。苏格拉底把爱当成了背爱，而不是爱人。<br>小宝宝在刚出生的时候，所有的言爱都是对爱的请求。<br>分析师保持沉默的原因：避免向来访者索取爱。<br>说爱就等于要求被爱，说我爱你就等于在说你来爱我吧，这并不是对爱的表达，而是对爱的索取。<br>写就是一个人无法谈论爱，但是当那个人写出来的时候，就能打动你，在书写与字母不存在爱与言说的矛盾，情书比任何通过言语而表达的爱都要真实。<br>爱在停止书写的地方，是未断却无法写出之物。<br>你觉得你写的东西可能不太正确，但是你的爱却有了一个实在的参照物。可以告诉自己，我的爱就在信纸背后，在留白之处，它有一个可以寄托的场所。<br>做的维度（make love）：在完全简化为某个行为之前，就是单纯的求爱，对于男人，在做的时候，与其说他们实在做，不如说他们是在享受性，感知对方的一个部位，感受到了自己的膨胀和丰满，就意味着无所缺失，我不知道他在激动什么，不能被菲勒斯完全收编，部分认同男性（癔症式的），沦为一个普遍的像男人认同阳具一样的女性认同，女人不存在，没有所谓的女人，女人不存在。<br>如何表达爱：没有性关系，写只能在写不出的地方表达爱，说我爱你的实际意思是我缺少爱，请你来爱我。给出你所没有的，表达爱，给出你所没有的，爱的表达本身就是一种自返的结构，在说写做之中，都会遇到挫折，在说不了，写不了，做不了的地方，爱就出现在这里：请拒我所赠，盖非也。<br>给出你所没有的，你和她面对面，站在苍茫的雪地里，两个人都冻的瑟瑟发抖，但是你就是想要抱住她，你就想向她伸出手。<br>   ▪   如果试图“言说”爱<br>爱处在偶然的逻辑相中，是停止却无法写出的东西，只能以诗的形式写出。情不知所起，一往情深。相顾无言，唯有泪千行。<br>只有当语言死亡的时候，你才能活得一瞬间的真实。<br>晚期拉康是比较可怜的，是一个无法忍受自己年龄的人，说脏话，说悖论，试图将自己的平生所学一起用一遍，1975年之后拉康进入了一个强热的思辨当中，进入了一个Fichte的绝对知识，用数学的方式，将自己的理论封装起来：数理逻辑、拓扑学、波罗米结。<br>《若灵根的守灵夜》晚年的拉康奢侈无度，但是他又非常地吝啬：是爱使享乐得以屈从。到底我思是什么东西？在我思之万物之处我不在，我在我不死不在之处，即是说我等于爱。我思是一种爱与恨的战场，是Gott与魔鬼交战的战场，在诗人的角度，诗人透过自己的作品，以某种斜视，一瞥而见了作品的作者。ich&#x3D;ich（自我命名）<br>母子关系：demand-need&#x3D;desire<br>恋爱关系：desire（爱&#x2F;请求的反向投资）+need（信的内容）&#x3D;demand（情书）<br>“请拒我所赠，该非也”：否定信中的内容，不能送早餐，过分夸大的实在物，太过于压迫别人了。<br>如果没有爱的话，我们还是会在转喻链上延宕。<br>不是万物都可以计算（资本主义）：个人的价值不可以计算。</p>
]]></content>
  </entry>
  <entry>
    <title>镜像阶段：关系即伪，无中生伪有</title>
    <url>/2024/05/17/%E9%95%9C%E5%83%8F%E9%98%B6%E6%AE%B5%EF%BC%9A%E5%85%B3%E7%B3%BB%E5%8D%B3%E4%BC%AA%EF%BC%8C%E6%97%A0%E4%B8%AD%E7%94%9F%E4%BC%AA%E6%9C%89/</url>
    <content><![CDATA[<p>镜像阶段：关系即伪&#x2F;无中生伪有-&gt;拉康任务弗洛伊德的那个本我是生物性的，拉康认为人的开端就是一个无，那个永远回不去母子共同体的“无”。<br>nothingness-&gt;hegel 人是一个黑夜。<br>是一个空洞的虚无，<br>人的实在意义上的否定性。<br>主奴辩证法。<br>Max：人的生活，现实意义上是社会关系的总和。<br>镜像阶段的定义：6-18个月 Freud。<br>小朋友站在镜子面前，发现镜子里面有一个小朋友的形象。<br>这个时候会感受到镜子里面那个统一完整的形象<br>进入了想象域，一种蜜月般的欣喜，<br>人总是一个早产儿，die<br>“动力无助”-&gt;主客不分<br>“破碎的身体”，在镜子里面看到了一个完整的自己，接着破碎化，会成为主体不可弥合的创伤，梦是被压抑的愿望的实现 。<br>梦是被压抑的愿望经过伪装之后的实现。<br>主体在认定了一个影像之后的关系，内在和外在的关系，你否定了内在的关系，将自身认知为了镜子中的自己，这是第一次异化。<br>第二次异化是在象征域中被语言结构的异化，语言是一面无声之镜。这是第二次的异化。<br>镜像误认是一种反对心理学（格式塔）上面的那种积极的心理学。<br>a-（小他者一号）&gt;a‘（moi，弗洛伊德语境下的理想自我）；镜像自我，idea-ich。<br>小他者不是一个具体实在的人，镜像阶段中作为自我认同对象的非我中介。</p>
]]></content>
  </entry>
  <entry>
    <title>連濁</title>
    <url>/2024/05/17/%E9%80%A3%E6%BF%81/</url>
    <content><![CDATA[<p>連濁（れんだく）：連濁とは、ある語と語が組み合わさって、熟語（じゅくご）や複合語（ふくごうご）になったとき、後ろの語の先頭の音が、清音から濁音に変化する現象のことです、連濁は例外も多いのですが、それでも一般的なルールがありますので、次のようにまとめてみました。<br>連濁が起こりやすいグループと、連濁が起こりにくいグループに分けました。<br>連濁が起こりやすい：OO＋和語<br>和語とは、日本で古くから使われていた言葉で、基本的に訓読みします。<br>連濁が起こりにくい：OO＋外来語　OO＋かんご<br>それにたいして漢語とは、中国から伝わった言葉で、基本的に音読みします。<br>和語＋和語の組み合わせのとき、後ろの語の先頭のかなが「か、さ、た、は」行なら、連濁することが多いです。<br>貝殻（かいがら）、長靴（ながぐつ）、夜空（よぞら）、巻き寿司（まきずし）、<br>鼻血（はなじ）、時々（ときどき）、前歯（まえば）、生け花（いけばな）<br>漢語＋和語の組み合わせのとき、先程と同じで、後ろの語の先頭のかなが「か、さ、た、は」行なら、連濁することが多いです。<br>気軽（きがる）、仕事（しごと）、豚汁（とんじる）、人数（にんずう）、<br>団子（だんご）、台所（だいどころ）、茶畑（ちゃばたけ）、煎餅(せんべい)。<br>変温現象：発音安くするの変化<br>舌を上顎につけてから「お」というと、自然に「の」になりますね。<br>外来語＋和語の組み合わせのとき、先程と同じで、後ろの語の先頭のかなが「か、さ、た、は」行なら、連濁することが多いです。<br>スナック菓子（がし）、サラダ皿（ざら）、スイーツ処（どころ）、キャベツ畑（ばたけ）<br>即ち、熟語や複合語の後ろの語側語、かつ後ろの語の先頭のかなが清音の場合、連濁することが多いです。<br>はな＋たば：はなだば（ｘ）はなたば<br>前にご紹介した基本のルールの通り、熟語や複合語の後ろの語が和語の場合、後ろの語の先頭のかなは濁音化すべきですが、もしその先頭のかなに濁音がある場合、連濁ないことがあります。<br>無傷（むきず）、座敷（ざしき）、絵筆（えふで）、ベイト先（さき）<br>次に、先後が並列構造になっている場合は、あまり連濁しません、<br>例えば、「すき嫌い」という複合語は、基本のルールならば「すきぎらい」となりますよね、<br>ですが「すき」と「嫌い」には並列構造がありますので連濁しません。<br>山川（やまかわ）、押し引き（おしひき）、嬉し悲しい（うれしかなしい）<br>まずは、熟語や複合語の後ろの語に漢語がくるときです<br>和語＋漢語の組み合わせのとき、ほとんど連濁しません<br>株券（かぶけん）、寒気（さむけ）、畑仕事（はたけしごと）、場所（ばしょ）、<br>家賃（やちん）、手帳（てちょう）、手本（てほん）、見本（みほん）<br>漢語＋漢語の組み合わせのとき、ほとんど連濁しません<br>価格（かかく）、旅行（ようこう）、完成（かんせい）、基礎（きそ）<br>携帯（けいたい）、位置（いち）、後輩（こはい）、警報（けいほう）<br>外来語＋漢語の組み合わせのとき、ほとんど連濁しません<br>グローバル化（か）、ヒット作、サービス単価（たんか）、リサイクル品（ひん）<br>例外１：<br>湯気（ゆげ）、足し算（たしざん）、登山（とざん）<br>例外２：長音<br>三本（さんぼん）、中国（ちゅごく）、定規（じょうぎ）、漫才（まんざい）、単行本（たんこんぼん）<br>和語＋外来語の組み合わせのとき、ほとんど連濁しません<br>一コース、一人カラオケ、負けチーム<br>漢語＋外来語の組み合わせのとき、ほとんど連濁しません<br>健康（けんこう）チェック、筋肉（きんにく）トレーニング、薬用（やくよう）ファンデション<br>外来語＋外来語<br>アフターサービス、レイトショー、ヘルスチェック、ワーキングホリデー。<br>連濁の一般的な規則をまとめますと、まずは熟語や複合語の後ろの語が何語なのかを確認します、<br>そして、和語なら連濁が起こりやすく、漢語や外来語が起こりにくいと考えてください。<br>転音：転音とは、熟語や複合語の前の語の最後の母音が変わることです。<br>例えば、「酒」＋「屋」の組み合わせの場合、前の語「酒」の最後の母音「え」が「あ」に変化します<br>さけ＋や＝さかや<br>「白」＋「玉」の組み合わせの場合、前の語「白」の最後の母音「お」が「あ」に変化します、<br>しろ＋たま＝しらたま<br>「船」＋「便」の組む合わせの場合、前の語「船」の最後の母音「え」が「あ」に変化します<br>ふね＋びん＝ふなびん<br>「🌴」＋「陰」の組む合わせの場合、前の語「木」の最後の母音「い」が「お」に変化します<br>き＋かげ＝こかげ<br>促音化：促音化とは、熟語や複合語の前の語の最後のかなと後ろの語の先頭のかながの子音が無声子音の場合、<br>前の語の最後のかなが促音になる変化です。<br>無声子音は「か、さ、た、は、ぱ」行の子音のことです<br>かつ＋て＝かって（勝＋手＝勝手）、けつ＋てい＝けってい(決＋定＝決定)、せつ＋てい＝せってい(説＋定＝設定)<br>いち＋てい＝いってい（一定）、せき＋けん＝せっけん（石鹸）、あつ＋かん＝あっかん（圧巻）<br>半濁音化：半濁音化とは、熟語や複合語の後ろの語のセントうのかなが「はぎょう」から「パ行」に変わることです。<br>例えば、「審判」の場合、後ろの語の先頭のかな「は」が「ぱ」にかわり、「しんぱん」と読みます<br>出発（しゅっぱつ）、鉛筆「えんぴつ」、扇風機「せんぷうき」、漢方（かんぽう）<br>ちなみに、半濁音化と促音化は同時に起こることも多いです、<br>いち＋ほん＝いっぽん<br>特に、前の語の最後のかなが「く、ち、つ」で、後ろに「は」行のかなが来るときです<br>六本木（ろっぽんぎ）、一本（いっぽん）、割烹（かっぽん）<br>音韻添加：音韻添加とは、熟語や複合語の後ろの語の先頭に、新しい音素がはいることをいいます。<br>例えば、「こさめ」の場合、そのまま読むと「こあめ」ですが「あめ」のまえにしい・ｓ・のおとが入って、「こさめ」とよみます。<br>春雨（はるさめ）<br>「真っ白」のように、「しろ」のまえに子音が・ｓ・のおとが入って、しいん・ｓ・が２つ連続することによって促音になることもあります<br>真っ青（まっさお）、真っ直ぐ（まっすぐ）<br>また、「真ん中」のように、「なか」のまえに発音「ｎ」の音が入ることもあります。<br>音韻脱落：<br>音韻脱落とは、音の一部がなくなることです、例えば、「河原」の場合、そのまま読むと「かわはら」ですが、「は」がなくなって、「かわら」と読みます。<br>なんで<br>音韻融合：<br>音韻融合とは、熟語や複合語の前の語の終わりと後ろの語の先頭が、混ざってような音になることです。<br>例えば、「狩人」の場合、そのまま読むと「かりひと」ですが、「り」と「ひと」が混ざって「りょうど」になり、「かりょうど」とみます。<br>素人（しろうと）、仲人（なこうど）<br>連声：<br>連声とは、熟語や複合語のまえの語のおわりが「ん」や「つ」で、後ろの語の先頭が、母音「あいうえお」「や行」「わ行」であるとき、<br>後ろの先頭が「た行」「な行」「ま行」に変わることです、漢語でよく見られます。<br>例えば、「反応」の場合、前の語のおわりが「ん」で、後ろの語の先頭が母音「お」なので、「お」が「な」行の「の」にへんかして「はんのう」と読みます。<br>因縁（いんねん）、銀杏（ぎんなん）、陰陽（おんみょう）</p>
<p>まとめ：<br>変音現象は、発音しやすくするためのへんかです、変音現象には沢山の種類があり、また一度に複数の変温現象が起こることもあります、何故変音すると、発音しやすくなるでしょうか、もう一度「反応」を見てみましょう、もし変化しないまま「はんおん」とははっきり発音しょうとすると、「ん」から「お」に舌の形を変えるときに、息が途切れて発音がしにくいですね、では「ん」で舌を上顎につけてから「お」というどうしようか？息が繋がって、発音しやすいと思います、舌を上顎につけてから「お」というと、自然に「の」になりますね</p>
]]></content>
  </entry>
</search>
